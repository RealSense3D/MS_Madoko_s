title		: definition lists
author		: Daan
author note : &time;
~Pre : replace=/->/\(&rarr;\)/g

<style>
pre.pretty { 
  font-family: Cambria, serif;
  font-size: 95%;
}

.pretty td {
  padding: 0pt;
}
.pretty td.empty {
  width: 0.25em;
}
.pretty .token.identifier { font-style: italic }
.pretty .token.constructor { font-style: italic }
</style>


~ TexRaw
\mdDefineToken{identifier}{\mdTokenIdentifier}
\mdDefineToken{type}{\mdTokenType}
\mdDefineToken{constructor}{\mdTokenConId}
\mdDefineToken{type:identifier}{\mdTokenTypeId}
\newcommand{\mdTokenIdentifier}[1]{\textit{#1}}
\newcommand{\mdTokenTypeId}[1]{\textit{\mdTokenType{#1}}}
\newcommand{\mdTokenConId}[1]{\textit{\mdTokenConstructor{#1}}}
~

[TITLE]
[TOC]

Here is some `haskell code do`{language=haskell}, and here some more:

``` Haskell  {.pretty}
data Exp   =  Number    Int
           |  Add       Exp Exp
           |  Subtract  Exp Exp
           |  Multiply  Exp Exp
           |  Divide    Exp Exp
           |  Variable  String        -- added
           deriving (Eq)

substitute1  :: (String, Int) -> Exp -> Exp
substitute1  (var, val) exp = subst exp where
  subst (Number i)       = Number i
  subst (Add a b)        = Add (subst a) (subst b)
  subst (Subtract a b)   = Subtract (subst a) (subst b)
  subst (Multiply a b)   = Multiply (subst a) (subst b)
  subst (Divide a b)     = Divide (subst a) (subst b)
  subst (Variable name)  = if var == name
                            then Number val
                            else Variable name          
```          

``` Haskell  {.pretty}
data Exp   =  Number    Int
           |  Add       Exp Exp
           |  Subtract  Exp Exp
           |  Multiply  Exp Exp
           |  Divide    Exp Exp
           |  Variable  String        -- added
           deriving (Eq)
```

``` Haskell {.pretty}
substitute1 :: (String, Int) -> Exp -> Exp
substitute1  (var, val) exp = subst exp where
  subst (Number i)       =  Number i
  subst (Add a b)        =  Add (subst a) (subst b)
  subst (Subtract a b)   =  Subtract (subst a) (subst b)
  subst (Multiply a b)   =  Multiply (subst a) (subst b)
  subst (Divide a b)     =  Divide (subst a) (subst b)
  subst (Variable name)  =  if var == name
                             then Number val
                             else Variable name          
```          
