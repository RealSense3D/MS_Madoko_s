title		: definition lists
author		: Daan
author note : &time;
Doc Class   : article

~Pre : replace=/->/\(2:&rarr;\)/g
~Pre,~Code: .pretty

<style>
.xpretty td {
  border: 1px solid black;
}
.xpretty .token {
  color: black !important;
}
</style>

~ TexRaw
\renewcommand{\mdTokenKeyword}[1]{\textsf{#1}}
\newcommand{\mdTokenOperator}[1]{\,#1\,}
\newcommand{\mdTokenIdentifier}[1]{\textit{#1}}
~



[TITLE]
[TOC]

Here is some `haskell code do`{language=haskell}, and here some more:

``` haskell  
data Exp   =  Number    Int
           |  Add       Exp Exp
           |  Subtract  Exp Exp
           |  Multiply  Exp Exp
           |  Divide    Exp Exp
           |  Variable  String        -- added
           deriving (Eq)

substitute1  :: (String, Int) -> Exp -> Exp
substitute1  (var, val) exp = subst exp where
  subst (Number i)       =  Number i
  subst (Add a b)        =  Add (subst a) (subst b)
  subst (Subtract a b)   =  Subtract (subst a) (subst b)
  subst (Multiply a b)   =  Multiply (subst a) (subst b)
  subst (Divide a b)     =  Divide (subst a) (subst b)
  subst (Variable name)  =  if var == name
                             then Number val
                             else Variable name          
```          

``` Html 
<span>  test</span>
<span>  aligned</span> &amp;
```

``` Haskell  
data Exp   =  Number    Int
           |  Add       Exp Exp
           |  Subtract  Exp Exp
           |  Multiply  Exp Exp
           |  Divide    Exp Exp
           |  Variable  String        -- added
           deriving (Eq)
```

``` Haskell 
scanr1        :: (a -> a -> a) -> [a] -> [a]
scanr1 f xxs  =  case xxs of 
                   x:xs ->  case xs of 
                              []  ->  [x] 
                              _   ->  let  qs = scanr1 f xs 
                                      in   case qs of 
                                            q:_ -> f x q : qs
```          
