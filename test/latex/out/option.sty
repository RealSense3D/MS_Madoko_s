%---------------------------------------------------------------------------
%  Copyright 2013 Microsoft Corporation.
% 
%  This is free software; you can redistribute it and/or modify it under the
%  terms of the Apache License, Version 2.0. A copy of the License can be
%  found in the file "license.txt" at the root of this distribution.
%---------------------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}[1995/12/01]

\RequirePackage{etoolbox}

% --------------------------------------------------------
% Extensions to etoolbox
% --------------------------------------------------------

\providerobustcmd*\@swaparg[2]{#2{#1}}
\providerobustcmd*\expandnext[2]{\expandafter\@swaparg\expandafter{#2}{#1}}

\providerobustcmd*\eifstrequal[1]{\expandnext\ifstrequal{#1}}
\providerobustcmd*\eifblank[1]{\expandnext\ifblank{#1}}

\providerobustcmd*\ontoggle[2]{\iftoggle{#1}{#2}{}}

\providerobustcmd*\providelength[1]{\ifdef{#1}{}{\newlength#1}}
\providerobustcmd*\csnewlength[1]{\expandafter\newlength\csname #1\endcsname}
\providerobustcmd*\csprovidelength[1]{\ifcsdef{#1}{}{\expandafter\newlength\csname #1\endcsname}}
\providerobustcmd*\cssetlength[2]{\expandafter\setlength\csname #1\endcsname{#2}}


% --------------------------------------------------------
% Basic option commands
% \option{<key>} returns the value of a key
% \letoption{<key>}\cmd  let's \cmd to the value of <key>
% --------------------------------------------------------

\newcommand\option[1]{\csname optk@#1\endcsname}
\newrobustcmd*\letoption[2]{\expandafter\let\expandafter#2\csname optk@#1\endcsname}


% --------------------------------------------------------
% optionset, optionsetalso
% main key setting routine
% --------------------------------------------------------

\newif\ifopt@ignoreunknown
\newif\ifopt@nosearch

\newrobustcmd*\optionset[1]{%
  \def\opt@defaultpath{/}%
  \opt@nosearchfalse%
  \opt@ignoreunknownfalse%
  \optionsetalso{#1}%
}
\newrobustcmd*\optionsetalso[1]{\opt@do#1,\relax,}



% the default value
\def\opt@default{}


% The main parsing of options
% This code is quite expanded to make it as efficient as possible.
% It is based on the original code by David Carlisle in the 
% standard latex "keyval" package.
\def\opt@do#1,{%
 \ifx\relax#1\empty\else
  \opt@split#1==\relax
  \expandafter\opt@do\fi}


\def\opt@split#1=#2=#3\relax{%
  \opt@spdef\option@rawkey{#1}%
  \ifx\option@rawkey\@empty\else
    % get value
    \ifx\@empty#3\@empty
      \let\option@value\opt@default
    \else
      \opt@spdef\option@value{#2}%
    \fi
    % try key directly
    \edef\option@key{\option@rawkey}%
    \ifoptionisabsolute{\option@rawkey}%
      {\edef\option@key{\option@rawkey}}% cannot let since option@rawkey may be a command
      {\edef\option@key{\opt@defaultpath/\option@rawkey}}% use default path for relative keys
    \letoption\option@key\opt@trykey
    %\typeout{try: \option@key (\meaning\option@rawkey, \opt@defaultpath)}%
    \ifx\opt@trykey\relax
      % not directly found..
      \option@gethandler\option@key% defines option@handlerkey & option@handler
      \ifx\option@handler\@empty
        % search key
        \ifopt@nosearch\else
          \opt@searchalso{\option@key}%
        \fi
      \else
        % handler
        \letoption{/handlers/\option@handler}\opt@trykey
        \ifx\opt@trykey\relax\else
          \edef\option@key{/handlers/\option@handler}% will get \option@handlerkey
        \fi
      \fi
      \ifx\opt@trykey\relax
        % still not found: invoke unknown handler
        \opt@unknown{\option@key}%        
      \fi
    \fi
    % now \option@key and \option@value are defined; invoke the /.@cmd
    %\typeout{call \option@key/.@cmd }%
    \expandafter\csname optk@\option@key/.@cmd\expandafter\endcsname\expandafter{\option@value}%
  \fi
}

% magic option parsing ;-) Basically unchanged from original definition in the keyval package 
%\def\option@rawkey#1{%
%\def\opt@@sp@def##1##2{\opt@@sp@b##2\@nil\@nil#1\@nil\relax##1}}
%\option@rawkey{ }
%\def\opt@@sp@b#1#2 \@nil{\opt@@sp@c#1#2}
%\def\opt@@sp@c#1\@nil#2\relax#3{\def#3{#1}}

% space gobbling; basically unchanged from the original definition in pgfkeys.
% this definition is better than the one from the keyval package as it allows code fragments with parameters
\newtoks\opt@temptoks
\long\def\opt@argumentisspace#1{%
  \long\def\opt@spdef##1##2{%
    \futurelet\opt@possiblespace\opt@sp@a##2\opt@stop\opt@stop#1\opt@stop\relax##1}%
  \def\opt@sp@a{%
    \ifx\opt@possiblespace\opt@sptoken%
      \expandafter\opt@sp@b%
    \else%
      \expandafter\opt@sp@b\expandafter#1%
    \fi}%
  \long\def\opt@sp@b#1##1 \opt@stop{\opt@sp@c##1}%
}
\opt@argumentisspace{ }
\long\def\opt@sp@c#1\opt@stop#2\relax#3{\opt@temptoks{#1}\edef#3{\the\opt@temptoks}}
{\def\:{\global\let\opt@sptoken= } \: }



% search a key
\newrobustcmd*\opt@searchforkey[2]{%
  \option@ifisabsolute{#2}%
    \letoption{#2}\opt@trykey
    \ifx\opt@trykey\relax\else
      \edef\option@key{#2}% found
    \fi
  \else  
    \letoption{#1#2}\opt@trykey% use default path
    \ifx\opt@trykey\relax
      \ifopt@nosearch\else
        \opt@searchalso{#1#2}%
      \fi
    \else    
      \edef\option@key{#1#2}% !found
    \fi
  \fi
}

% search an absolute key (and use searchalso too)
\newrobustcmd*\opt@searchforabskey[1]{%
  \letoption{#1}\opt@trykey
  \ifx\opt@trykey\relax
    \ifopt@nosearch\else
      \opt@searchalso{#1}%
    \fi
  \else    
    \edef\option@key{#1}% !found
  \fi
}

% \opt@searchalso: invoked to search for a key: set \opt@trykey and \option@key if a match is found
%
% note: we can nest searches without grouping
% because they all use the same "\do" (option@searchalsodo) and
% all need to break once the inner one breaks (so it is fine if \opt@break redefined \do)
\newrobustcmd*\opt@searchalso[1]{%
  \typeout{searchalso #1}%
  \let\do\opt@searchalsodo
  \option@foreachparent{#1}%
}
\newrobustcmd*\opt@searchalsodo[3]{% {<root>}{<subpath>}{<name>}
  \letoption{#1/.searchalso}\opt@temp
  \ifx\opt@temp\relax\else
    \edef\option@searchkey{#2#3}% subpath
    \opt@temp% invoke search routine
    \ifx\opt@trykey\relax\else\opt@break\fi% on found: break loop
  \fi
}

% invoked on unknown key: set \option@key to the unknown handler (with option@unknownkey)
\newrobustcmd*\opt@unknown[1]{%
  \def\do##1##2##3{%
    \letoption{##1/.unknown}\opt@temp
    \ifx\opt@temp\relax\else
      \edef\option@unknownkey{#1}% full key
      \edef\option@unknownsubpath{##2##3}% subpath
      \edef\option@key{##1/.unknown}%
      \opt@break%
    \fi%
  }
  \option@foreachparent{#1}%

}

% \option@gethandler{key}: split off the part after the "/.", sets option@handlerkey and option@handler
\def\option@gethandler#1{\expandafter\option@gethandler@#1/././.\relax}
\def\option@gethandler@#1/.#2/.#3/.#4\relax{%
  \def\option@handler{#2}%
  \ifx\option@handler\@empty\else
    \def\opt@temp{#3}%
    \ifx\opt@temp\@empty
      \def\option@handlerkey{#1}%
      \def\option@handler{.#2}%
      %\typeout{handler: #1,#2-#3-#4}%      
    \else
      % nested handlers.. only happens at definition time
      \typeout{nested handler.. #3}%
      \option@gethandler@/.#3/.#4\relax
      \edef\option@handlerkey{#1/.#2\option@handlerkey}%      
      %\typeout{handler: \option@handlerkey, \option@handler}
    \fi
  \fi
}
\def\option@handlerkey{}

% \option@isabsolute{key}: check if key starts with /
\def\ifoptionisabsolute#1{\expandafter\ifoptionisabsolute@#1/\relax}
\def\ifoptionisabsolute@#1/#2\relax{\def\opt@temp@abs{#1}\ifx\opt@temp@abs\@empty\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}


% \option@splitroot{path}: split off the first directory of a path into \option@root 
% option@splitroot{/foo/bar} -> foo 
% option@splitroot{/foo}  -> foo
\newrobustcmd*\option@splitroot[1]{\expandafter\option@splitroot@#1//\relax}
\def\option@splitroot@#1/#2/#3\relax{%
  \def\option@root{#1}%
  \ifx\option@root\@empty
    \def\option@root{#2}%
  \fi
}

% \option@splitkey{key}: \option@path and \option@name
% \option@splitkey{/foo/bar/baz} -> /foo/bar baz
\newrobustcmd*\option@splitkey[1]{%
  \let\option@path\@empty
  \ifoptionisabsolute{#1}{%
    \def\do##1##2##3{%
      \edef\option@path{##1/}%
      \edef\option@name{##3}%
      \opt@break
    }
    \option@foreachparent{#1}%
  }{\edef\option@name{#1}}%
}


% \option@foreachparent{<path>}  basic routine for iterating over path components
% applies \do to each parent path. 
%   /foo/bar/baz  -> \do{/foo/bar}{}{baz} \do{/foo}{bar/}{baz} \do{}{foo/bar/}{baz} 
\newrobustcmd*\option@foreachparent[1]{%
  \let\opt@donext\do%
  \expandafter\opt@foreachparent@#1/\relax\relax%
  \do{}{\option@subpath}{\option@name}%
}

\newrobustcmd*\opt@break{\def\opt@donext##1##2##3{}}

\def\opt@foreachparent@/#1/#2\relax#3\relax{% #3 is the current root
  \def\opt@temp{#2}%
  \ifx\opt@temp\@empty% final key
    \def\option@name{#1}%
    \def\option@subpath{}%
  \else
    \opt@foreachparent@/#2\relax#3/#1\relax% recurse first
    \opt@donext{#3/#1}{\option@subpath}{\option@name}%
    \edef\option@subpath{#1/\option@subpath}%
  \fi
}


% --------------------------------------------------------
% Default handlers
% --------------------------------------------------------

\newrobustcmd*\optionerror[2][\option@key]{\PackageError{options}{option "#1": #2}{}}
\newrobustcmd*\optionexpecterror[2][\option@key]{\optionerror{unexpected "\option@value" (expecting #2)}}

% \optionaddsearch{<path>}{<search paths>}
% add new search paths to a path.
% for efficiency we expand out the search code inline instead of iterating
\newrobustcmd*\optionaddsearch[2]{%
  \def\do##1{%
    \edef\opt@temp{%
      \noexpand\ifx\noexpand\opt@trykey\noexpand\relax
        \noexpand\opt@searchforabskey{##1/\noexpand\option@searchkey}%
      \noexpand\fi
    }%
    \expandnext{\option@append{#1/.searchalso}}{\opt@temp}%
  }
  \expandnext\docsvlist{#2}%
}


% --------------------------------------------------------
% Basic option setting
% --------------------------------------------------------

\newrobustcmd*\edefoption[2]{\protected@edef#2{\option{#1}}}%

\newrobustcmd*\option@setkey[2]{\csdef{optk@#1}{#2}}
\newrobustcmd*\option@letkey[2]{\cslet{optk@#1}#2}

\newrobustcmd*\option@esetkey[2]{\expandnext{\option@setkey{#1}}{#2}}
\newrobustcmd*\option@xsetkey[2]{\protected@edef\opt@temp{#2}\option@letkey{#1}\opt@temp}
\newrobustcmd*\option@expand[1]{\option@xsetkey{\option{#1}}}

\newrobustcmd*\option@append[2]{\csappto{optk@#1}{#2}}
\newrobustcmd*\option@eappend[2]{\ecsappto{optk@#1}{#2}}
\newrobustcmd*\option@prepend[2]{\cspreto{optk@#1}{#2}}

\newrobustcmd*\ifoptiondefined[1]{\ifcsdef{optk@#1}}
\newrobustcmd*\ifoptionvoid[1]{\ifcsvoid{optk@#1}}
\newrobustcmd*\ifoptioncmd[1]{\ifcsparam{optk@#1}}

\newrobustcmd*\ifoptionequal[2]{%
  \letoption{#1}\opt@temp
  \eifstrequal{\opt@temp}{#2}%
}

\newrobustcmd*\ifoptionblank[2]{%
  \letoption{#1}\opt@temp
  \eifblank{\opt@temp}{#2}%
}


% --------------------------------------------------------
% Comma seperated values
% --------------------------------------------------------

\newcommand\headof[1]{\opt@headof#1,\relax}%
\def\opt@headof#1,#2\relax{#1}%

\providerobustcmd*\ifanyof[2]{%
  \let\opt@do@next\@secondoftwo
  \edef\opt@temp{#1}%
  \def\do##1{\eifstrequal{\opt@temp}{##1}{\let\opt@do@next\@firstoftwo\listbreak}{}}%
  \expandnext\docsvlist{#2}%
  \opt@do@next
}

\newrobustcmd*\ifoptionanyof[2]{\ifanyof{\valueof{#1}}{#2}}

\newcount\opt@idx
\providerobustcmd*\findidx[3]{%
  \opt@idx=0\relax
  \def#3{-1}%
  \edef\opt@temp{#1}%
  \def\do##1{\eifstrequal{\opt@temp}{##1}{\edef#3{\the\opt@idx}\listbreak}{\advance\opt@idx 1\relax}}%
  \expandnext\docsvlist{#2}%
}

% return the first letter of the argument or ' ' (space) if the input was empty. Does not expand the argument.
\providecommand*\firstletterof[1]{\eifblank{#1}{ }{\expandafter\opt@firstletterof@#1\relax}}
\def\opt@firstletterof@#1#2\relax{#1}

% --------------------------------------------------------
% Lists
% --------------------------------------------------------

\newrobustcmd*\option@setnil[1]{\option@setkey{#1}{}}
\newrobustcmd*\option@push[2]{\listcsadd{optk@#1}{#2}}
\newrobustcmd*\option@epush[2]{\listcseadd{optk@#1}{#2}}%
\newrobustcmd\optionlistdo[2]{\def\opt@@do##1{#2}\forlistcsloop{\opt@@do}{optk@#1}}

\newrobustcmd*\option@setlist[2]{\option@setnil{#1}\option@concat{#1}{#2}}
\newrobustcmd*\option@concat[2]{%
  \def\do##1{\option@push{#1}{##1}}%
  \expandnext\docsvlist{#2}%
}
\newrobustcmd*\letoptionlist[2]{%
  \def#2{}%
  \optionlistdo{#1}{%
    \ifdefempty#2%
      {\def#2{##1}}%
      {\appto#2{,##1}}%
  }%
}
\newrobustcmd*\ifoptioncontains[2]{\xifinlistcs{#2}{optk@#1}}

\let\ifoptionnil\ifoptionvoid

\newrobustcmd*\option@pushifnew[2]{\ifoptioncontains{#1}{#2}{}{\option@push{#1}{#2}}}


% --------------------------------------------------------
% Assign
% --------------------------------------------------------

\newrobustcmd*\option@eassign[2]{%
  \protected@edef\opt@temp{#2}%
  \expandnext{\option@assign{#1}}{\opt@temp}%
}%
\newrobustcmd*\option@assign[2]{%
  \protected@edef\option@key{#1}%
  \def\option@value{#2}%
  \expandafter\csname optk@\option@key/.@cmd\expandafter\endcsname\expandafter{\option@value}%
}%
\newrobustcmd*\option@assigndefault[1]{%
  \protected@edef\option@key{#1}%
  \let\option@value\opt@default%
  \option{option@key/.@cmd}{\opt@default}%
}%


% --------------------------------------------------------
% Ensure arg/noarg/free/defined
% --------------------------------------------------------

\newrobustcmd*\option@ensurearg{%
  \ifx\option@value\opt@default
    \ifoptiondefined{\option@key/.@def}%
      {\letoption{\option@key/.@def}\option@value}%
      {\optionerror{requires a value}}%
  \fi
}%   
\newrobustcmd*\option@ensurenoarg{%
  \ifx\option@value\opt@default\else
    \optionerror{cannot take an argument (=\option@value)}%
  \fi
}%   
\newrobustcmd*\option@settoarg{\option@letkey{\option@key}{\option@value}}%   

\newrobustcmd*\option@ensurefree[1]{%
  \ifoptiondefined{#1}{%
    \optionerror[#1]{already defined}%
  }{}%
}%   
\newrobustcmd*\option@ensuredefined[1]{%
  \ifoptiondefined{#1}{}{%
    \optionerror[#1]{unknown option}%
  }%
}%


% --------------------------------------------------------
% Parse default arguments []
% --------------------------------------------------------

\def\opt@parsedefaultnoarg#1{\@ifnextchar[{\opt@errordefault{#1}}{}}
\def\opt@parsedefaultarg#1{\@ifnextchar[{\opt@setdefault{#1}}{}}
\def\opt@setdefault#1[#2]{\option@setkey{#1/.@def}{#2}}
\def\opt@errordefault#1[#2]{\optionerror[#1]{a starred option definition does not take a default argument "[#2]"}}

% --------------------------------------------------------
% Record metadata
% --------------------------------------------------------

\newrobustcmd*\option@addkeyinfo[1]{%
  \def\do##1##2##3{%
    \ifoptiondefined{##1/.names}{}{%
      \option@setnil{##1/.names}\option@setnil{##1/.paths}%
    }%
    \eifblank{##2}%
      {\expandnext{\option@pushifnew{##1/.names}}{##3}%
       %\typeout{path "##1/.names": add "##3": \option{##1/.names}}%      
      }%
      {\option@splitroot{##2}%
       \expandnext{\option@pushifnew{##1/.paths}}{\option@root}%
       %\typeout{path "##1/.paths": add "\option@root"; \option{##1/.paths}}%
      }%
  }
  \option@foreachparent{#1}%
}

% --------------------------------------------------------
% Basic definitions of options
% --------------------------------------------------------
\def\opt@patch@check{}

\newrobustcmd*\optionnewcmd{\@ifstar{\optionnewcmd@{noarg}}{\optionnewcmd@{arg}}}
\newrobustcmd*\optionnewcmd@[3]{%*[]
  \typeout{define cmd: #2}%  
  \option@ensurefree{#2}%
  \option@splitkey{#2}% sets option@path, and option@name
  \eifblank{\option@path}{%
    \optionerror[#2]{no valid option name specified. Option definitions must start with a forward slash (i.e. "/path/<name>")}%
  }{}%
  \option@addkeyinfo{#2}%
  \csdef{optk@#2/.@cmd}##1{%
    \typeout{invoke #2=\detokenize{##1}}%
    \csuse{option@ensure#1}%
    \opt@patch@check% hook to patch in extra checking code
    #3%
  }%
  \csletcs{optk@#2}{optk@#2/.@cmd}% point at first to the cmd
  \csuse{opt@parsedefault#1}{#2}% parse potential default argument
}

\newrobustcmd*\optionnewcmdvalue[4]{%[]
  \optionnewcmd{#1}{#2}%
  \option@setkey{#1}{#3}%
  \option@setkey{#1/.@ini}{#4}%
  \option@assign{#1}{#4}% this invokes the cmd the first time  
  \opt@parsedefaultarg{#1}% parse potential default argument
}

\newrobustcmd*\optionnewcheckedvalue[3]{%[]
  \optionnewcmd{#1}{%
    #2%
    \option@letkey{#1}{\option@value}%
  }%
  \option@setkey{#1/.@ini}{#3}%
  \option@assign{#1}{#3}% this invokes the cmd the first time  and assigns the initial value
  \opt@parsedefaultarg{#1}% set default value?
}

\newrobustcmd*\optionnewvalue[2]{%[]
  \optionnewcheckedvalue{#1}{}{#2}%
}


% --------------------------------------------------------
% Add pre/post processing to an option
% --------------------------------------------------------

\newrobustcmd*\optionaddcheck[2]{%
  \option@ensuredefined{#1}%
  \patchcmd{\csuse{optk@#1/.@cmd}{\opt@patch@check}{#2\opt@patch@check}{}{\optionerror[#1]{unable to prepend extra option check}}}
}

% make an option that always expands its argument
\newrobustcmd*\optionaddexpands[1]{%
  \option@ensuredefined{#1}%
  \letoption{#1/.@cmd}\opt@oldcmd%
  \option@letkey{#1/.@xcmd}\opt@oldcmd%
  \def\opt@newcmd##1{\protected@edef\option@value{##1}\expandnext{\option{#1/.@xcmd}}{\option@value}}%
  \option@letkey{#1/.@cmd}\opt@newcmd
}

% add a custom show function for this option value
\newrobustcmd*\optionaddshow[2]{%
  \def\opt@temp##1{#2}%
  \option@letkey{#1/.@show}\opt@temp%
}

% --------------------------------------------------------
% Default unknown handler
% --------------------------------------------------------

% Default unknown key handler.
\optionnewcmd{/.unknown}{%
  \let\opt@trykey\relax
  \eifblank{\option@unknownkey}{\def\option@unknownkey{?}}{}%
  \ifoptionisabsolute{\option@unknownkey}%
    {\optionerror[\option@unknownkey]{unknown option}}%
    {\optionerror[\option@unknownkey]{unknown option under "\opt@defaultpath"}}%
}[]



% --------------------------------------------------------
% Derived option definitions
% --------------------------------------------------------

\newrobustcmd*\option@settype[2]{\option@setkey{#1/@type}{#2}}
\newrobustcmd*\ifoptiontype[2]{\edefoption{#1/@type}\opt@type\eifstrequal{\opt@type}{#2}}

\newrobustcmd*\optionnewstyle{\@ifstar{\optionnewstyle@{\optionnewcmd*}}{\optionnewstyle@{\optionnewcmd}}}%
\newrobustcmd*\optionnewstyle@[3]{#1{#2}{\optionsetalso{#3}}\option@settype{#2}{style}}

\newrobustcmd*\optionnewif[2]{%
  \ifcsdef{if#2}{}{\optionerror[#1]{no `if` with name "#2" is defined}}%
  \optionnewcmd{#1}{%
    \ifcsdef{#2\option@value}%
      {\csuse{#2\option@value}}%
      {\optionexpecterror{a boolean value}}%
  }[true]%
  \option@setkey{#1}{#2}% return the name of the if
  \option@settype{#1}{if}%
}

\newrobustcmd*\optionnewdef[2]{%
  \ifdef{#2}{}{\optionerror[#1]{no definition "\detokenize{#2}" is found}}%
  \optionnewcmd{#1}{\def#2{##1}}%
  \option@setkey{#1}{#2}% read points to definition
  \option@settype{#1}{def}%
}

\newrobustcmd*\optionnewedef[2]{%
  \ifdef{#2}{}{\optionerror[#1]{no definition "\detokenize{#2}" is found}}%
  \optionnewcmd{#1}{\edef#2{##1}}%
  \option@setkey{#1}{#2}% read points to definition
  \option@settype{#1}{edef}{}%
}

\newrobustcmd*\optionnewcounter[2]{%
  \ifltxcounter{#2}{}{\optionerror[#1]{no counter with name "#2" is defined}}%
  \optionnewcmd{#1}{\eifblank{\option@value}{\refstepcounter{#2}}{\setcounter{#2}{##1}}}[]%
  \option@setkey{#1}{#2}% read returns the plain name of the counter 
  \option@settype{#1}{counter}%
}

\newrobustcmd*\optionnewtoggle[2]{%
  \newtoggle{#1}%
  \optionnewcmdvalue{#1}{%
    \ifcsdef{toggle\option@value}%
      {\csuse{toggle\option@value}{#1}}%
      {\optionexpecterror{a boolean value}}%
  }%
  {#1}% point to the name of the toggle
  {#2}% initial assignment
  [true]%
  \option@settype{#1}{toggle}%
}

\newrobustcmd*\optionnewchoice[2]{%  
  \optionnewcheckedvalue{#1}{%
    \edef\option@value{\option@value}%
    \typeout{option choice: #1= \meaning##1, \meaning\option@value}%
    \expandnext\findidx{\option@value}{#2}\option@choiceidx%
    \ifnum\option@choiceidx<0
      \optionexpecterror{one of "#2"}%
    \else
      \option@esetkey{#1/@ord}{\option@choiceidx}%
      \option@xsetkey{#1/@tag}{\firstletterof{\option@value}}
    \fi
  }%
  {\headof{#2}}%  
  \option@setkey{#1/@ord}{0}% 
  \option@xsetkey{#1/@tag}{\firstletterof{#2}}%
  \optionaddshow{#1}{%
    \option@showvalue{\option{##1}} 
    (\option@font@name{side/@ord}=\option{#1/@ord},\option@font@name{side/@tag}=\option@font@value{\option{##1/@tag}})%
  }%
  \option@settype{#1}{choice}%
}

\newrobustcmd*\optionnewlength[2]{%
  \csnewlength{#1}%
  \optionaddshow{#1}{\option@showvalue{\the\option{#1}}}%
  \optionnewcmdvalue{#1}{%
    \cssetlength{#1}{\dimexpr\option@value\relax}%
  }%
  {\csuse{#1}}% read value
  {#2}% initial value
  \option@settype{#1}{length}%
}

\newrobustcmd*\optionnewdim[2]{%
  \optionnewcmdvalue{#1}{%
    \option@setkey{#1/@dimexpr}{##1}% keep the unevaluated dim expr
  }%
  {\dimexpr\option{#1/@dimexpr}\relax}% read as dimexpr
  {#2}[]%
  \optionaddshow{#1}{\opt@showdim{#1}}%
  \option@settype{#1}{dim}%
}
\newrobustcmd*\opt@showdim[1]{\option@showvalue{\the\option{#1}}\ (=\optionshowliteral{#1/@dimexpr})}


\newrobustcmd*\optionnewnum[2]{%
  \optionnewcmdvalue{#1}{%
    \option@esetkey{#1}{\the\numexpr ##1\relax}%
  }%
  {0}%
  {#2}[]%
  \option@settype{#1}{num}%
}

\newrobustcmd*\optionnewlist[2]{%
  \optionnewcmdvalue{#1}{%
    \option@setlist{#1}{##1}%
  }%
  {}%
  {#2}[]%
  \optionaddshow{#1}{\typeout{showing #1, \option{#1}}\letoptionlist{##1}\opt@list\typeout{gotten}\option@showvalue{\opt@list}}%
  \option@settype{#1}{list}%
}


% --------------------------------------------------------
% Initial handlers
% --------------------------------------------------------

\optionnewif{/.ignore}{opt@ignoreunknown}
\optionnewif{/.nosearch}{opt@nosearch}

\optionnewcmd*{/handlers/.cd}{\edef\opt@defaultpath{\option@handlerkey}}
\optionnewcmd*{/handlers/.expands}{\expandnext\optionaddexpands{\option@handlerkey}}

\optionnewcmd{/handlers/.expand once}{\expandnext{\option{\option@handlerkey/.@cmd}}{#1}}
\optionnewcmd{/handlers/.expand twice}{\expandnext{\expandnext{\option{\option@handlerkey/.@cmd}}}{#1}}
\optionnewcmd{/handlers/.expanded}{\protected@edef\opt@temp{#1}\expandnext{\option{\option@handlerkey/.@cmd}}{\opt@temp}}

\optionnewcmd{/handlers/.add}{%
  \ifoptiontype{\option@handlerkey}{counter}% check if this is a counter or a number
    {\addtocounter{\option{\option@handlerkey}}{#1}}%
    {\option@eassign{\option@handlerkey}{\option{\option@handlerkey} + #1}}%
}

\optionnewcmd{/handlers/.push}{%
  \typeout{push #1 to \option@handlerkey}%
  \option@push{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.concat}{\option@concat{\option@handlerkey}{#1}}

% new types
\optionnewcmd{/handlers/.new cmd}{\expandnext\optionnewcmd{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new cmd*}{\expandnext{\optionnewcmd*}{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new style}{\expandnext\optionnewcmd{\option@handlerkey}{\optionsetalso{#1}}}
\optionnewcmd{/handlers/.new style*}{\expandnext{\optionnewcmd*}{\option@handlerkey}{\optionsetalso{#1}}}
\optionnewcmd{/handlers/.new value}{\expandnext\optionnewvalue{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new length}{\expandnext\optionnewlength{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new dim}{\expandnext\optionnewdim{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new num}{\expandnext\optionnewnum{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new choice}{\expandnext\optionnewchoice{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new toggle}{\expandnext\optionnewtoggle{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new list}{\expandnext\optionnewlist{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.new family}{%
  \expandnext{\optionnewcmd*}{\option@handlerkey}{\edef\opt@defaultpath{\option@key}}%
  \expandnext\optionaddsearch{\option@handlerkey}{#1}%
}[]

% hook into existing definitions
\optionnewcmd{/handlers/.is if}{\expandnext\optionnewif{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.is counter}{\expandnext\optionnewcounter{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.is def}{\expandnext\optionnewdef{\option@handlerkey}{#1}}
\optionnewcmd{/handlers/.is edef}{\expandnext\optionnewedef{\option@handlerkey}{#1}}


% compatibility with pgfkeys
\optionnewstyle{/handlers/.code}{\option@handlerkey/.cmd={#1}}%
\optionnewstyle{/handlers/.style}{\option@handlerkey/.new style={#1}}%
\optionnewstyle*{/handlers/.is family}{\option@handlerkey/.new family}%
\optionnewstyle{/handlers/.search also}{\expandnext\optionaddsearch{\option@handlerkey}{#1}}


% --------------------------------------------------------
% Show definitions
% --------------------------------------------------------
\newtoggle{option@showbuiltin}

\newrobustcmd*\optionshowall[1][false]{\csuse{toggle#1}{option@showbuiltin}\optionshowpath{}}

\newrobustcmd*\option@font@name[1]{\textsf{#1}}
\newrobustcmd*\option@font@path[1]{\textsf{#1}}
\newrobustcmd*\option@font@value[1]{\textsf{#1}}
\newrobustcmd*\option@font@special[1]{\textit{#1}}

\newrobustcmd*\option@showvalue[1]{$\langle$\option@font@value{#1}$\rangle$}

\newrobustcmd*\optionshowpath[2][]{\option@showpath{#1#2}{#2}}
\newrobustcmd*\option@showpath[2]{%
  \noindent\option@font@path{#2/}%
  \option@showitems{/.names}{\option@showname}{#1}%
  \option@showitems{/.paths}{\option@showpath}{#1}%
}

\newrobustcmd*\option@showitems[3]{%
  \ifoptionvoid{#3#1}{}{%
    \begin{opt@marginlr}{1em}{0em}
     \optionlistdo{#3#1}{%
       \iftoggle{option@showbuiltin}{}{\eifstrequal{#3/##1}{/handlers}{\@gobble}{\if\firstletterof{##1}.\relax\expandafter\@gobble\fi}}{%
         \noindent\hspace*{-0.5em}#2{#3/##1}{##1}%
         \par%
       }%
     }%
    \end{opt@marginlr}%
  }%
}

\newrobustcmd*\option@showname[2]{%
  \option@font@name{#2}%
  =\optionshow{#1}%
  \ifoptiondefined{#1/.@ini}{%
    , initial=\optionshowliteral{#1/.@ini}%
  }{}%
  \ifoptiondefined{#1/.@def}{%
    , default=\optionshowliteral{#1/.@def}%
  }{}%
}

\newrobustcmd*\optionshowliteral[1]{\letoption{#1}\opt@temp\option@showvalue{\texttt{\expandnext\detokenize{\opt@temp}}}}

\newrobustcmd*\optionshow[1]{%
  \ifoptiondefined{#1/.@show}%
    {\option{#1/.@show}{#1}}%
    {\ifoptioncmd{#1}%
      {\option@font@special{cmd}}%
      {\option@showvalue{\option{#1}}}}%
}


\newenvironment{opt@marginlr}[2]{%
  \topsep\z@
  \partopsep\z@
  \trivlist
  \rightmargin=\dimexpr#2\relax%
  \leftmargin=\dimexpr#1\relax%  
  \advance\linewidth -\rightmargin
  \advance\linewidth -\leftmargin
  \advance\@totalleftmargin \leftmargin
  \parshape \@ne \@totalleftmargin \linewidth
  \item[]%
}%
{\endtrivlist}