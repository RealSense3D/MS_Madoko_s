%---------------------------------------------------------------------------
%  Copyright 2013 Microsoft Corporation.
% 
%  This is free software; you can redistribute it and/or modify it under the
%  terms of the Apache License, Version 2.0. A copy of the License can be
%  found in the file "license.txt" at the root of this distribution.
%---------------------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}[1995/12/01]

\RequirePackage{iftex}
\RequirePackage{etoolbox}
\RequirePackage[table]{xcolor}
\RequirePackage{graphicx}
\RequirePackage{options}
\RequirePackage{longfbox}

%-------------------------------------------------------------
% Process options 
%-------------------------------------------------------------
\options{%
  /madoko/.new family,
  /madoko/heading-base/.new num=1,
  /madoko/math/.new toggle,
  /madoko/beamer/.new toggle,
  /madoko/fontspec/.new toggle,
}

\@ifclassloaded{beamer}{\options{/madoko/beamer=true}}{}
\ifdef\mathmode{\options{/madoko/math=true}}{}
\options@ProcessOptions{/madoko}


%-------------------------------------------------------------
% Packages
%-------------------------------------------------------------

\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
\RequirePackage{stmaryrd}
\RequirePackage{textcomp}
\RequirePackage{pifont}

%\RequirePackage{pdfcomment}
\RequirePackage[bookmarks=true,pdfpagelabels=false]{hyperref} % loaded by pdfcomment
\RequirePackage{bookmark}

% package only loaded outside snippets
\iftoggle{/madoko/math}{}{%
  \RequirePackage{booktabs}
  \RequirePackage{array}
  \RequirePackage{longtable}
  \RequirePackage{enumitem}
  \RequirePackage{anyfontsize}
  
  % fontspec is expensive to load...
  \ontoggle{/madoko/fontspec}{%
     % font selection
    \ifXeTeX\RequirePackage{fontspec}\else
    \ifLuaTeX\RequirePackage{fontspec}\else
    \RequirePackage[utf8]{inputenc}
    \providecommand{\fontspec}[2][]{}
    \fi\fi
  }%
}%


%-------------------------------------------------------------
% Setup packages 
%-------------------------------------------------------------

% hyperref
\hypersetup{
  colorlinks=true,linkcolor=navy,urlcolor=blue,filecolor=Maroon,bookmarksdepth=3,bookmarksopenlevel=1
}

% booktabs
\ifdefined\aboverulesep
\setlength{\aboverulesep}{0pt}
\setlength{\belowrulesep}{0pt}
\setlength{\doublerulesep}{\heavyrulewidth}
\fi



%-------------------------------------------------------------
% Util
%-------------------------------------------------------------
\providecommand\defcommand{\@ifstar\md@defcommand@S\md@defcommand@N}
\newcommand\md@defcommand@S[1]{\let#1\outer\renewcommand*#1}
\newcommand\md@defcommand@N[1]{\let#1\outer\renewcommand#1} 

\providecommand\provideenvironment{\@star@or@long\md@provide@environment}
\newcommand\md@provide@environment[1]{%
  \@ifundefined{#1}%
    {\def\reserved@a{\newenvironment{#1}}}%
    {\def\reserved@a{\renewenvironment{md@dummy@environ}}}%
  \reserved@a
}
\newcommand\md@dummy@environ{}

\newcommand\leavehmode{\ifhmode\par\fi}
\newlength{\px}\setlength{\px}{0.4pt}% assume 180 dpi

% Suppress the indentation on the following paragraph
\providecommand\nofirstindent{\@afterindentfalse\@afterheading}

% addvskip is not suppressed in a minipage
\providecommand\addvskip[1]{%
  \ifvmode
    \ifdim \lastskip =\z@
      \vskip #1\relax
    \else
      \@tempskipb#1\relax\@xaddvskip
    \fi
  \else
    \@noitemerr
  \fi
}

% Suppress the paragraph skip on the following paragraph
\providecommand\nofirstparskip{\addvskip{-\parskip}}

% We need to call \mdlabeltarget for any structure that can set label
\newcounter{md@targetcount}
\newcommand{\mdlabeltarget}{\refstepcounter{md@targetcount}}

% ------------------------------------------------------------------------------
%  \eifstrequal    test string equality but first expands the first argument
%  \cseifstrequal  test string equality but first expands the first csname argument
%  \eifblank       test if a string is empty but first expand the argument
%  \onnotblank     test if a string is not blank but has only a then branch

\providecommand\eifstrequal[1]{\expandafter\ifstrequal\expandafter{#1}}
\providecommand\cseifstrequal[1]{\protected@edef\md@strtmp{#1}\eifstrequal{\md@strtmp}}

\providecommand\eifblank[1]{\expandafter\ifblank\expandafter{#1}}
\providecommand\onnotblank[2]{\ifblank{#1}{}{#2}}

%-------------------------------------------------------------
% Colors
%-------------------------------------------------------------

% Define a color name: either in terms a color specification or as a HTML color "\#XXXXXX"
% 
% \mddefinecolor[<default>]{<colorname>}{<colorspec|htmlcolor>}

\def\md@colorhtml#1\relax#2\relax{\definecolor{#2}{HTML}{#1}}
\def\md@colorlet#1\relax#2\relax{\eifstrequal{#1}{currentcolor}{\colorlet{#2}{.}}{\colorlet{#2}{#1}}}
\def\md@definecolorx{\@ifnextchar \#{\@firstoftwo{\md@colorhtml}}{\md@colorlet}}
\newcommand\mddefinecolor[3][black]{%
  \ifblank{#3}%
    {\colorlet{#2}{#1}}%
    {\expandafter\md@definecolorx #3\relax{#2}\relax}%
}

% Define basic CSS colors
\definecolor{red}{HTML}{FF0000}
\definecolor{lime}{HTML}{00FF00}
\definecolor{blue}{HTML}{0000FF}

\definecolor{yellow}{HTML}{FFFF00}
\definecolor{cyan}{HTML}{00FFFF}
\definecolor{magenta}{HTML}{FF00FF}

\definecolor{navy}{HTML}{000080}
\definecolor{maroon}{HTML}{800000}
\definecolor{green}{HTML}{008000}

\definecolor{teal}{HTML}{008080}
\definecolor{purple}{HTML}{800080}
\definecolor{olive}{HTML}{808000}

\definecolor{black}{HTML}{000000}
\definecolor{dimgray}{HTML}{696969}
\definecolor{gray}{HTML}{808080}
\definecolor{darkgray}{HTML}{A9A9A9}
\definecolor{silver}{HTML}{C0C0C0}
\definecolor{lightgray}{HTML}{D3D3D3}
\definecolor{gainsboro}{HTML}{DCDCDC}
\definecolor{floralwhite}{HTML}{FFFAF0}
\definecolor{ivory}{HTML}{FFFFF0}
\definecolor{white}{HTML}{FFFFFF}

\definecolor{orange}{HTML}{FFA500}
\definecolor{aqua}{HTML}{00FFFF}
\definecolor{fuchsia}{HTML}{FF00FF}

% define these keywords as colors but need to be handled specially
\colorlet{currentcolor}{black}
\colorlet{transparent}{white}
\colorlet{backgroundcolor}{white}

\newcommand*\eiftransparent[3]{%
  \ifblank{#1}{#2}{\eifstrequal{#1}{transparent}{#2}{#3}}%
}

\newrobustcmd\mdcolor[1]{%
  \eiftransparent{#1}{}{%
    \mddefinecolor{currentcolor}{#1}% allow direct HTML color spec
    \color{currentcolor}%
  }%
}

\newrobustcmd\mdbgcolor[2]{%
  \eiftransparent{#1}{#2}{%
    \mddefinecolor{bgcolor}{#1}%
    \colorbox{bgcolor}{#2}%
  }%
}

% ---------------------------------------------------
% Line info
% ---------------------------------------------------
\newcommand*\mdline[1]{} %ignore

% ---------------------------------------------------
% Dimensions as strings
% ---------------------------------------------------

% expressions for various css units
\newcommand*\dimeval[1]{\dimexpr #1\relax}
\newcommand*\dimpx[1]{#1\px}
\newcommand*\dimrem[1]{#1\dim@rem}
\newcommand*\dimch[1]{#1\dim@ch}
\newcommand*\dimvh[1]{#1\textheight}
\newcommand*\dimvw[1]{#1\textwidth}
\newcommand*\dimvmin[1]{\dimeval{\dimmin\textwidth\textheight * #1}}
\newcommand*\dimvmax[1]{\dimeval{\dimmax\textwidth\textheight * #1}}

\newlength\dim@rem
\newlength\dim@ch
\newlength\md@height
\AtBeginDocument{%
  \setlength\dim@rem{1em}%
  \settowidth\dim@ch{0}%
  \setlength{\md@height}{\textheight}%
}

% expressions for widht/height percentages
\newcommand\dimheight[1]{#1\md@height}
\newcommand\dimwidth[1]{#1\linewidth}
\newcommand\dimfont[1]{#1ex}

% dimdefault{arg}{default}  use default if arg is empty
\newcommand\dimdefault[2]{\ifblank{#1}{#2}{#1}}

% dimmin/dimmax return minimum or maximum dimension
\newcommand\dimmin[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim #1>#2\relax #2\else #1\fi}}%
}
\newcommand\dimmax[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim #1>#2\relax #1\else #2\fi}}%
}

% ifzero, ifbothzero  test for a blank string or 0 dimension
\providecommand\ifzero[1]{%
  \ifblank{#1}{\@firstoftwo}{\ifdim #1=0pt\relax\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}%
}
\providecommand\ifbothzero[2]{%
  \ifzero{#1}{\ifzero{#2}{\@firstoftwo}{\@secondoftwo}}{\@secondoftwo}%
}

% onnotzero takes only a then branch
\providecommand\onnotzero[1]{\ifzero{#1}{}}

% ---------------------------------------------------
% Margins
% ---------------------------------------------------

% calculate the auto margin based on the (border-box) width of the block and the width of 
% the other margin; use an empty other margin width if the other margin is also auto
%  
% \dimauto{<width>}{<other-margin>}
\newcommand\dimauto[2]{%
  \ifblank{#2}{\dimeval{(\linewidth-#1)/2}}{\dimeval{\linewidth-#1-#2}}%
}

\newenvironment{mdmarginlr}[2]{%
  \topsep\z@
  \partopsep\z@
  \trivlist
  \rightmargin=\dimdefault{#2}{\z@}%
  \leftmargin=\dimdefault{#1}{\z@}%  
  \advance\linewidth -\rightmargin
  \advance\linewidth -\leftmargin
  \advance\@totalleftmargin \leftmargin
  \parshape \@ne \@totalleftmargin \linewidth
  \item[]%
}%
{\endtrivlist} 
%\AfterEndEnvironment{mdmarginlr}{\leavehmode}

\newcommand*\mdmargintop[1]{\onnotzero{#1}{\par\addvskip{#1}}}
\newcommand*\mdmarginbottom[1]{\onnotzero{#1}{\addvskip{#1}}}

\newlength{\dim@marginbottom}
\newenvironment{mdbmargin}[1]{\begin{mdbmarginx}{#1}{#1}{#1}{#1}}{\end{mdbmarginx}}
\newenvironment{mdbmarginx}[4]{%
  \dim@marginbottom=\dimdefault{#3}{0pt}%  
  \mdmargintop{#1}%
  \begin{mdmarginlr}{#4}{#2}%  
}{%
  \end{mdmarginlr}%
  \mdmarginbottom{\dim@marginbottom}%  
}
\newenvironment{mdbmargintb}[2]{%
  \dim@marginbottom=\dimdefault{#2}{0pt}%  
  \mdmargintop{#1}%
}{%
  \mdmarginbottom{\dim@marginbottom}%  
}
\newcommand*\mdpaddingtop[1]{\ifzero{#1}{}{\vspace*{#1}}}
\newcommand*\mdpaddingbottom[1]{\ifzero{#1}{}{\vspace*{#1}}}

\newlength{\dim@paddingbottom}
\newenvironment{mdbpadding}[1]{\begin{mdbpaddingx}{#1}{#1}{#1}{#1}}{\end{mdbpaddingx}}
\newenvironment{mdbpaddingx}[4]{%
  \dim@paddingbottom=\dimdefault{#3}{0pt}%
  \mdpaddingtop{#1}%
  \begin{mdmarginlr}{#4}{#2}%
}{%
  \end{mdmarginlr}%
  \mdpaddingbottom{\dim@paddingbottom}%
}

\newrobustcmd\mdmargintb[3]{%
   \setbox0=\hbox{\color@begingroup #3\color@endgroup}%
   \onnotblank{#1}{\rule{0pt}{\dimexpr \ht0 + #1\relax}}%
   \onnotblank{#2}{\rule[\dimexpr -\dp0 - #2\relax]{0pt}{0pt}}%
   \usebox0\relax%
}
\let\mdpaddingtb\mdmargintb


% ---------------------------------------------------
% Css box model
% ---------------------------------------------------

\newenvironment{mdblock}[1]{%
  \begin{longfbox}[tight,border-style=none,#1]%
}{\end{longfbox}}

\newcommand\mdinline[1]{\lfbox[tight,border-style=none,#1]}

% ---------------------------------------------------
% Fonts
% ---------------------------------------------------

\providecommand\fontspec[1]{\PackageWarning{madoko}{Please use meta-key "package: fontspec" in order to \MessageBreak use font-family: #1\MessageBreak}}

\newcommand*\mdfontsize[1]{\fontsize{#1}{1.2\dimexpr#1\relax}\selectfont}

% ---------------------------------------------------
% Inline elements
% ---------------------------------------------------

\newcommand\mdstrong{\textbf}
\newcommand\mdem{\emph}
\newcommand\mdsup[1]{\ensuremath{^\mathrm{#1}}}
\newcommand\mdsub[1]{\ensuremath{_\mathrm{#1}}}
\newcommand\mddel[1]{{\mdcolor{gray}#1}}

\newcommand\mdbr{\mdBr}

% code
% precode
% br

\newcommand\mdfootnote[2]{%
  \gdef\@thefnmark{#1}\@footnotemark\@footnotetext{#2}%
}

\providecommand\pdfmarkupcomment[3][]{}
\newcommand\mdtooltip[2]{%
  #2%
  \hbox to 0pt{\raisebox{1ex}{\tiny\pdfmarkupcomment[color=White,author=Title]{}{#1}}}%
}

\providecommand\pdfbookmark[3][]{}
\newcommand\mdbookmark[3]{%
  \pdfbookmark[#1]{#2}{#3}%
}

%-------------------------------------------------------------
% Code
%-------------------------------------------------------------

\newcommand\mdcode{\texttt}
\newcommand\mdprecode{\ttfamily}
\newlength\mdpreskip
\setlength\mdpreskip{0.5ex}
\newenvironment{mdpre}{\par\addvskip{\mdpreskip}\noindent}{\par\addvskip{\mdpreskip}}

\newlength\presp
\settowidth\presp{\texttt{ }}
\newcommand\prespace[1]{\hspace*{#1\presp}}
\newcommand\preindent[1]{\hspace*{#1\presp}}
\newcommand\prebr{\strut\\}

\newcommand{\md@tokenpostfix}{}
\newcommand{\md@tokencmd}[1]{#1}
\newrobustcmd{\mdtoken}[2]{%
  \def\md@tokencmd##1{##1}%
  \@for\@tname:=#1\do{%
    \ifcsdef{mdtoken\md@tokenpostfix\@tname}{\apptox\md@tokencmd{\csname mdtoken\md@tokenpostfix\@tname\endcsname}}{}%
  }%
  \md@tokencmd{#2}%
}

\newcommand{\apptox}[2]{%  apptox{\cmd1}{\cmd2} == newcommand{\cmd1'}[1]{\cmd1{\cmd2{#1}}}
  \ifdef#1{}{\def#1##1{##1}}% define it if necessary (as identity)
  \protected@edef#1##1{#1{\protect #2{##1}}}%
}

%-------------------------------------------------------------
% Standard token classes for syntax highlighting 
%-------------------------------------------------------------

\newcommand{\mdtokenidentifier}[1]{#1}
\newcommand{\mdtokenkeyword}[1]{\textcolor{navy}{#1}}
\newcommand{\mdtokenpredefined}[1]{\textcolor{navy}{#1}}
\newcommand{\mdtokenstring}[1]{\textcolor{maroon}{#1}}
\newcommand{\mdtokenstringEscape}[1]{\textcolor{gray}{#1}}
\newcommand{\mdtokencomment}[1]{\textcolor{green}{#1}}
\newcommand{\mdtokenspecial}[1]{\textcolor{navy}{#1}}
\newcommand{\mdtokendoc}[1]{\textcolor{gray}{#1}}
\newcommand{\mdtokenconstant}[1]{\textcolor{purple}{#1}}
\newcommand{\mdtokentag}[1]{\textcolor{navy}{#1}}
\newcommand{\mdtokenerror}[1]{\textcolor{red}{#1}}
\newcommand{\mdtokenattribute}[1]{\textcolor{purple}{#1}}
\newcommand{\mdtokenconstructor}[1]{\textcolor{purple}{#1}}
\newcommand{\mdtokennamespace}[1]{\textcolor{navy}{#1}}
\newcommand{\mdtokentype}[1]{\textcolor{teal}{#1}}
\newcommand{\mdtokenemphasis}[1]{\itshape #1}
\newcommand{\mdtokenstrong}[1]{\bfseries #1}
\newcommand{\mdtokentitle}[1]{\bfseries #1}
\newcommand{\mdtokenmeta}[1]{\textcolor{Gray}{#1}}
\newcommand{\mdtokenentity}[1]{{#1}}
\newcommand{\mdtokendelimiter}[1]{{#1}}

\newcommand{\mdtokennumber}[1]{\mdtokenconstant{#1}}
\newcommand{\mdtokenliteral}[1]{\mdtokenconstant{#1}}
\newcommand{\mdtokenitalic}[1]{\mdtokenemphasis{#1}}
\newcommand{\mdtokenbold}[1]{\mdtokenstrong{#1}}
\newcommand{\mdtokenregexp}[1]{\mdtokenstring{#1}}
\newcommand{\mdtokeninvalid}[1]{\mdtokenerror{#1}}
\newcommand{\mdtokenvalue}[1]{\mdtokenstring{#1}}

% Pretty tokens

\newcommand{\mdtokenprettyIdentifier}[1]{\textit{#1}}
\newcommand{\mdtokenprettyConstructor}[1]{\textit{#1}}
\newcommand{\mdtokenprettyKeyword}[1]{\textsf{#1}}
\newcommand{\mdtokenprettyOperator}[1]{\,#1\,}

%-------------------------------------------------------------
% Math
%-------------------------------------------------------------

\newenvironment{mdmathprearray}%
  {\setlength{\arraycolsep}{0pt}\begin{array}{llllllll}}%
  {\end{array}\hspace*{\linewidth minus \linewidth}} % flush left

\defcommand{\mathkw}[1]{\mathsf{{#1}}}
\defcommand{\mathid}[1]{\mathit{#1}}

\defcommand{\smallstrut}{\mbox{\rule{0ex}{1ex}}}

\newcommand{\mdmathspace}[1]{\mskip\numexpr4*#1\relax mu plus #1mu minus #1mu\smallstrut}
\newcommand{\mdmathindent}[1]{\mskip\numexpr8*#1\relax mu\smallstrut}
\newcommand{\mdmathbr}{\\}

% legacy
\let\mdMathspace\mdmathspace
\let\mdMathindent\mdmathindent
\let\mdMathbr\mdmathbr
\let\mdMathprearray\mdmathprearray
\let\endmdMathprearray\endmdmathprearray

% customizable tags in equations
\newcommand\md@mathtag{}
\newcommand\mdmathtag[1]{\def\md@mathtag{\tag*{#1}\mdlabeltarget\gdef\md@mathtag{}}}
\preto{\]}{\md@mathtag}


%-------------------------------------------------------------
% The following commands still use capital letters due to legacy...
%-------------------------------------------------------------

%-------------------------------------------------------------
% Character commands 
%-------------------------------------------------------------

\providecommand{\lt}{\ensuremath{<}}
\providecommand{\gt}{\ensuremath{>}}
\providecommand{\abs}[1]{\ensuremath{\left\vert #1\right\vert}}
\providecommand{\qedsymbol}{\ensuremath{\Box}}
\providecommand{\qed}{\hfill\qedsymbol}

% inserted for unknown html entities
\newcommand{\mdUnknownEntity}[1]{\&#1;}
\newcommand{\mdEntity}[1]{\protect\mdUnknownEntity{#1}}

% allow the definition of new entities: \mdDefineEntity{bar}{\|}
\newcommand{\mdDefineEntity}[2]{%
  \protected@edef\mdEntity##1{\protect\eifstrequal{##1}{#1}{#2}{\mdEntity{##1}}}%
}

% inserted for unknown unicode entities
\newcommand{\mdUnicodeUnknown}[1]{%
  \ifXeTeX\mdUnicodeChar{#1}\else%
  \ifLuaTeX\mdUnicodeChar{#1}\else%
  \&\##1;\fi\fi
}
\newcommand{\mdUnicodeChar}[1]{\char#1} % directly insert the unicode glyph
\newcommand{\mdUnicode}[1]{\protect\mdUnicodeUnknown{#1}}

% allow the definition of new unicode entities: \mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\newcommand{\mdDefineUnicode}[2]{%
  \protected@edef\mdUnicode##1{\protect\ifnum##1=#1{#2}\protect\else{\mdUnicode{##1}}\protect\fi}%
}

% ballot boxes
\mdDefineUnicode{9745}{\rlap{$\square$}\protect\raisebox{.15ex}{\kern 0.1em\ding{51}}}
\mdDefineUnicode{9746}{\rlap{$\square$}{\kern 0.1em\ding{55}}}
% magnifying glass
\mdDefineUnicode{128270}{\kern -0.75ex\protect\raisebox{-0.25ex}{$\arrownot$}\kern 1.05ex\protect\raisebox{0.5ex}{$\circ$}\hspace{-0.25ex}}
% short underscore
\mdDefineUnicode{818}{\leavevmode\kern 0.06em\vbox{\hrule width 0.3em}}


% break and nbsp
\newcommand{\mdBr}{\ifvmode\leavevmode\fi\\{}}
\newcommand{\mdNbsp}{\nobreak\rule{0pt}{0pt}~}

\newcommand{\mdBrSep}[2]{%
  \expandafter\ifx#1\relax\relax #2\else
  \expandafter\ifx#2\relax\relax #1\else
  #1\mdBr #2\fi\fi
}

% fix nobreakspace in case the user loads a T1 encoding in LaTeX
\DeclareTextCommandDefault{\nobreakspace}{\leavevmode\nobreak\ }

% ---------------------------------------------------
% Labels and references
% ---------------------------------------------------

% We need to call \mdLabeltarget for any structure that can set label
\newcounter{@mdTargetCount}
\newcommand{\mdLabeltarget}{\refstepcounter{@mdTargetCount}}


% ---------------------------------------------------
% Math snippets for static image generation
% ---------------------------------------------------

% re-define some symbols
\renewcommand{\notin}{\not\in}  %turns out the baseline for 'notin' is wrong

% boxes and lengths
\newsavebox{\@snippetBox}
\newlength{\@snippetWidth}
\newlength{\@snippetHeight}
\newlength{\@snippetDepth}

\newcounter{snippets}

\newcommand{\@savedepth}{%
  \setlength{\@snippetWidth}{\wd\@snippetBox}%
  \setlength{\@snippetHeight}{\ht\@snippetBox}%
  \setlength{\@snippetDepth}{\dp\@snippetBox}%
  \addtolength{\@snippetHeight}{\@snippetDepth}%
  \immediate\write\foo{\arabic{snippets},\@snippetName,\the\@snippetWidth,\the\@snippetHeight,\the\@snippetDepth}%
  \noindent\usebox\@snippetBox%
}

\newenvironment{mdDisplaySnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\edef\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}\vbox\bgroup}%
  {\egroup\end{lrbox}\@savedepth\newpage}

\newenvironment{mdInlineSnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\def\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}}%
  {\end{lrbox}\@savedepth\newpage}

\newenvironment{mdSnippets}%
    {\pagestyle{empty}%
     \abovedisplayskip=0pt%
     \belowdisplayskip=0pt%
     \abovedisplayshortskip=0pt%
     \belowdisplayshortskip=0pt%
     \newwrite\foo\immediate\openout\foo=\jobname.dim%
     \immediate\write\foo{\%ordinal,(hash)name,width,(total) height,depth,image width,image height,dpi,base64 encoding}%
    }%
    {\closeout\foo}
