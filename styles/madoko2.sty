%---------------------------------------------------------------------------
%  Copyright 2013 Microsoft Corporation.
% 
%  This is free software; you can redistribute it and/or modify it under the
%  terms of the Apache License, Version 2.0. A copy of the License can be
%  found in the file "license.txt" at the root of this distribution.
%---------------------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}[1995/12/01]

\RequirePackage{iftex}
\RequirePackage{etoolbox}
\RequirePackage{collectbox}
\RequirePackage[table]{xcolor}
\RequirePackage{graphicx}
\RequirePackage{xkeyval}

%-------------------------------------------------------------
% Conditionals
%-------------------------------------------------------------

\newif\ifmathmode
\newif\ifbeamer
%\newif\ifmdusetikz\mdusetikzfalse
%\newif\ifmdusefontspec\mdusefontspecfalse

\@ifclassloaded{beamer}{\beamertrue}{\beamerfalse}
\ifdef\mathmode{\mathmodetrue}{\mathmodefalse}

%-------------------------------------------------------------
% Process options 
%-------------------------------------------------------------
\newcommand{\mdHeadingBase}{1}
\DeclareOptionX{heading-base}[1]{\gdef\mdHeadingBase{#1}}
%\DeclareOptionX{tikz}{\mdusetikztrue}
%\DeclareOptionX{fontspec}{\mdusefontspectrue}
\DeclareOptionX{math}{\mathmodetrue}

\define@boolkey{md}[mduse]{tikz}{}
\define@boolkey{md}[mduse]{fontspec}{}
\ProcessOptionsX\relax


%-------------------------------------------------------------
% Packages
%-------------------------------------------------------------

\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
\RequirePackage{stmaryrd}
\RequirePackage{textcomp}
\RequirePackage{pifont}

%\RequirePackage{pdfcomment}
\RequirePackage[bookmarks=true]{hyperref} % loaded by pdfcomment

% package only loaded outside snippets
\ifmathmode\else
  \RequirePackage{booktabs}
  \RequirePackage{tablefootnote}
  \RequirePackage{array}
  \RequirePackage{longtable}
  \RequirePackage{enumitem}
  
  % these last two packages about half the load time... 
  % but are only required for:
  % - breakable divs with borders or background colors
  % - rounded corners
  % - font-family with arbitrary font
  \ifmdusetikz
    \RequirePackage[breakable,skins]{tcolorbox}
  %\else
  %  \RequirePackage[breakable]{tcolorbox}
  \fi
  \ifmdusefontspec
     % font selection
    \ifXeTeX\RequirePackage{fontspec}\else
    \ifLuaTeX\RequirePackage{fontspec}\else
    \RequirePackage[utf8]{inputenc}
    \providecommand{\fontspec}[2][]{}
    \fi\fi
  \fi
\fi


%-------------------------------------------------------------
% Setup packages 
%-------------------------------------------------------------

% hyperref
\hypersetup{
  colorlinks=true,linkcolor=Navy,urlcolor=Blue,filecolor=Maroon,bookmarksdepth=3,bookmarksopenlevel=1
}

% booktabs
\ifdefined\aboverulesep
\setlength{\aboverulesep}{0pt}
\setlength{\belowrulesep}{0pt}
\setlength{\doublerulesep}{\heavyrulewidth}
\fi



%-------------------------------------------------------------
% Util
%-------------------------------------------------------------
\providecommand\defcommand{\@ifstar\md@defcommand@S\md@defcommand@N}
\newcommand\md@defcommand@S[1]{\let#1\outer\renewcommand*#1}
\newcommand\md@defcommand@N[1]{\let#1\outer\renewcommand#1} 

\providecommand\provideenvironment{\@star@or@long\md@provide@environment}
\newcommand\md@provide@environment[1]{%
  \@ifundefined{#1}%
    {\def\reserved@a{\newenvironment{#1}}}%
    {\def\reserved@a{\renewenvironment{md@dummy@environ}}}%
  \reserved@a
}
\newcommand\md@dummy@environ{}

\newcommand\leavehmode{\ifhmode\par\fi}
\newlength{\px}\setlength{\px}{0.4pt}% assume 180 dpi

% Suppress the indentation on the following paragraph
\providecommand\nofirstindent{\@afterindentfalse\@afterheading}

% addvskip is not suppressed in a minipage
\providecommand\addvskip[1]{%
  \ifvmode
    \ifdim \lastskip =\z@
      \vskip #1\relax
    \else
      \@tempskipb#1\relax\@xaddvskip
    \fi
  \else
    \@noitemerr
  \fi
}

% Suppress the paragraph skip on the following paragraph
\providecommand\nofirstparskip{\addvskip{-\parskip}}

% ------------------------------------------------------------------------------
%  \eifstrequal    test string equality but first expands the first argument
%  \cseifstrequal  test string equality but first expands the first csname argument
%  \eifblank       test if a string is empty but first expand the argument
%  \ifnotblank     test if a string is not blank but has only a then branch

\providecommand\eifstrequal[1]{\expandafter\ifstrequal\expandafter{#1}}
\providecommand\cseifstrequal[1]{\protected@edef\md@strtmp{#1}\eifstrequal{\md@strtmp}}

\providecommand\eifblank[1]{\expandafter\ifblank\expandafter{#1}}
\providecommand\ifnotblank[2]{\ifblank{#1}{}{#2}}

%-------------------------------------------------------------
% Colors
%-------------------------------------------------------------

% Define a color name: either in terms a color specification or as a HTML color "\#XXXXXX"
% 
% \mddefinecolor[<default>]{<colorname>}{<colorspec|htmlcolor>}

\def\md@colorhtml#1\relax#2\relax{\definecolor{#2}{HTML}{#1}}
\def\md@colorlet#1\relax#2\relax{\eifstrequal{#1}{currentcolor}{\colorlet{#2}{.}}{\colorlet{#2}{#1}}}
\def\md@definecolorx{\@ifnextchar \#{\@firstoftwo{\md@colorhtml}}{\md@colorlet}}
\newcommand\mddefinecolor[3][black]{%
  \ifblank{#3}%
    {\colorlet{#2}{#1}}%
    {\expandafter\md@definecolorx #3\relax{#2}\relax}%
}

% Define basic CSS colors
\definecolor{red}{HTML}{FF0000}
\definecolor{lime}{HTML}{00FF00}
\definecolor{blue}{HTML}{0000FF}

\definecolor{yellow}{HTML}{FFFF00}
\definecolor{cyan}{HTML}{00FFFF}
\definecolor{magenta}{HTML}{FF00FF}

\definecolor{navy}{HTML}{000080}
\definecolor{maroon}{HTML}{800000}
\definecolor{green}{HTML}{008000}

\definecolor{teal}{HTML}{008080}
\definecolor{purple}{HTML}{800080}
\definecolor{olive}{HTML}{808000}

\definecolor{black}{HTML}{000000}
\definecolor{dimgray}{HTML}{696969}
\definecolor{gray}{HTML}{808080}
\definecolor{darkgray}{HTML}{A9A9A9}
\definecolor{silver}{HTML}{C0C0C0}
\definecolor{lightgray}{HTML}{D3D3D3}
\definecolor{gainsboro}{HTML}{DCDCDC}
\definecolor{floralwhite}{HTML}{FFFAF0}
\definecolor{ivory}{HTML}{FFFFF0}
\definecolor{white}{HTML}{FFFFFF}

\definecolor{orange}{HTML}{FFA500}
\definecolor{aqua}{HTML}{00FFFF}
\definecolor{fuchsia}{HTML}{FF00FF}

% define these keywords as colors but need to be handled specially
\colorlet{currentcolor}{black}
\colorlet{transparent}{white}
\colorlet{backgroundcolor}{white}

\newcommand*\eiftransparent[3]{%
  \ifblank{#1}{#2}{\eifstrequal{#1}{transparent}{#2}{#3}}%
}

\newrobustcmd\mdcolor[1]{%
  \eiftransparent{#1}{}{%
    \mddefinecolor{currentcolor}{#1}% allow direct HTML color spec
    \color{currentcolor}%
  }%
}

\newrobustcmd\mdcolorbox[2]{%
  \begingroup
  \eiftransparent{#1}{#2}{%
    \mddefinecolor{backgroundcolor}{#1}% allow direct HTML color spec
    \fboxsep=\z@%
    \fboxrule=\z@%
    \colorbox{backgroundcolor}{#2}%
  }%
  \endgroup
}

%-------------------------------------------------------------
% Character commands 
%-------------------------------------------------------------

\providecommand{\lt}{\ensuremath{<}}
\providecommand{\gt}{\ensuremath{>}}
\providecommand{\abs}[1]{\ensuremath{\left\vert #1\right\vert}}
\providecommand{\qedsymbol}{\ensuremath{\Box}}
\providecommand{\qed}{\hfill\qedsymbol}

% inserted for unknown html entities
\newcommand{\mdUnknownEntity}[1]{\&#1;}
\newcommand{\mdEntity}[1]{\protect\mdUnknownEntity{#1}}

% allow the definition of new entities: \mdDefineEntity{bar}{\|}
\newcommand{\mdDefineEntity}[2]{%
  \protected@edef\mdEntity##1{\protect\eifstrequal{##1}{#1}{#2}{\mdEntity{##1}}}%
}

% inserted for unknown unicode entities
\newcommand{\mdUnicodeUnknown}[1]{%
  \ifXeTeX\mdUnicodeChar{#1}\else%
  \ifLuaTeX\mdUnicodeChar{#1}\else%
  \&\##1;\fi\fi
}
\newcommand{\mdUnicodeChar}[1]{\char#1} % directly insert the unicode glyph
\newcommand{\mdUnicode}[1]{\protect\mdUnicodeUnknown{#1}}

% allow the definition of new unicode entities: \mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\newcommand{\mdDefineUnicode}[2]{%
  \protected@edef\mdUnicode##1{\protect\ifnum##1=#1{#2}\protect\else{\mdUnicode{##1}}\protect\fi}%
}

% ballot boxes
\mdDefineUnicode{9745}{\rlap{$\square$}\protect\raisebox{.15ex}{\kern 0.1em\ding{51}}}
\mdDefineUnicode{9746}{\rlap{$\square$}{\kern 0.1em\ding{55}}}
% magnifying glass
\mdDefineUnicode{128270}{\kern -0.75ex\protect\raisebox{-0.25ex}{$\arrownot$}\kern 1.05ex\protect\raisebox{0.5ex}{$\circ$}\hspace{-0.25ex}}
% short underscore
\mdDefineUnicode{818}{\leavevmode\kern 0.06em\vbox{\hrule width 0.3em}}


% break and nbsp
\newcommand{\mdBr}{\ifvmode\leavevmode\fi\\{}}
\newcommand{\mdNbsp}{\nobreak\rule{0pt}{0pt}~}

\newcommand{\mdBrSep}[2]{%
  \expandafter\ifx#1\relax\relax #2\else
  \expandafter\ifx#2\relax\relax #1\else
  #1\mdBr #2\fi\fi
}

% fix nobreakspace in case the user loads a T1 encoding in LaTeX
\DeclareTextCommandDefault{\nobreakspace}{\leavevmode\nobreak\ }

% ---------------------------------------------------
% Labels and references
% ---------------------------------------------------

% We need to call \mdLabeltarget for any structure that can set label
\newcounter{@mdTargetCount}
\newcommand{\mdLabeltarget}{\refstepcounter{@mdTargetCount}}

% ---------------------------------------------------
% Line info
% ---------------------------------------------------
\newcommand*\mdline[1]{} %ignore

% ---------------------------------------------------
% Dimensions as strings
% ---------------------------------------------------

% expressions for various css units
\newcommand*\dimeval[1]{\dimexpr #1\relax}
\newcommand\dimpx[1]{#1\px}
\newcommand\dimrem[1]{#1\dim@rem}
\newcommand\dimch[1]{#1\dim@ch}
\newcommand\dimvh[1]{#1\textheight}
\newcommand\dimvw[1]{#1\textwidth}
\newcommand\dimvmin[1]{\dimeval{\dimmin\textwidth\textheight * #1}}
\newcommand\dimvmax[1]{\dimeval{\dimmax\textwidth\textheight * #1}}

\newlength\dim@rem
\newlength\dim@ch
\newlength\md@height
\AtBeginDocument{\setlength\dim@rem{1em}\settowidth\dim@ch{0}\setlength{\md@height}{\textheight}}

% expressions for widht/height percentages
\newcommand\dimheight[1]{#1\md@height}
\newcommand\dimwidth[1]{#1\linewidth}


% dimdefault{arg}{default}  use default if arg is empty
\newcommand\dimdefault[2]{\ifblank{#1}{#2}{#1}}

% dimmin/dimmax return minimum or maximum dimension
\newcommand\dimmin[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim #1>#2\relax #2\else #1\fi}}%
}
\newcommand\dimmax[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim #1>#2\relax #1\else #2\fi}}%
}

% ifzero, ifbothzero  test for a blank string or 0 dimension
\providecommand\ifzero[1]{%
  \ifblank{#1}{\@firstoftwo}{\ifdim #1=0pt\relax\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}%
}
\providecommand\ifbothzero[2]{%
  \ifzero{#1}{\ifzero{#2}{\@firstoftwo}{\@secondoftwo}}{\@secondoftwo}%
}

% ifnotzero takes only a then branch
\providecommand\ifnotzero[1]{\ifzero{#1}{}}

% ---------------------------------------------------
% Margins
% ---------------------------------------------------

% calculate the auto margin based on the (border-box) width of the block and the width of 
% the other margin; use an empty other margin width if the other margin is also auto
%  
% \dimauto{<width>}{<other-margin>}
\newcommand\dimauto[2]{%
  \ifblank{#2}{\dimeval{(\linewidth-#1)/2}}{\dimeval{\linewidth-#1-#2}}%
}

\newenvironment{mdmarginlr}[2]{%
  \topsep\z@
  \partopsep\z@
  \trivlist
  \rightmargin=\dimdefault{#2}{\z@}%
  \leftmargin=\dimdefault{#1}{\z@}%  
  \advance\linewidth -\rightmargin
  \advance\linewidth -\leftmargin
  \advance\@totalleftmargin \leftmargin
  \parshape \@ne \@totalleftmargin \linewidth
  \item[]%
}%
{\endtrivlist} 
\AfterEndEnvironment{mdmarginlr}{\leavehmode}

\newcommand*\mdmargintop[1]{\ifnotzero{#1}{\addvskip{#1}}}
\newcommand*\mdmarginbottom[1]{\ifnotzero{#1}{\addvskip{#1}}}

\newlength{\dim@marginbottom}
\newenvironment{mdbmargin}[1]{\begin{mdbmarginx}{#1}{#1}{#1}{#1}}{\end{mdbmarginx}}
\newenvironment{mdbmarginx}[4]{%
  \dim@marginbottom=\dimdefault{#3}{0pt}%  
  \mdmargintop{#1}%
  \begin{mdmarginlr}{#4}{#2}%  
}{%
  \end{mdmarginlr}%
  \mdmarginbottom{\dim@marginbottom}%  
}

\newcommand*\mdpaddingtop[1]{\ifzero{#1}{}{\vspace*{#1}}}
\newcommand*\mdpaddingbottom[1]{\ifzero{#1}{}{\vspace*{#1}}}

\newlength{\dim@paddingbottom}
\newenvironment{mdbpadding}[1]{\begin{mdbpaddingx}{#1}{#1}{#1}{#1}}{\end{mdbpaddingx}}
\newenvironment{mdbpaddingx}[4]{%
  \dim@paddingbottom=\dimdefault{#3}{0pt}%
  \mdpaddingtop{#1}%
  \begin{mdmarginlr}{#4}{#2}%
}{%
  \end{mdmarginlr}%
  \mdpaddingbottom{\dim@paddingbottom}%
}

%\AfterEndEnvironment{mdbpaddingx}{\vskip 0pt\relax}
%\AfterEndEnvironment{mdbmarginx}{\vskip 0pt\relax}
%\AfterEndEnvironment{mdbpadding}{\vskip 0pt\relax}
%\AfterEndEnvironment{mdbmargin}{\vskip 0pt\relax}

\newrobustcmd\mdmargintb[3]{%
   \setbox0=\hbox{\color@begingroup #3\color@endgroup}%
   \ifnotblank{#1}{\rule{0pt}{\dimexpr \ht0 + #1\relax}}%
   \ifnotblank{#2}{\rule[\dimexpr -\dp0 - #2\relax]{0pt}{0pt}}%
   \usebox0\relax%
}
\let\mdpaddingtb\mdmargintb

% ---------------------------------------------------
% Height
% ---------------------------------------------------

\newenvironment{mdbheight}[1]{%
  \md@height=#1%
  \noindent\begin{mdminipage}{t}{\md@height}{t}{\linewidth}%
}{\end{mdminipage}\leavehmode}




%-------------------------------------------------------------
% A minipage environment that 
% - maintains the listdepth, parindent, and parskip
% - doesn't interfere with footnotes
% - suppresses the first indentation
%-------------------------------------------------------------
\newif\if@savefootnotes
\newcommand{\md@savefootnotes}%
  {\if@savefootnotes\else%
    \let\footnote\tablefootnote%
   \fi%
   \@savefootnotestrue}%
\newcommand{\md@restorefootnotes}%   
  {\if@savefootnotes\else%
    \tfn@tablefootnoteprintout% 
    \gdef\tfn@fnt{0}%
   \fi}% 

\newlength{\md@parindent}
\newskip{\md@parskip}
\newcount{\md@listdepth}

\newenvironment{mdminipage}[4]{%
  \md@savefootnotes%
  \md@parindent=\parindent%
  \md@parskip=\parskip%
  \let\md@listdepth\@listdepth%
  \begin{minipage}[#1][#2][#3]{#4}%
    \parindent=\md@parindent%
    \parskip=\md@parskip%
    \let\@listdepth\md@listdepth%
    \nofirstparskip%
    \nofirstindent%
}{\end{minipage}\md@restorefootnotes}


%-------------------------------------------------------------
% Borders & Backgrounds
%
% This is a big part because we need to emulate lots of CSS
% borders styles in LaTeX. For rounded corners, and breakable
% blocks we rely on the "tcolorbox" package
%-------------------------------------------------------------

% ------------------------------------------------------------------------------
% Set the background color of a block (using colorbox)
%
% \begin{mdbcolorbox}{<color>}
% \mdcolorbox{<color>}{<content>}

\newcommand\md@bcolorbox[2]{%
  \begingroup
  \fboxsep\z@%
  \collectboxcheckenv{#1}%
  \collectbox@{\noindent\begin{mdminipage}{}{}{t}{\linewidth}}%
              {\mdcolorbox{#2}{\vbox{\hbox to \linewidth{\BOXCONTENT}}}\md@adjustmargin\endgroup}%
              {\end{mdminipage}}%
}


% adjust the bottom margin after a minipage
\newcommand\md@adjustmargin[1][0pt]{%
  \ifhmode\par\fi
  \ifdim\dimexpr\baselineskip-1em-#1\relax>0pt%
    \addvspace{\dimexpr\baselineskip-1em-#1\relax}\fi
}

\newcommand\mdbcolorbox[1]{\md@bcolorbox{mdbcolorbox}{#1}}


% ------------------------------------------------------------------------------
% Define our own fancy fbox called md@borderbox
%
% It uses the command \md@border<side> to draw each border side.
% The optional argument sets the box to a certain width

% store dimension of the content and border box for rule drawing
\newlength\md@borderboxwidth
\newlength\md@borderboxheight
\newlength\md@contentboxwidth
\newlength\md@contentboxdepth
\newlength\md@contentboxheight

\newrobustcmd\md@borderbox[2][]{%
  \leavevmode
  \mddefinecolor{md@savecolor}{currentcolor}%
  \ifblank{#1}%
    {\setbox\@tempboxa\hbox{\color@begingroup\mdcolor{md@savecolor}#2\color@endgroup}}%
    {\setbox\@tempboxa\hbox to #1 {\color@begingroup\mdcolor{md@savecolor}#2\hss\color@endgroup}}%
  \@tempdima=\md@borderbottomwidth
  \advance\@tempdima\dp\@tempboxa
  % define content dimensions since \@tempboxa is not available after being used
  \md@contentboxwidth=\wd\@tempboxa
  \md@contentboxdepth=\dp\@tempboxa
  \md@contentboxheight=\dimexpr\ht\@tempboxa + \dp\@tempboxa\relax
  % border box
  \md@borderboxwidth=\dimexpr\wd\@tempboxa + \md@borderleftwidth + \md@borderrightwidth\relax 
  \md@borderboxheight=\dimexpr\md@contentboxheight + \md@bordertopwidth + \md@borderbottomwidth\relax
  % create the frame
  \hbox{%
    \lower\@tempdima\hbox{%
      \vbox{%
        \offinterlineskip
        \md@bordertop%
        \hbox{%
          \md@borderleft
          \vbox{%
            \box\@tempboxa}%
          \md@borderright
        }%
        \md@borderbottom}%
      }%
  }%
}


% ------------------------------------------------------------------------------
% Define standard border styles
%
% a style has the form \md@border<style>{<side>}{<direction>}{<borderwidth>}
% where <side> is the border side
%       <direction> is either "h" or "v" (horizontal or vertical)
%       <borderwidth> the width of the rule
%
% predefined styles: none, solid, transparent, dashed, and dotted.

\newcommand*\md@bordernone[3]{}
\newcommand*\md@bordersolid[3]{\ifx#2h\relax \hrule\@height #3\else\vrule\@width #3\fi}
\newcommand*\md@bordertransparent[3]{\ifx#2h\relax \rule{0pt}{#3}\else\rule{#3}{0pt}\fi}

\newlength\md@dashlen
\newcommand*\md@borderdashed@[2]{%
  \md@dashlen=\dimexpr\dimmax{\md@bordertopwidth}{\dimmax{\md@borderbottomwidth}{\dimmax{\md@borderrightwidth}{\dimmax{\md@borderleftwidth}{2.5pt}}}}\relax
  \ifx#2h%
    \hbox to \md@borderboxwidth{\xleaders \hbox{\md@hdash\hskip 0.5\md@dashlen\relax}\hfill\hbox{\md@hdash}}%
  \else 
    \lower\md@contentboxdepth\vbox to \md@contentboxheight{\cleaders \vbox{\vskip0.25\md@dashlen\md@vdash\vskip0.25\md@dashlen}\vfill}%
  \fi
}

\newcommand*\md@borderdashed[3]{%
  \def\md@hdash{\vrule width \md@dashlen height #3 depth 0pt}%
  \def\md@vdash{\hrule width #3 height \md@dashlen depth 0pt}%
  \md@borderdashed@{#1}{#2}%
}
\newcommand*\md@borderdotted[3]{%
  \def\md@hdash{\vrule width #3 height #3 depth 0pt\relax}%
  \def\md@vdash{\hrule width #3 height #3 depth 0pt\relax}%
  \md@borderdashed@{#1}{#2}%
}  

% ------------------------------------------------------------------------------
% Define a border from a <border spec>. A border specification has the form:
%
% <dimension>,<color>,<style>,...
%
% where every component is optional. 
% For example: "1pt,blue", ",,solid", "2em", ",\#CDCDCD,dashed".
%
% The command:
%    \md@defineborder{<side>}{<direction>}{<borderspec>}
%
% takes border specification (\md@defineborder{top}{h}{1pt,blue,dotted}) and generates definitions:
%  md@border<side>width    (a width as a string)
%  md@border<side>color    (a color name)
%  md@border<side>style    (the style as a string)
%  md@border<side>         (the command that draws this border (in \md@borderbox))

\def\md@defineborderx#1#2#3,#4,#5,#6\relax{%
  \csedef{md@border#1width}{\ifblank{#3}{0pt}{#3}}%
    \mddefinecolor{md@border#1color}{#4}%
  \ifdim\dimexpr\csuse{md@border#1width}\relax=0pt%
    \csdef{md@border#1style}{none}\else
    \csedef{md@border#1style}{\ifblank{#5}{solid}{#5}}\fi
  \ifstrequal{#4}{transparent}{% if the color is transparent, we use the transparent style
    \csdef{md@border#1style}{transparent}
    \mddefinecolor{md@border#1color}{white}}{}% redefine to an existing color
  \cseifstrequal{md@border#1style}{none}{%
    \csdef{md@border#1width}{0pt}}{}% ensure width = 0 for none style
  \edef\md@drawborder{md@border\csname md@border#1style\endcsname}%
  \ifcsdef{\md@drawborder}{}{%
    \PackageWarning{madoko}{The border style "#5" is not supported; defaulting to "solid".}%
    \edef\md@drawborder{md@bordersolid}%
  }%
  %\typeout{border: #1: \csuse{md@border#1width}, \csuse{md@border#1style}}%
  \csletcs{md@draw#1border}\md@drawborder%  
  \csdef{md@border#1}{%
    \mdcolor{md@border#1color}%
    \csuse{md@draw#1border}{#1}{#2}{\csuse{md@border#1width}}%
  }%
}
\newcommand*\md@defineborder[3]{%
  \md@defineborderx{#1}{#2}#3,,,\relax
}

% ------------------------------------------------------------------------------
%  Main css border command for blocks
%
%  mdbborder{<borderspec>}
%  mdbcborder{<borderspec>}{<bgcolor>}
%  mdbborderx{<top>}{<right>}{<bottom>}{<left>}{<bgcolor>}
%
%  and commands:
%
%  \mdborder{<borderspec>}{<content>}
%  \mdcborder{<borderspec>}{<bgcolor>}{<content>}
%  \mdborderx{<top>}{<right>}{<bottom>}{<left>}{<bgcolor>}{<content>}

\newlength\md@boxwidth
\newcommand\md@bborderx[6]{%
  \begingroup
  \noindent
  \md@defineborder{top}{h}{#2}%
  \md@defineborder{right}{v}{#3}%
  \md@defineborder{bottom}{h}{#4}%
  \md@defineborder{left}{v}{#5}%
  \md@boxwidth=\dimexpr\linewidth-\md@borderleftwidth-\md@borderrightwidth\relax
  \collectboxcheckenv{#1}%
  \collectbox@{\begin{mdminipage}{}{}{t}{\md@boxwidth}}%
              {\noindent\strut\mdcolorbox{#6}{\md@borderbox[\md@boxwidth]{\BOXCONTENT}\md@adjustmargin[\md@borderbottomwidth]}\endgroup}%
              {\end{mdminipage}}%
}


\newcommand\mdbborderx[5]{\md@bborderx{mdbborderx}{#1}{#2}{#3}{#4}{#5}}
\newcommand\mdbborder[1]{\md@bborderx{mdbborder}{#1}{#1}{#1}{#1}{}}
\newcommand\mdbcborder[2]{\md@bborderx{mdbcborder}{#1}{#1}{#1}{#1}{#2}}

\newrobustcmd*\mdborderx[7][]{%
  \mdcolorbox{#6}{%
    \begingroup
    \md@defineborder{top}{h}{#2}%
    \md@defineborder{right}{v}{#3}%
    \md@defineborder{bottom}{h}{#4}%
    \md@defineborder{left}{v}{#5}%
    \md@borderbox[#1]{#7}%
    \endgroup
  }%
}
\newrobustcmd*\mdborder[3][]{\mdborderx[#1]{#2}{#2}{#2}{#2}{}{#3}}
\newrobustcmd*\mdcborder[4][]{\mdborderx[#1]{#2}{#2}{#2}{#2}{#3}{#4}}

% ------------------------------------------------------------------------------
% If we load tcolorbox, we can support rounded corners and breakable content
% these environments have an extra x:
%
%   mdbxborder[<opts>]{<cornerradius>}{<borderspec>}
%   mdbxcborder[<opts>]{<cornerradius>}{<borderspec>}{<bgcolor>}
%   mdbxborderx[<opts>]{<cornerradius>}{<top?>}{<left>}{<bottom>}{<right>}{<bgcolor>}
%   mdbxcolorbox[<opts>]{<bgcolor>}  (breakable background-color)
%
% and x commands
%
%   \mdxborder[<opts>]{<cornerradius>}{<borderspec>}{<content>}
%   \mdxcborder[<opts>]{<cornerradius>}{<borderspec>}{<bgcolor>}{<content>}
%   \mdxborderx[<opts>]{<cornerradius>}{<top>}{<left>}{<bottom>}{<right>}{<bgcolor>}{<content>}
%   \mdxcolorbox[<opts>]{<bgcolor>}{<content>}
%
% in the <opts> we can specify things like:
%   [breakable]
%   [sharp corners=north]
%

\ifdefined\tcolorbox
  \newenvironment{mdtcolorbox}[1]{%
  \begin{tcolorbox}[%
    %enhanced,%
    before=\noindent,after={},%
    boxsep=0pt,left=0pt,right=0pt,top=0pt,bottom=0pt,%
    arc=0pt,boxrule=0pt,colback=backgroundcolor,colframe=white,%
    #1]\ignorespaces%
  }{\vspace*{0pt}\end{tcolorbox}}

  \newrobustcmd\mdtcbox[1]{\tcbox[%
    %enhanced,
    on line,%
    boxsep=0pt,left=0pt,right=0pt,top=0pt,bottom=0pt,%
    arc=0pt,boxrule=0pt,colback=backgroundcolor,colframe=white,#1]}

  \newcommand*\md@tcsetopts[7][]{%
    % reuse defineborder from the plain boxes
    \md@defineborder{top}{h}{#3}%
    \md@defineborder{right}{v}{#4}%
    \md@defineborder{bottom}{h}{#5}%
    \md@defineborder{left}{v}{#6}%
    \ifnotblank{#6}{\mddefinecolor{backgroundcolor}{#7}}%
    \def\md@borderradius{\ifblank{#2}{0pt}{#2}}%
    \ifmdusetikz
      % if we have rounded corners, we can only have one line style, we pick the top style
      \ifdim\dimexpr\md@borderradius\relax>0pt\relax
        \edef\md@tcopts{%
           enhanced,
           arc=\md@borderradius,rounded corners=all,
           boxrule=\md@bordertopwidth,%
           borderline={\md@bordertopwidth}{0pt}{md@bordertopcolor,\md@bordertopstyle},%
           #1}%
      % otherwise specify each style separately
      \else
        \edef\md@tcopts{%
          enhanced,
          toprule=\md@bordertopwidth,rightrule=\md@borderrightwidth,bottomrule=\md@borderbottomwidth,leftrule=\md@borderleftwidth,%
          borderline north={\md@bordertopwidth}{0pt}{md@bordertopcolor,\md@bordertopstyle},%
          borderline east={\md@borderrightwidth}{0pt}{md@borderrightcolor,\md@borderrightstyle},%
          borderline south={\md@borderbottomwidth}{0pt}{md@borderbottomcolor,\md@borderbottomstyle},%
          borderline west={\md@borderleftwidth}{0pt}{md@borderleftcolor,\md@borderleftstyle},%
          #1}%
      \fi
    \else
      % no tikz means no fancy border lines etc
      \edef\md@tcopts{%
           boxrule=\md@bordertopwidth,%
           colframe=md@bordertopcolor,%
           #1}%
    \fi
  }

  \newcommand\@begintcolorbox{\begin{mdtcolorbox}}

  \newenvironment{mdbxborderx}[7][]{%
    \md@tcsetopts[#1]{#2}{#3}{#4}{#5}{#6}{#7}%
    \expandafter\@begintcolorbox\expandafter{\md@tcopts}%
  }{\end{mdtcolorbox}}

  
  \newrobustcmd\mdxborderx[8][]{%
    \md@tcsetopts[#1]{#2}{#3}{#4}{#5}{#6}{#7}%
    \expandafter\mdtcbox\expandafter{\md@tcopts}{#8}%
  }


  % the mdbxbgcolor can be breakable
  \newenvironment{mdbxcolorbox}[2][]{%
    \mddefinecolor{backgroundcolor}{#2}%
    \begin{md@tcolorbox}{frame engine=empty,#1}\strut\ignorespaces%
  }{\end{md@tcolorbox}}

  
% Put in proxies to our plain implementation if tcolorbox is not loaded.
\else
  \newrobustcmd\md@warnborder[1]{%
    \ifblank{#1}{}{%
      \PackageWarning{madoko}{%
      Some CSS border features need the "tcolorbox" package. %
      Set the "Tex Use Tikz: True" key for better emulation (of breakable bordered or colored blocks, and rounded corners)}%
    }%
  }
  \newrobustcmd\mdbxborderx[7][]{%env
    \md@warnborder{#1#2}%
    \md@bborderx{mdbxborderx}{#3}{#4}{#5}{#6}{#7}%
  }
  \newrobustcmd\mdxborderx[8][]{%
    \md@warnborder{#1#2}%
    \mdborderx{#3}{#4}{#5}{#6}{#7}{#8}%
  }
  \newrobustcmd\mdbxcolorbox[2][]{%env
    \md@warnborder{#1}%
    \md@bcolorbox{mdbxcolorbox}{#2}%
  }
\fi

\newenvironment{mdbxborder}[3][]{%
  \begin{mdbxborderx}[#1]{#2}{#3}{#3}{#3}{#3}{}%
}{\end{mdbxborderx}}

\newenvironment{mdbxcborder}[4][]{%
  \begin{mdbxborderx}[#1]{#2}{#3}{#3}{#3}{#3}{#4}%
}{\end{mdbxborderx}}

\newrobustcmd\mdxborder[4][]{\mdxborderx[#1]{#2}{#3}{#3}{#3}{#3}{}{#4}}
\newrobustcmd\mdxcborder[5][]{\mdxborderx[#1]{#2}{#3}{#3}{#3}{#3}{#4}{#5}}


% ---------------------------------------------------
% Math snippets for static image generation
% ---------------------------------------------------

% re-define some symbols
\renewcommand{\notin}{\not\in}  %turns out the baseline for 'notin' is wrong

% boxes and lengths
\newsavebox{\@snippetBox}
\newlength{\@snippetWidth}
\newlength{\@snippetHeight}
\newlength{\@snippetDepth}

\newcounter{snippets}

\newcommand{\@savedepth}{%
  \setlength{\@snippetWidth}{\wd\@snippetBox}%
  \setlength{\@snippetHeight}{\ht\@snippetBox}%
  \setlength{\@snippetDepth}{\dp\@snippetBox}%
  \addtolength{\@snippetHeight}{\@snippetDepth}%
  \immediate\write\foo{\arabic{snippets},\@snippetName,\the\@snippetWidth,\the\@snippetHeight,\the\@snippetDepth}%
  \noindent\usebox\@snippetBox%
}

\newenvironment{mdDisplaySnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\edef\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}\vbox\bgroup}%
  {\egroup\end{lrbox}\@savedepth\newpage}

\newenvironment{mdInlineSnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\def\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}}%
  {\end{lrbox}\@savedepth\newpage}

\newenvironment{mdSnippets}%
    {\pagestyle{empty}%
     \abovedisplayskip=0pt%
     \belowdisplayskip=0pt%
     \abovedisplayshortskip=0pt%
     \belowdisplayshortskip=0pt%
     \newwrite\foo\immediate\openout\foo=\jobname.dim%
     \immediate\write\foo{\%ordinal,(hash)name,width,(total) height,depth,image width,image height,dpi,base64 encoding}%
    }%
    {\closeout\foo}
