%---------------------------------------------------------------------------
%  Copyright 2013 Microsoft Corporation.
% 
%  This is free software; you can redistribute it and/or modify it under the
%  terms of the Apache License, Version 2.0. A copy of the License can be
%  found in the file "license.txt" at the root of this distribution.
%---------------------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}[1995/12/01]

\RequirePackage{iftex}
\RequirePackage{etoolbox}
\RequirePackage{collectbox}
\RequirePackage[table]{xcolor}
\RequirePackage{graphicx}
\RequirePackage{xkeyval}

%-------------------------------------------------------------
% Conditionals
%-------------------------------------------------------------

\newif\ifmathmode
\newif\ifbeamer
\newif\ifmdusetikz\mdusetikzfalse
\newif\ifmdusefontspec\mdusefontspecfalse

\@ifclassloaded{beamer}{\beamertrue}{\beamerfalse}
\ifdef\mathmode{\mathmodetrue}{\mathmodefalse}

%-------------------------------------------------------------
% Process options 
%-------------------------------------------------------------
\newcommand{\mdHeadingBase}{1}
\DeclareOptionX{heading-base}[1]{\gdef\mdHeadingBase{#1}}
\DeclareOption{tikz}{\mdusetikztrue}
\DeclareOption{fontspec}{\mdusefontspectrue}
\DeclareOption{math}{\mathmodetrue}
\ProcessOptionsX\relax


%-------------------------------------------------------------
% Packages
%-------------------------------------------------------------

\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
\RequirePackage{stmaryrd}
\RequirePackage{textcomp}
\RequirePackage{pifont}

%\RequirePackage{pdfcomment}
\RequirePackage[bookmarks=true]{hyperref} % loaded by pdfcomment

% package only loaded outside snippets
\ifmathmode\else
  \RequirePackage{booktabs}
  \RequirePackage{tablefootnote}
  \RequirePackage{array}
  \RequirePackage{longtable}
  \RequirePackage{enumitem}
  
  % these last two packages about half the load time... 
  % but are only required for:
  % - breakable divs with borders or background colors
  % - rounded corners
  % - font-family with arbitrary font
  \ifmdusetikz
    \RequirePackage[breakable,skins]{tcolorbox}
  \fi
  \ifmdusefontspec
     % font selection
    \ifXeTeX\RequirePackage{fontspec}\else
    \ifLuaTeX\RequirePackage{fontspec}\else
    \RequirePackage[utf8]{inputenc}
    \providecommand{\fontspec}[2][]{}
    \fi\fi
  \fi
\fi


%-------------------------------------------------------------
% Setup packages 
%-------------------------------------------------------------

% hyperref
\hypersetup{
  colorlinks=true,linkcolor=Navy,urlcolor=Blue,filecolor=Maroon,bookmarksdepth=3,bookmarksopenlevel=1
}

% booktabs
\ifdefined\aboverulesep
\setlength{\aboverulesep}{0pt}
\setlength{\belowrulesep}{0pt}
\setlength{\doublerulesep}{\heavyrulewidth}
\fi



%-------------------------------------------------------------
% Util
%-------------------------------------------------------------
\providecommand\defcommand{\@ifstar\md@defcommand@S\md@defcommand@N}
\newcommand\md@defcommand@S[1]{\let#1\outer\renewcommand*#1}
\newcommand\md@defcommand@N[1]{\let#1\outer\renewcommand#1} 

\providecommand\provideenvironment{\@star@or@long\md@provide@environment}
\newcommand\md@provide@environment[1]{%
  \@ifundefined{#1}%
    {\def\reserved@a{\newenvironment{#1}}}%
    {\def\reserved@a{\renewenvironment{md@dummy@environ}}}%
  \reserved@a
}
\newcommand\md@dummy@environ{}

\newcommand\leavehmode{\ifhmode\par\fi}
\newlength{\px}\setlength{\px}{0.4pt}% assume 180 dpi


% ------------------------------------------------------------------------------
%  \eifstrequal    test string equality but first expands the first argument
%  \cseifstrequal  test string equality but first expands the first csname argument

\providecommand\eifstrequal{\expandafter\ifstrequal\expandafter}
\providecommand\cseifstrequal[1]{\protected@edef\md@strtmp{#1}\eifstrequal{\md@strtmp}}


%-------------------------------------------------------------
% Colors
%-------------------------------------------------------------

% Define a color name: either in terms a color name or as a HTML color (\#XXXXXX)
% 
% \mddefinecolor[<default>]{<colorname>}{<colorname|htmlcolor>}

\def\md@colorhtml#1\relax#2\relax{\definecolor{#2}{HTML}{#1}}
\def\md@colorlet#1\relax#2\relax{\colorlet{#2}{#1}}
\def\md@definecolorx{\@ifnextchar \#{\@firstoftwo{\md@colorhtml}}{\md@colorlet}}
\newcommand\mddefinecolor[3][black]{%
  \ifblank{#3}%
    {\colorlet{#2}{#1}}%
    {\expandafter\md@definecolorx #3\relax{#2}\relax}%
}

% Define basic CSS colors
\definecolor{Red}{HTML}{FF0000}
\definecolor{Lime}{HTML}{00FF00}
\definecolor{Blue}{HTML}{0000FF}

\definecolor{Yellow}{HTML}{FFFF00}
\definecolor{Cyan}{HTML}{00FFFF}
\definecolor{Magenta}{HTML}{FF00FF}

\definecolor{Navy}{HTML}{000080}
\definecolor{Maroon}{HTML}{800000}
\definecolor{Green}{HTML}{008000}

\definecolor{Teal}{HTML}{008080}
\definecolor{Purple}{HTML}{800080}
\definecolor{Olive}{HTML}{808000}

\definecolor{Black}{HTML}{000000}
\definecolor{Dimgray}{HTML}{696969}
\definecolor{Gray}{HTML}{808080}
\definecolor{Darkgray}{HTML}{A9A9A9}
\definecolor{Silver}{HTML}{C0C0C0}
\definecolor{Lightgray}{HTML}{D3D3D3}
\definecolor{Gainsboro}{HTML}{DCDCDC}
\definecolor{Floralwhite}{HTML}{FFFAF0}
\definecolor{Ivory}{HTML}{FFFFF0}
\definecolor{White}{HTML}{FFFFFF}

\definecolor{Orange}{HTML}{FFA500}
\definecolor{Aqua}{HTML}{00FFFF}
\definecolor{Fuchsia}{HTML}{FF00FF}


%-------------------------------------------------------------
% Character commands 
%-------------------------------------------------------------

\providecommand{\lt}{\ensuremath{<}}
\providecommand{\gt}{\ensuremath{>}}
\providecommand{\abs}[1]{\ensuremath{\left\vert #1\right\vert}}
\providecommand{\qedsymbol}{\ensuremath{\Box}}
\providecommand{\qed}{\hfill\qedsymbol}

% inserted for unknown html entities
\newcommand{\mdUnknownEntity}[1]{\&#1;}
\newcommand{\mdEntity}[1]{\protect\mdUnknownEntity{#1}}

% allow the definition of new entities: \mdDefineEntity{bar}{\|}
\newcommand{\mdDefineEntity}[2]{%
  \protected@edef\mdEntity##1{\protect\eifstrequal{##1}{#1}{#2}{\mdEntity{##1}}}%
}

% inserted for unknown unicode entities
\newcommand{\mdUnicodeUnknown}[1]{%
  \ifXeTeX\mdUnicodeChar{#1}\else%
  \ifLuaTeX\mdUnicodeChar{#1}\else%
  \&\##1;\fi\fi
}
\newcommand{\mdUnicodeChar}[1]{\char#1} % directly insert the unicode glyph
\newcommand{\mdUnicode}[1]{\protect\mdUnicodeUnknown{#1}}

% allow the definition of new unicode entities: \mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\newcommand{\mdDefineUnicode}[2]{%
  \protected@edef\mdUnicode##1{\protect\ifnum##1=#1{#2}\protect\else{\mdUnicode{##1}}\protect\fi}%
}

% ballot boxes
\mdDefineUnicode{9745}{\rlap{$\square$}\protect\raisebox{.15ex}{\kern 0.1em\ding{51}}}
\mdDefineUnicode{9746}{\rlap{$\square$}{\kern 0.1em\ding{55}}}
% magnifying glass
\mdDefineUnicode{128270}{\kern -0.75ex\protect\raisebox{-0.25ex}{$\arrownot$}\kern 1.05ex\protect\raisebox{0.5ex}{$\circ$}\hspace{-0.25ex}}
% short underscore
\mdDefineUnicode{818}{\leavevmode\kern 0.06em\vbox{\hrule width 0.3em}}


% break and nbsp
\newcommand{\mdBr}{\ifvmode\leavevmode\fi\\{}}
\newcommand{\mdNbsp}{\nobreak\rule{0pt}{0pt}~}

\newcommand{\mdBrSep}[2]{%
  \expandafter\ifx#1\relax\relax #2\else
  \expandafter\ifx#2\relax\relax #1\else
  #1\mdBr #2\fi\fi
}

% fix nobreakspace in case the user loads a T1 encoding in LaTeX
\DeclareTextCommandDefault{\nobreakspace}{\leavevmode\nobreak\ }

% ---------------------------------------------------
% Labels and references
% ---------------------------------------------------

% We need to call \mdLabeltarget for any structure that can set label
\newcounter{@mdTargetCount}
\newcommand{\mdLabeltarget}{\refstepcounter{@mdTargetCount}}

% ---------------------------------------------------
% Line info
% ---------------------------------------------------
\newcommand*\mdkline[1]{} %ignore

% ---------------------------------------------------
% Dimensions as strings
% ---------------------------------------------------

% expressions for various css units
\newcommand\dimpx[1]{\the\dimexpr #1\px\relax}
\newcommand\dimrem[1]{\the\dimexpr #1\dim@rem\relax}
\newcommand\dimch[1]{\the\dimexpr #1\dim@ch\relax}
\newcommand\dimvh[1]{\the\dimexpr #1\textheight\relax}
\newcommand\dimvw[1]{\the\dimexpr #1\textwidth\relax}
\newcommand\dimvmin[1]{\the\dimexpr #1\dimmin\textwidth\textheight\relax}
\newcommand\dimvmax[1]{\the\dimexpr #1\dimmax\textwidth\textheight\relax}

\newlength\dim@rem
\newlength\dim@ch
\AtBeginDocument{\setlength\dim@rem{1em}\settowidth\dim@ch{0}}

% expressions for widht/height percentages
\newcommand\md@height{\the\textheight}
\newcommand\dimheight[1]{\the\dimexpr\md@height * #1\relax}
\newcommand\dimwidth[1]{\the\dimexpr #1\linewidth \relax}


% dimdefault{arg}{default}  use default if arg is empty
\newcommand\dimdefault[2]{\ifblank{#1}{#2}{#1}}

% dimMin,dimMax return minimum or maximum dimension
\newcommand\dimmin[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim\dimexpr #1\relax>\dimexpr #2\relax #2\else #1\fi}}%
}
\newcommand\dimmax[2]{%
  \ifblank{#2}{#1}{\ifblank{#1}{#2}{\ifdim\dimexpr #1\relax>\dimexpr #2\relax #1\else #2\fi}}%
}

% ifzero, ifbothzero  test for a blank string or 0 dimension
\newcommand\ifzero[1]{%
  \let\md@choose\@firstoftwo
  \ifblank{#1}{}{\ifdim\dimexpr #1\relax=0pt\else\let\md@choose\@secondoftwo\fi}%
  \md@choose}

\newcommand\ifbothzero[2]{%
  \let\md@choosex\@secondoftwo
  \ifzero{#1}{\ifzero{#2}{\let\md@choosex\@firstoftwo}{}}{}%
  \md@choosex}

% ---------------------------------------------------
% Margins
% ---------------------------------------------------

% calculate the auto margin based on the (border-box) width of the block and the width of 
% the other margin; use an empty other margin width if the other margin is also auto
%  
% \dimauto{<width>}{<other-margin>}
\newcommand\dimauto[2]{%
  \ifblank{#2}{\the\dimexpr(\linewidth-#1)/2\relax}{\the\dimexpr\linewidth-#1-#2\relax}%
}

\newenvironment{md@marginlr}[2]{%
  \ifbothzero{#1}{#2}{}{%
    %\typeout{marginlr: #1 #2}%
    \topsep\z@
    \partopsep\z@
    \trivlist
    \rightmargin=\dimexpr\dimdefault{#2}{\z@}\relax
    \leftmargin=\dimexpr\dimdefault{#1}{\z@}\relax
    %\typeout{margins: \the\leftmargin, \the\rightmargin}
    %\parskip\parsep
    %\parindent\listparindent
    \advance\linewidth -\rightmargin
    \advance\linewidth -\leftmargin
    \advance\@totalleftmargin \leftmargin
    \parshape \@ne \@totalleftmargin \linewidth
    \item[]%
  }%
}%
{\endtrivlist}

\newcommand\md@margintop[1]{\ifzero{#1}{}{\leavevmode\addvspace{\the\dimexpr#1\relax}}}
\newcommand\md@marginbottom[1]{\ifzero{#1}{}{\leavehmode\addvspace{1em}}}

\newenvironment{mdxmargin}[1]{\begin{mdxmarginx}{#1}{#1}{#1}{#1}}{\end{mdxmarginx}}
\newenvironment{mdxmarginx}[4]{%
  \edef\dim@marginbottom{#4}%  
  \md@margintop{#1}%
  \md@marginlr{#2}{#3}%  
}{
  \expandafter\md@marginbottom\expandafter{\dim@marginbottom}%
}

\newcommand\md@paddingtop[1]{\ifzero{#1}{}{\leavevmode\vspace{\the\dimexpr#1\relax}}}
\newcommand\md@paddingbottom[1]{\ifzero{#1}{}{\leavehmode\vspace{\the\dimexpr#1\relax}}}

\newenvironment{mdxpadding}[1]{\begin{mdxpaddingx}{#1}{#1}{#1}{#1}}{\end{mdxpaddingx}}
\newenvironment{mdxpaddingx}[4]{%
  \edef\dim@paddingbottom{#4}%
  \md@paddingtop{#1}%
  \md@marginlr{#2}{#3}%
}{%
  \expandafter\md@paddingbottom\expandafter{\dim@paddingbottom}%
}

\newrobustcmd\mdmargintb[3]{%
   \setbox0=\hbox{#3}%
   \ifblank{#1}{}{\rule{0pt}{\the\dimexpr \ht0 + #1\relax}}%
   \ifblank{#2}{}{\rule[\the\dimexpr -\dp0 - #2\relax]{0pt}{0pt}}%
   \usebox0\relax%
}

% ---------------------------------------------------
% Height
% ---------------------------------------------------

\newenvironment{mdxheight}[1]{%
  \edef\md@height{\the\dimexpr #1\relax}%
  \noindent\begin{mdminipage}{t}{\md@height}{t}{\linewidth}%
}{\end{mdminipage}\leavehmode}




%-------------------------------------------------------------
% Save footnotes inside minipage environments
%-------------------------------------------------------------
\newif\if@savefootnotes
\newcommand{\md@savefootnotes}%
  {\if@savefootnotes\else%
    \let\footnote\tablefootnote%
   \fi%
   \@savefootnotestrue}%
\newcommand{\md@restorefootnotes}%   
  {\if@savefootnotes\else%
    \tfn@tablefootnoteprintout% 
    \gdef\tfn@fnt{0}%
   \fi}% 

\newenvironment{mdminipage}[4]{%
  \edef\md@parindent{\the\parindent}%
  \edef\md@parskip{\the\parskip}%
  %\let\md@listdepth{\the\@listdepth}%
  %\let\md@mplistdepth{\the\@mplistdepth}%
  \begin{minipage}[#1][#2][#3]{#4}%
    \parindent=\dimexpr\md@parindent\relax
    \parskip=\glueexpr\md@parskip\relax
    \noindent
    %\@listdepth=\md@listdepth%
    %\@mplistdepth=\md@mplistdepth%
}{\end{minipage}}


%-------------------------------------------------------------
% Borders & Backgrounds
%
% This is a big part because we need to emulate lots of CSS
% borders styles in LaTeX. For rounded corners, and breakable
% blocks we rely on the "tcolorbox" package
%-------------------------------------------------------------

% ------------------------------------------------------------------------------
% Set the background color of a block (using colorbox)
%
% \begin{mdxbgcolor}{<color>}

\newcommand\md@xbgcolor[2]{%
  \begingroup
  \noindent
  \fboxsep\z@%
  \mddefinecolor{md@bgcolor}{#2}%
  \collectboxcheckenv{#1}%
  \collectbox@{\begin{minipage}[t]{\linewidth}}%
              {\strut\colorbox{md@bgcolor}{\BOXCONTENT}\md@adjustmargin\endgroup}%
              {\end{minipage}}%
}


% adjust the bottom margin after a minipage
\newcommand\md@adjustmargin[1][0pt]{%
  \ifhmode \par\fi
  \ifdim\dimexpr\baselineskip-1em-#1\relax>0pt%
    \addvspace{\dimexpr\baselineskip-1em-#1\relax}\fi
}

\newcommand\mdxbgcolor[1]{\md@xbgcolor{mdxbgcolor}{#1}}


% ------------------------------------------------------------------------------
% Define our own fancy fbox called md@borderbox
%
% It uses the command \md@border<side> to draw each border side.

% store dimension of the content and border box for rule drawing
\newlength\md@borderboxwidth
\newlength\md@borderboxheight
\newlength\md@contentboxwidth
\newlength\md@contentboxdepth
\newlength\md@contentboxheight

\newcommand\md@borderbox[1]{%
  \leavevmode
  \setbox\@tempboxa\hbox{\color@begingroup #1\color@endgroup}%
  \@tempdima=\md@borderbottomwidth
  \advance\@tempdima\dp\@tempboxa
  % define content dimensions since \@tempboxa is not available after being used
  \md@contentboxwidth=\wd\@tempboxa
  \md@contentboxdepth=\dp\@tempboxa
  \md@contentboxheight=\dimexpr\ht\@tempboxa + \dp\@tempboxa\relax
  % border box
  \md@borderboxwidth=\dimexpr\wd\@tempboxa + \md@borderleftwidth + \md@borderrightwidth\relax 
  \md@borderboxheight=\dimexpr\md@contentboxheight + \md@bordertopwidth + \md@borderbottomwidth\relax
  % create the frame
  \hbox{%
    \lower\@tempdima\hbox{%
      \vbox{%
        \offinterlineskip
        \md@bordertop%
        \hbox{%
          \md@borderleft
          \vbox{%
            \box\@tempboxa}%
          \md@borderright
        }%
        \md@borderbottom}%
      }%
  }%
}

% ------------------------------------------------------------------------------
% Define standard border styles
%
% a style has the form \md@border<style>{<side>}{<direction>}{<borderwidth>}
% where <side> is the border side
%       <direction> is either "h" or "v" (horizontal or vertical)
%       <borderwidth> the width of the rule
%
% predefined styles: none, solid, transparent, dashed, and dotted.

\newcommand*\md@bordernone[3]{}
\newcommand*\md@bordersolid[3]{\ifx#2h\relax \hrule\@height #3\else\vrule\@width #3\fi}
\newcommand*\md@bordertransparent[3]{\ifx#2h\relax \rule{0pt}{#3}\else\rule{#3}{0pt}\fi}

\newlength\md@dashlen
\newcommand*\md@borderdashed@[2]{%
  \md@dashlen=\dimexpr\dimMax{\md@bordertopwidth}{\dimMax{\md@borderbottomwidth}{\dimMax{\md@borderrightwidth}{\dimMax{\md@borderleftwidth}{2.5pt}}}}\relax
  \ifx#2h%
    \hbox to \md@borderboxwidth{\xleaders \hbox{\md@hdash\hskip 0.5\md@dashlen\relax}\hfill\hbox{\md@hdash}}%
  \else 
    \lower\md@contentboxdepth\vbox to \md@contentboxheight{\cleaders \vbox{\vskip0.25\md@dashlen\md@vdash\vskip0.25\md@dashlen}\vfill}%
  \fi
}

\newcommand*\md@borderdashed[3]{%
  \def\md@hdash{\vrule width \md@dashlen height #3 depth 0pt}%
  \def\md@vdash{\hrule width #3 height \md@dashlen depth 0pt}%
  \md@borderdashed@{#1}{#2}%
}
\newcommand*\md@borderdotted[3]{%
  \def\md@hdash{\vrule width #3 height #3 depth 0pt\relax}%
  \def\md@vdash{\hrule width #3 height #3 depth 0pt\relax}%
  \md@borderdashed@{#1}{#2}%
}  

% ------------------------------------------------------------------------------
% Define a border from a <border spec>. A border specification has the form:
%
% <dimension>,<color>,<style>,...
%
% where every component is optional. 
% For example: "1pt,blue", ",,solid", "2em", ",\#CDCDCD,dashed".
%
% The command:
%    \md@defineborder{<side>}{<direction>}{<borderspec>}
%
% takes border specification (\md@defineborder{top}{h}{1pt,blue,dotted}) and generates definitions:
%  md@border<side>width    (a width as a string)
%  md@border<side>color    (a color name)
%  md@border<side>style    (the style as a string)
%  md@border<side>         (the command that draws this border (in \md@borderbox))

\def\md@defineborderx#1#2#3,#4,#5,#6\relax{%
  \csedef{md@border#1width}{\ifblank{#3}{0pt}{#3}}%
    \mddefinecolor{md@border#1color}{#4}%
  \ifdim\dimexpr\csuse{md@border#1width}\relax=0pt%
    \csdef{md@border#1style}{none}\else
    \csedef{md@border#1style}{\ifblank{#5}{solid}{#5}}\fi
  \ifstrequal{#4}{transparent}{% if the color is transparent, we use the transparent style
    \csdef{md@border#1style}{transparent}
    \mddefinecolor{md@border#1color}{white}}{}% redefine to an existing color
  \cseifstrequal{md@border#1style}{none}{%
    \csdef{md@border#1width}{0pt}}{}% ensure width = 0 for none style
  \edef\md@drawborder{md@border\csname md@border#1style\endcsname}%
  \ifcsdef{\md@drawborder}{}{%
    \PackageWarning{madoko}{The border style "#5" is not supported; defaulting to "solid".}%
    \edef\md@drawborder{md@bordersolid}%
  }%
  %\typeout{border: #1: \csuse{md@border#1width}, \csuse{md@border#1style}}%
  \csletcs{md@draw#1border}\md@drawborder%  
  \csdef{md@border#1}{%
    \color{md@border#1color}%
    \csuse{md@draw#1border}{#1}{#2}{\csuse{md@border#1width}}%
  }%
}
\newcommand*\md@defineborder[3]{%
  \md@defineborderx{#1}{#2}#3,,,\relax
}

% ------------------------------------------------------------------------------
%  Main css border command for blocks
%
% \mdxborderx{<top>}{<right>}{<bottom>}{<left>}
% \mdxborder{<borderspec>}

\newcommand\md@xborderx[5]{%
  \begingroup
  \noindent
  \md@defineborder{top}{h}{#2}%
  \md@defineborder{right}{v}{#3}%
  \md@defineborder{bottom}{h}{#4}%
  \md@defineborder{left}{v}{#5}%
  \collectboxcheckenv{#1}%
  \collectbox@{\begin{mdminipage}{}{}{t}{\dimexpr\linewidth-\md@borderleftwidth-\md@borderrightwidth\relax}}%
              {\noindent\strut\md@borderbox{\color{black}\BOXCONTENT}\md@adjustmargin[\md@borderbottomwidth]\endgroup}%
              {\end{mdminipage}}%
}


\newcommand\mdxborderx[5][]{\md@xborderx{mdxborderx}{#2}{#3}{#4}{#5}}
\newcommand\mdxborder[2][]{\md@xborderx{mdxborder}{#2}{#2}{#2}{#2}}


% ------------------------------------------------------------------------------
% If we load tcolorbox, we can support rounded corners and breakable content
% these environments have an extra x:
%
%   mdxxborder[<opts>]{<borderspec>}{<cornerradius>}
%   mdxxborderx[<opts>]{<top?>}{<left>}{<bottom>}{<right>}{<cornerradius>}
%   mdxxbgcolor[<opts>]{<color>}  (breakable background-color)
%
% in the <opts> we can specify things like:
%   [breakable]
%   [sharp corners=north]
%
\ifdefined\tcolorbox
  \newenvironment{md@tcolorbox}[1]{%
  \begin{tcolorbox}[%
    enhanced,%
    before=\noindent,after={},%
    boxsep=0pt,left=0pt,right=0pt,top=0pt,bottom=0pt,%
    arc=0pt,boxrule=0pt,colback=white,colframe=white,%
    #1]\ignorespaces%
  }{\end{tcolorbox}}

  \newenvironment{mdxxborder}[3][]{%
    \begin{mdxxborderx}[#1]{#2}{#2}{#2}{#2}{#3}%
  }{\end{mdxxborderx}}

  \newenvironment{mdxxborderx}[6][]{%
    % reuse defineborder from the plain boxes
    \md@defineborder{top}{h}{#2}%
    \md@defineborder{right}{v}{#3}%
    \md@defineborder{bottom}{h}{#4}%
    \md@defineborder{left}{v}{#5}%
    \def\md@borderradius{\ifblank{#6}{0pt}{#6}}%
    % if we have rounded corners, we can only have one line style, we pick the top style
    \ifdim\dimexpr\md@borderradius\relax>0pt\relax
      \begin{md@tcolorbox}{%
         arc=\md@borderradius,rounded corners=all,
         boxrule=\md@bordertopwidth,%
         borderline={\md@bordertopwidth}{0pt}{md@bordertopcolor,\md@bordertopstyle},%
         #1}%
    % otherwise specify each style separately
    \else
      \begin{md@tcolorbox}{%
        toprule=\md@bordertopwidth,rightrule=\md@borderrightwidth,bottomrule=\md@borderbottomwidth,leftrule=\md@borderleftwidth,%
        borderline north={\md@bordertopwidth}{0pt}{md@bordertopcolor,\md@bordertopstyle},%
        borderline east={\md@borderrightwidth}{0pt}{md@borderrightcolor,\md@borderrightstyle},%
        borderline south={\md@borderbottomwidth}{0pt}{md@borderbottomcolor,\md@borderbottomstyle},%
        borderline west={\md@borderleftwidth}{0pt}{md@borderleftcolor,\md@borderleftstyle},%
        #1}%
    \fi
  }{\end{md@tcolorbox}}

  % the mdxxbgcolor can be breakable
  \newenvironment{mdxxbgcolor}[2][]{%
    \mddefinecolor{md@bgcolor}{#2}%
    \begin{md@tcolorbox}{frame engine=empty,colback=md@bgcolor,#1}\strut\ignorespaces%
  }{\end{md@tcolorbox}}

% Put in proxies to our plain implementation if tcolorbox is not loaded.
\else
  \newcommand\md@warnborder[1]{%
    \ifblank{#1}{}{%
      \PackageWarning{madoko}{%
      Some CSS border features need the "tcolorbox" package. %
      Set the "Tex Use Tikz: True" key for better emulation (of breakable bordered or colored blocks, and rounded corners)}%
    }%
  }
  \newcommand\mdxxborderx[6][]{%
    \md@warnborder{#1}%
    \md@xborderx{mdxxborderx}{#2}{#3}{#4}{#5}%
  }
  \newcommand\mdxxborder[3][]{%
    \md@warnborder{#1}%
    \md@xborderx{mdxxborder}{#2}{#2}{#2}{#2}%
  }
  \newcommand\mdxxbgcolor[2][]{%
    \md@warnborder{#1}%
    \md@xbgcolor{mdxxbgcolor}{#2}%
  }
\fi


% ---------------------------------------------------
% Math snippets for static image generation
% ---------------------------------------------------

% re-define some symbols
\renewcommand{\notin}{\not\in}  %turns out the baseline for 'notin' is wrong

% boxes and lengths
\newsavebox{\@snippetBox}
\newlength{\@snippetWidth}
\newlength{\@snippetHeight}
\newlength{\@snippetDepth}

\newcounter{snippets}

\newcommand{\@savedepth}{%
  \setlength{\@snippetWidth}{\wd\@snippetBox}%
  \setlength{\@snippetHeight}{\ht\@snippetBox}%
  \setlength{\@snippetDepth}{\dp\@snippetBox}%
  \addtolength{\@snippetHeight}{\@snippetDepth}%
  \immediate\write\foo{\arabic{snippets},\@snippetName,\the\@snippetWidth,\the\@snippetHeight,\the\@snippetDepth}%
  \noindent\usebox\@snippetBox%
}

\newenvironment{mdDisplaySnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\edef\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}\vbox\bgroup}%
  {\egroup\end{lrbox}\@savedepth\newpage}

\newenvironment{mdInlineSnippet}[1][\arabic{snippets}]%
  {\stepcounter{snippets}\def\@snippetName{#1}%
   \begin{lrbox}{\@snippetBox}}%
  {\end{lrbox}\@savedepth\newpage}

\newenvironment{mdSnippets}%
    {\pagestyle{empty}%
     \abovedisplayskip=0pt%
     \belowdisplayskip=0pt%
     \abovedisplayshortskip=0pt%
     \belowdisplayshortskip=0pt%
     \newwrite\foo\immediate\openout\foo=\jobname.dim%
     \immediate\write\foo{\%ordinal,(hash)name,width,(total) height,depth,image width,image height,dpi,base64 encoding}%
    }%
    {\closeout\foo}
