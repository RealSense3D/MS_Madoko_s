Title		: Madoko overview
Author		: Daan Leijen
Affiliation	: Microsoft Research
Email		: daan@microsoft.com
Heading Base: 2
MathJax		: True
Script		: https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=scm&lang=latex

.SampleBlock : padding-left=1em padding-right=1em border-style=solid border-width=1px padding-top=-1ex
.SampleOutput: margin-bottom=1.7ex
~Sample		 : margin-bottom=2ex 
				replace="~~~SampleBlock#nl````` {.SampleSource}#nl#source#nl`````#nl* * *{ width=50% text-align=left }#nl~~~~SampleOutput#nl#source#nl~~~~#nl~~~#nl"


# Overview of Madoko

Madoko is a fast javascript [Markdown] processor written in [Koka]
It started out as a demo program for the new [Koka] language and
the name comes from "_Ma_\/rk\/_do_\/wn in _Ko_\/ka".

Madoko is a javascript program that runs on [Node.js]. It is about 30% faster
then [Marked] \(one of the fastest Javascript markdown implementations), and
about 8 times faster than [Showdown] and [Markdown.js]. Madoko is also
available as a .NET executable on windows.

[Koka]: 		http://koka.codeplex.com
[Markdown]: 	http://daringfireball.net/projects/markdown/syntax
[Markdown.js]: 	https://github.com/evilstreak/markdown-js
[Showdown]: 	https://github.com/coreyti/showdown
[Marked]: 		https://github.com/chjj/marked
[MathJax]:		http://www.mathjax.org
[Node.js]:		http://nodejs.org	
[NodeJs]: 		http://nodejs.org	

[PanDoc]:			http://johnmacfarlane.net/pandoc
[MultiMarkdown]:	http://fletcherpenney.net/multimarkdown
[Maruku]:			http://maruku.rubyforge.org/maruku.html

## Madoko philosophy

Even though Madoko is fast, the main design goal is not efficiency: I wanted to
extend Markdown to make it suitable to create high-quality documents for the
web and print, while maintaining John Gruber's Markdown philosophy of
simplicity and focus on plain text readability.

The popularity of Markdown is not accidental, and it is great for writing
prose: it is super simple and straightforward to create good looking HTML
documents. But for more serious use Markdown falls short in several areas and
many extended implementations have arisen in the recent years. Madoko
addresses many of the weaknesses of Markdown. In particular, it helps you
with those things that a computer can well do for you: like numbering, document
references, generating table of contents, footnotes, bibliographies, and
document styling.

Besides HTML output, Madoko can also generate high-quality PDF files through
LaTeX. Even though more Markdown implementations support this, there has been

a lot of effort in Madoko to make the LaTeX generation very good and
customizable. This makes it possible to write high-quality articles
using just Madoko and get both a high-quality print format (PDF) and a good
looking HTML page.  Look at this academic article for an example[^fn-slow-load]:

~ Center
| :~~~~~~~~~~~~~~~~~~~~~~~~:     | :~~~~~~~~~~~~~~~:                | :~~~~~~~~~~~~~:              |
| LaTeX/PDF                      | HTML                             | Madoko source                |
| [![doc-pdf]][koka-article-pdf] | [![doc-html]][koka-article-html] | [![doc-md]][koka-article-md] |
|                                |                                  |                              |
~

[^fn-slow-load]:   
	Note that the example article loads somewhat slowly in the browser. This is
	because it is a long article that uses _a lot_ of math which takes a while to
	render in [MathJax].

[doc-pdf]: 		koka-doc-pdf.png 	{width=300px vertical-align=top } 
[doc-html]: 	koka-doc-html.png 	{width=300px vertical-align=top }
[doc-md]: 		koka-doc-md.png 	{width=300px vertical-align=top }

[koka-article-pdf]: 	http://research.microsoft.com/pubs/200436/koka-effects-2013.pdf
[koka-article-html]: 	http://research.microsoft.com/en-us/um/people/daan/doc/koka-effects-2013.html
[koka-article-md]: 		http://research.microsoft.com/en-us/um/people/daan/doc/koka-effects-2013.md.txt

# Usage

The easiest way to use Madoko is as a command line tool using Node.js (which
works on many platforms, like Windows, MacOSX, Linux etc). Madoko can also run
inside a web browser or as a .NET executable. To install under Node.js is very
easy:

* Ensure you have [Node.js] installed on your system.
* Open a command line window and run: `npm install madoko -g`

and you are done. Translating a markdown document is done simply as:

* `madoko -v mydoc.md`  

which generates `mydoc.html`. The `-v` flag gives more verbose output.

# Syntax

Madoko 
======

is fully compatible with basic [Markdown syntax][Markdown] and passes
the entire test suite. It also implements most extensions, like Github
flavored markdown and multi-markdown, and it adds quite a few features itself
to make it really useful for writing professional documents.

We assume that the reader is familiar with basic markdown syntax. 

[Markdown Extra]: 	http://michelf.ca/projects/php-markdown/extra
[MultiMarkdown]:    http://fletcherpenney.net/multimarkdown
[GitHubFM]:			https://help.github.com/articles/github-flavored-markdown

## Inline elements

### Sub- and super-script

Using tilde (`~`) and hat (`^`), you can format inline text as sub- and super-script respectively.
Inside script, no white space is allowed to prevent mistakes. If you need white space you
can still use an escaped space (`\ `).

~ Sample
Here is how you write H~2~O or E=MC^2^.
Please use escapes for~longer\ script~.
~

### Escape sequences		{ #sec-escapes }

Madoko adds some extra escape sequences to the standard ones in Markdown. If
you want to use a special character directly without a special Markdown
meaning,  precede it with a backslash (`\`). For example, to use a star (`*`)
without causing emphasis, you can write `\*`. The full list of special 
escape characters are:

	\`*{}[]()#+-.!_>~|$'"?/

If you escape a space (` `), it is translated as a non-breakable space, while
a backslash at the end of a line causes a hard line break to be inserted. The 
latter is recommended over using the standard Markdown way of using two spaces
at the end of a line because it leaves visual clue that a line break occurs.

~ Sample
Here is a\ non\ breakable\ space and a hard\
line break with a \* star.
~

Finally, the escape sequence `\/` translates to nothing; this can be very 
useful to separate certain constructs. For example, emphasis is suppressed
if the underscores appear inside a word, as in my_example_here. Using the
empty escape sequence we can emphasize inside words too: when writing
`my\/_example_\/here`, we get my\/_example_\/here.


## Footnotes

Footnotes are written as regular link definitions prefixed with a hat (`^`)
character. This is the syntax [originally proposed][fnsyntax] by John Gruber.

~ Sample
Here is a footnote[^fn].

[^fn]: This is the content of the example footnote. 
	You can continue a footnote by indenting content.
	And notice the backlink.
~

[fnsyntax]: http://daringfireball.net/2005/07/footnotes


## Table of contents  { #sec-toc }

Generating a table of contents is easy, just include the special element
`[TOC]` anywhere in your document and it will expand to a table of contents.
You an use the meta data value `Toc Depth` to set how many levels deep the
table of contents goes (by default 3).

You can also a create a list of figures, by using `[TOC=tof]`. This will list
all the `~Figure` block elements.

### Custom tables of contents

Custom tables of contents can be generated using the `toc` attribute.  The
`toc-depth` attribute specifies the depth of the element (by default 1), while
the `toc-line` specifies the contents of the line displayed in the table of
contents. For example, using [metadata rules][#sec-rules] we can generate a
table of contents for equations:

	~Equation: toc=equations toc-line="#caption"

Here we assume that the user adds a `caption` attribute when denoting
equations (which will get expanded inside the `toc-line`). We can then render
the table of equations anywhere in the document as:

	[TOC=equations]

## Bibliography		{ #sec-bib }

One of Madoko's main design goals is to enable the creation of high-quality
scientific articles. As such, Madoko integrates closely with the standard 
[BibTeX] tool to generate bibliographies and references inside a document.

In particular, you can simply use any existing BibTeX bibliography file
(`.bib`) and just include a references as semi-colon (or comma) separated 
local links, for example 

	Please read more about LaTeX and TeX [#Lamport:Latex; #Knuth:Tex]. 

Note that unlike LaTeX there is no need to explicitly insert an unbreakable
space between the text and the citation, Madoko automatically takes care of this
(as described in Section [#sec-ids-labels]).
If necessary, you can also include extra text for each entry:

	Please read more about LaTeX and TeX [#Lamport:Latex, Chapter 4; #Knuth:Tex, page 5]. 

When running Madoko the first time, we get a warning that these references
are not yet defined:

	warning: missing anchor or citation: #Lamport:Latex
	warning: missing anchor or citation: #Knuth:Tex

When Madoko finds such references, it writes them to a `.aux` file that can be read by 
BibTeX, and we can just run it on our document:
	
	> bibtex myfile.aux

to generate the bibliography entries. The bibliography entries are
included in your document using the special `[BIB]` element, for example:

	## References	{-}
	[BIB]

When running Madoko again, the bibliography entries are now known and no
warnings will be issued.

Madoko uses a very simple LaTeX parser to format the bibliography entries in
Markdown. It can handle things like special characters and accents quite well
and recognizes many formatting commands. Even though it is sufficient for
bibliography entries in general, the Madoko LaTeX parser may not work for more
fancy LaTeX commands in bibliography entries.


[bibtex]: http://en.wikipedia.org/wiki/BibTeX

### Bibliography styles  { #sec-bibstyle }

You can specify which bibliography files are to be used using 
[meta data](#sec-metadata) entries:

	Bib:  ../mybib1
	Bib:  mybib2

The bibliograpy style is determined using the `Bib Style` key
and can be any [BibTeX style](http://web.reed.edu/cis/help/latex/bibtexstyles.html)
(by default `plain`):

	Bib Style: plainnat

### Citation styles   { #sec-cite }

The citation style is usually automatically determined from the 
bibliography style. However, it can be set explicitly using the `Cite Style`
key:

	Cite Style: natural

Valid citation styles are _natural_, _square_, _numeric_, and _auto_ (default).
The natural and square styles use author-date style citations, while the numeric
style uses numbers. 

* _natural_: (Lamport, 1994; Knuth, 1984)
* _square_:  [Lamport, 1994; Knuth, 1984]
* _numeric_: [1,2]

Note that full author-date style citations only work with BibTeX styles that
support this, i.e. generally any style that works with the `natbib` package like `plainnat`.
Finally, with author-date citations we can use the `.short` class attribute to 
only cite the year which is used when the author is already mentioned in the text:

	As described by Lamport [#Lamport:Latex]{.short}

This attribute has no effect if the _numeric_ style is used.

## Mathematics

## Metadata  		{ #sec-metadata }

Similar to [multimarkdown], a document can begin with a special metadata
section that contains meta information like the document title, the author,
etc. Moreover, this section can contain attribute rules to globally apply
attributes to certain elements, much like CSS rules.

Metadata must come immediately as the first thing in a document, and consists
of keys followed by a colon and then the key value. A key value can span 
multiple lines by indenting, and you can leave blank lines between different keys.

	Title       : An overview of Madoko
	Author      : Daan Leijen
	Affiliation : Microsoft Research
	Email       : daan@microsoft.com
	Heading Base: 2
	MathJax     : True

### Special metadata keys

Any metadata key and value can be given (and referred to using 
[hash names][#sec-hashname]),  but certain keys have special meaning to Madoko.

*Title*: The title of the document. For example, in HTML output it
determines the `<title>` element. It is also used by the special `[TITLE]`
element (Section [#sec-special]).

*Subtitle*: An optional subtitle.

*Author*, *Affiliation*, *Email*: the author name, affiliation, and
email. There can be  multiple authors. The author info is also used by the
`[TITLE]` element to generate a proper document title header.

*Toc depth* (=3): The maximum depth of headings that are included in the
table of contents (Section [#sec-toc]).

*Heading depth* (=3): The maximum depth of headings that are numbered (Section [#numbering]).
Set it to zero to suppress numbering of headings completely.

*Heading base* (=1): Usually, a top heading (`# heading`) maps to a `<h1>` or
`\chapter` element in HTML and LaTeX respectively. By increasing the `Heading Base` you
can change this mapping. For example, by using:

	Heading Base: 2

the top headings will map to `<h2>` or `\section` elements instead.

*Bib* or *Bibliography*: Specify a bibliography (`.bib`) file to be used by
the BibTeX tool to generate a list of references (see Section [#sec-bib]).

	Bib: ../mybibliography.bib

*Bib Style* or *Biblio Style* (=plain): Specify a BibTeX style that is used to format the list of 
references. See Section [#sec-bibstyle] for more information.

	Bib Style: plainnat

*Cite Style* (=auto): Specify the citation style used for citations,
_natural_, _numeric_, _square_, or _auto_. See Section [#sec-cite] for more 
information.


### HTML keys

Some keys are only interpreted for HTML output:

*Css*: Specify a CSS file that needs to be included in HTML output. There can
be many CSS keys present.

	Css: lib/main.css
	Css: http://foo.com/bar.css

*Script*: Specify a Javascript file that needs to be included in the HTML output
via a `<script>` tag. There can be many script keys present.

	Script: lib/main.js

*MathJax* (=false): Set this key to true to include the right script
tags to enable rendering of LaTeX mathematics in the browser. 

	MathJax: True	

*HTML Header*: The value of this key is included literally in the 
`<head>` section of the HTML document.


### LaTeX keys

For LaTeX output, the following keys are relevant:

*Document Class* (=book): Specify the LaTeX document class. Can be 
prefixed with its options using square brackets:

	Document Class: [9pt]article

*Package*: Specify a LaTeX package that needs to be included via `\usepackage`.
The package name can be prefixed with its options using square brackets.

	Package: amsmath
	Package: [colorlinks=true,linkcolor=DarkBlue]hyperref


### Hash names		{ #sec-hashname }

An extension of Madoko is the use of _hash names_. If Madoko finds a name
prefixed by a hash (#) character, it looks up the name. If there is a block
element with that _id_, the hash name is replaced by the _label_ value of that block
(see Section [#sec-ids-labels]). If there is no block with that identity, 
Madoko looks if there is a metadata value with that name, and replaces the
hash name with its value: 
~ Sample
The title of this document is "#title".
~

### Rules			{ #sec-rules }



## Attributes 		{ #sec-attr }

An essential addition of Madoko is good support for attributes. The syntax is
similar to attribute definitions in [Maruku], [Pandoc], and [MultiMarkdown],
and denoted between curly braces:

	{ .class #id key=value }

For most block elements, like lists, paragraphs, block quotes, etc, you can 
write attributes on the line directly following the block. 

~ Sample
This is a paragraph in small-caps.
{ font-variant=small-caps} 

* This is a 'mylist' 
* in italics
{ .mylist font-style="italic" }
~

For fenced code blocks, custom blocks, and headers, the attributes are specified on the first 
line.

~ Sample
### This header is not bold    { font-weight=normal }
```javascript   { .prettyprint .linenums }
function one { 
	return "a one"; 
}
``` 
~ 

For inline elements, you can follow links, images, and bracketed text (between
`[` and `]`) with attributes although it is recommended to put attributes in 
link or image definitions themselves.

~ Sample
Here is an ![butterfly] image. 
With [bold]{font-weight=bold} text.

[butterfly]: butterfly.png   { width=100px vertical-align=top }
~

## Identities and labels {#sec-ids-labels}

Attributes are most often used to give a block element an identity and then
refer to that element later on. For example, here we give an identifier
to a header:

~ Sample 
### A named header { #myheader }

And we can refer to it

* Using an explicit [link](#myheader) (or [reference][#myheader]).
* Or using an implicit link to Section [#myheader].
* Or we can just see its label, namely #myheader.
~

Using an implicit link is generally recommended. When rendering a reference such
as Section [#myheader], there should never be a line break in between _Section_
and the label _#myheader_. In LaTeX for example, it is customary to write a
non-breakable space (`~`) instead of a regular space. Madoko takes care of
this automatically and always renders a non-breakable space  between a link and
what comes before it (unless the user uses an explicit line break).

Of course, we can refer to _any_ element that has an identity,
like equations, figures, tables, etc. Here is an example with an equation:

~~ Sample
This is a famous equation:

~ Equation 	{#eq-gaussian}
	{\int_{-\infty}^\infty e^{-a x^2} d x} = \sqrt{\frac{\pi}{a}}
~

and we can refer to Equation [#eq-gaussian] just like any header.
~~

An implicit link like `[#myheader]` is a shorthand for the explicit link
`[#myheader](#myheader)`, i.e. it links to the local reference `#myheader` and
it displays the text `#myheader`. In Madoko, a [hash name][#sec-hashname]
(`#`_name_) is replaced by the _label_ value of the referred block. For
headers, this is by default the header number (as we will see in Section
[#numbering]) but you can set any label you'd like. Using a minus\ (`-`) in
the attributes clears all attributes, which is used in the following example
to suppress the default numbering:

~ Sample
### A header without a number { - }
### A header that is labeled  { - #myheader1 label="my label" }
Let's refer to Section [#myheader1].
~

## Numbering	{ #numbering }

For larger documents, numbering sections, figures, tables, images, etc. is
quite important and Madoko supports this well. By default, Madoko will number
headers, figures, and equations. Numbering for headers is by default up to 3
levels, but it can be set for the document using the `Heading depth` meta
variable. If it is set to zero, it suppresses numbering for headings completely:

	Heading Depth: 0 


#### Custom numbering

The numbering can be completely customized though. Numbers are introduced
using `@`_name_ syntax in attributes. When such counter name occurs, it is
automatically incremented. If the value of a _label_ contains a counter name,
it is replaced by its current value. For example, the default attributes for
equations contain[^fn-autocounter]:

	{ @equation label="(@equation)" }

This automatically will increment the `@equation` counter at each occurrence of
an equation block element, and set its label to the current value surrounded by
parenthesis. Similarly, the default label for main sections is defined as:

	{ @h1 label="@h1" }

Of course, for headers we like to display the label by default in front of the
header text. This can be done using the [before][#sec-before] attribute where
we use the [`#label`][#sec-hashname] key to insert the value of the label. So,
the full definition for the main sections is:

	{ @h1 label="@h1" before="#label.\ \ \ " }


#### Reset counters 

If a counter has a dash in its name, of the form `@`_prefix_`-name`, then the
counter will be reset on every increment of the counter _prefix_. For example,
the counter for subsections is reset on every new section (using [metadata
rules][#sec-rules]):

	~h2: @h1-h2 label="@h1.@h1-h2" before="#label.\ \ \ "


#### Display format 

The counters above are displayed as numbers but sometimes we would like to
number using other formats. When you assign a single letter to a counter, it
will continue counting using letters. This is nice for example when starting
the appendix where each section is generally numbered using letters:

	# Appendix (not numbered at all)   {-}
	
	# Section one of the appendix { @h1="A" }
	This section will be numbered as 'A'

	# Another appendix section
	This section will be numbered as 'B'

The display format of a counter can also be set indepently of setting its
value. Currently, Madoko supports `arabic`, `upper-case`, and `lower-case`
display. Assigning a single letter, like `@h1="A"` in the previous example is
just a shorthand for:

	{ @h1=upper-case @h1=1 }

As a final example, suppose we would like to count figures using  lower-case
letters and per section. We can do this by defining the default attributes for
figures as a metadata rule:

	~Figure: @h1-figure=lower-case label="@h1\/-@h1-figure" 

The label definition here displays figure labels of the form `2-b` for example
(where we used the empty [escape sequence][#sec-escapes] `\/` to prevent the
counter name `@h1`  being read as `@h1-`). Note that because this is a meta-
data rule, we could not  use the assignment `@h1-figure="a"` here, or
otherwise every figure would get numbered as `a`. In this case we just want to
set the display mode here and not a specific value.

[^fn-autocounter]: 
	Actually, Madoko automatically creates and increments counters for any block
	element using the same name as that block element. Therefore, in a [metadata
	rule][#sec-rules] we should not add the `@equation` counter explicitly since
	it  is already done automatically by Madoko for any `Equation` block. If it is
	added, it will effectively increment the `@equation` counter twice.

## Replacement

### Before and after 	{ #sec-before }