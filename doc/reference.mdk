Title		: Madoko Reference
Subtitle	: A Fast Scholarly Markdown Processor
Author		: Daan Leijen
Affiliation	: Microsoft Research
Email		: daan@microsoft.com

Heading Base: 2
Cite All	: True
Script		: reference.js
Bib			: reference
Package		: fontspec*
Package		: [curve]xypic
Math Embed  : 16

MathJax Ext : AMScd
Package		: amscd
MathJax Ext : mhchem
Package		: [version=3]mhchem
PdfLatex    : XeLaTeX

Css     : http://highlightjs.org/static/styles/vs.css

.SampleBlock: padding-left=1em padding-right=1em padding-top=-1ex 
				border-style=solid border-width=1px 
~Sample		: margin-bottom=2ex 
			  replace="~ Begin SampleBlock#nl;\
			           ````` {.SampleSource}#nl;\
				       #source#nl;`````#nl;-------- { width=50% text-align=left }#nl;\
				       #source#nl;~ End SampleBlock#nl"
~Slanted	: font-style=oblique
~Fib    	: replace='/^x?$/y/' replace='/xx(x*)/~Fib#nl\/x\1#nl~#nl~Fib#nl\1\/#nl~/' 
			  notag tight 

XScript		: https://google-code-prettify.googlecode.com\
				/svn/loader/run_prettify.js?lang=scm&lang=latex
Title2		: (#Title,#Title)
llbracket	: &#10214;
rrbracket	: &#10215;


~ TexRaw
\mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\mdDefineUnicode{10215}{\ensuremath{\rrbracket}}
\cssClassRule{sampleblock}{padding-bottom=1ex}

\renewcommand{\mdUnicodeChar}[1]{{\fontspec{MS Gothic}\char#1}}
\newcommand{\hiragana}[1]{{\fontspec{MS Gothic}#1}}
\cssClassRuleCmd{hiragana}{\hiragana}
~

<style>
.hljs-command { color: blue;}
.hljs-special { color: purple; }
.hljs-formula { background-color: #EEE; }
</style>

[TITLE]

# Table of contents { - #toc-header }

[TOC]

~TexRaw
% The LaTeX lstlisting package does not know the 'javascript' language
% so we define some limited one here based on Java.
\definecolor{dark-blue}{rgb}{0,0.08,0.45}
\definecolor{string-purple}{rgb}{0.49,0,0.47}

\lstdefinelanguage{javascript}[]{Java}{
	morekeywords={function},
	keywordstyle=\color{dark-blue},
	stringstyle=\color{string-purple}
}
~

# Overview of Madoko

Madoko is a fast javascript [Markdown] processor written in [Koka]
It started out as a demo program for the new, strongly typed, [Koka] language and
the name comes from "_Ma_\/rk\/_do_\/wn in _Ko_\/ka".

## Madoko philosophy

The main design goal of Madoko is to enable light-weight creation of 
high-quality scholarly[^scholarly] and industrial documents for the web and print,
while maintaining John Gruber's Markdown philosophy of simplicity and focus on
plain text readability.


The popularity of Markdown is not accidental, and it is great for writing
prose: it is super simple and straightforward to create good looking HTML
documents. But for more serious use Markdown falls short in several areas,
and Madoko provides many essential additions:

* Extensive support for labeling and in-document [references][#sec-ids-labels].
* [Tables][#sec-table] with custom borders, column alignment and width, multicolumn spans etc.
* Extensive [citation][#sec-bib] support, using standard BibTeX entries and BibTeX styles.
* Automatic and customizable [numbering][#sec-numbering] of sections, figures, etc. 
* Title page and table-of-contents [generation][#sec-special].
* Support for [custom text elements][#sec-custom], like `Theorem`, `Abstract`, `Figure`, etc.
* Styling for both HTML and LaTeX output through [standard CSS attributes][#sec-css].
* Powerful styling through [attributes][#sec-attr], [metadata rules][#sec-rules] and 
	[replacement rules][#sec-replace].
* Support for [syntax highlighting][#sec-code] and code with [mathematical formatting][#sec-mathpre].
* Compatible with most common Markdown extensions, such as [footnotes][#sec-footnotes], 
	[mathematics][#sec-math], etc. Tries to be as compatible as possible with
	existing Markdown implemenations like [Markdown Extra], [PanDoc], [Kramdown], or [MultiMarkdown].

Instead of a plethora of backends, Madoko concentrates on generating either
HTML or high-quality PDF files through [LaTeX]. There has been a lot of effort
in Madoko to make the LaTeX generation robust and customizable while
integrating well with the various academic document- and bibliography styles.
This makes it possible to write articles using just Madoko and get both a
high-quality print format (PDF) and a good looking HTML page. Look at this
scientific article for an example[^fn-slow-load] (generated with a rather old
version of Madoko):

~ Center
| :~~~~~~~~~~~~~~~~~~~~~~~~:     | :~~~~~~~~~~~~~~~:                | :~~~~~~~~~~~~~:              |
| LaTeX/PDF                      | HTML                             | Madoko source                |
| [![doc-pdf]][koka-article-pdf] | [![doc-html]][koka-article-html] | [![doc-md]][koka-article-md] |
|                                |                                  |                              |
~

Also, you can look at the [PDF][this-pdf] and [source][this-mdk] of this document.
In the future, we plan to support e-books through the [ePub] format too.

[^scholarly]:
	There is actually an effort to define 
	[scholarly markdown](http://blog.martinfenner.org/2013/06/17/what-is-scholarly-markdown/).


[^fn-slow-load]:
	Note that the example article loads somewhat slowly in the browser. This is
	because it is a long article that uses _a lot_ of math which takes a while to
	render in [MathJax].

[epub]: http://en.wikipedia.org/wiki/EPUB

[doc-pdf]: 		koka-doc-pdf.png 	{width=250px vertical-align=top } 
[doc-html]: 	koka-doc-html.png 	{width=250px vertical-align=top }
[doc-md]: 		koka-doc-md.png 	{width=250px vertical-align=top }

[koka-article-pdf]: 	http://research.microsoft.com/pubs/200436/koka-effects-2013.pdf
[koka-article-html]: 	http://research.microsoft.com/en-us/um/people/daan/madoko/doc/koka-effects-2013.html
[koka-article-md]: 		http://research.microsoft.com/en-us/um/people/daan/madoko/doc/koka-effects-2013.md.txt

[this-pdf]: reference.pdf
[this-mdk]: reference.mdk.txt

[latex]: http://en.wikibooks.org/wiki/LaTeX

## Performance

Madoko is a javascript program that runs on [Node.js]. It is about 30% faster
then [Marked] \(one of the fastest Javascript markdown implementations), and
about 6 to 8 times faster than [Showdown] and [Markdown.js]. Madoko is also
available as a .NET executable on windows.

[Koka]: 		http://koka.codeplex.com
[Markdown]: 	http://daringfireball.net/projects/markdown/syntax
[Markdown.js]: 	https://github.com/evilstreak/markdown-js
[Showdown]: 	https://github.com/coreyti/showdown
[Marked]: 		https://github.com/chjj/marked
[MathJax]:		http://www.mathjax.org
[MathJaxCmds]:  http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands
[Node.js]:		http://nodejs.org	
[NodeJs]: 		http://nodejs.org	

[PanDoc]:			http://johnmacfarlane.net/pandoc
[MultiMarkdown]:	http://fletcherpenney.net/multimarkdown
[Kramdown]:			http://kramdown.gettalong.org

# Installation and usage

The easiest way to use Madoko is as a command line tool using Node.js (which
works on many platforms, like Windows, MacOSX, Linux etc). Madoko can also run
inside a web browser or as a .NET executable. To install under Node.js is very
easy:

* Ensure you have [Node.js] installed on your system.
* Open a command line window and run:\
  `npm install madoko -g`

and you are done. Translating a markdown document is done simply as:

* `madoko -v mydoc.mdk`

which generates `mydoc.html`. The `-v` flag gives more verbose output.
To also generate a PDF file, use:

* `madoko --pdf -v mydoc.mdk`

To generate a PDF, you need to have LaTeX installed on your system. Popular
LaTeX systems include [MikTeX] for Windows, and [MacTeX] for MacOSX. A full
description of all command line options can be found in  Appendix [#sec-commandline]

[MikTeX]: http://miktex.org/
[MacTeX]: http://tug.org/mactex/


# Syntax: Inline elements

Madoko is fully compatible with basic [Markdown syntax][Markdown] and passes
the entire test suite. It also implements most extensions, like [Github
flavored markdown][GithubFM], [PanDoc], [Markdown Extra], and [multi-markdown][MultiMarkdown],
and it adds quite a few features itself to make it really useful for writing 
academic and industrial documents.

We assume that the reader is familiar with [basic markdown syntax][Markdown]. 

[Markdown Extra]: 	http://michelf.ca/projects/php-markdown/extra
[GitHubFM]:			https://help.github.com/articles/github-flavored-markdown

In Madoko, _tab_'s are considered to be equivalent to 4 spaces. It is therefore 
best to configure your editor to view tabs as 4 spaces wide or documents may
look off.

## Emphasis

Enclose words in asteriks (`*`) or underscores (`_`) to emphasize them.
Use double asteriks or underscores for strong emphasis:

~ Sample
Here is _some emphasis_, or using *asteriks*.
Or use __strong emphasis__, or like **this**.
~

## Code

You can include pre-formatted text in regular text using back-quotes (`` ` ``).

~ Sample
For emphasis, use the `<strong>` tag in HTML.
We can use back-quotes by using multiple ``back`quotes``. 
~

Section [#sec-code] discusses code in more detail including syntax highlighting.

## Sub- and super-script

Using tilde (`~`) and hat (`^`), you can format inline text as sub- and super-script respectively.
Inside script, no white space is allowed to prevent mistakes. If you need white space you
can still use an escaped space (`\ `).

~ Sample
Here is how you write H~2~O or E=MC^2^.
Please use escapes for~longer\ script~.
~

## Strike-out

Enclose anything in two tildes and it will strike out the content:

~ Sample
There is a ~~strike out~~ here.
~

## Smart quotes, symbols, and direct links

Madoko will quote smartly using proper open and closing quotes for anything
enclosed in single quotes (`'`), double quotes (`"`), or french quotes (`<<`
and `>>`).

~ Sample
"double quoted"  
'single quoted'  
<<guillemet quoted>>  
<http://www.google.com>
~

Note that text enclosed in `<` and `>` brackets gets interpreted as direct 
link. Madoko will only smart quote single quotes if the last quote is not directly
followed by a letter. This often prevents wrong quotation with words like "can't":

~ Sample
'really, I can't do this', he said. 
I can't and mustn't do this.
~ 

Madoko will also replace multiple dashes and dots to a proper symbol:

~ Sample
Please distinguish a minus sign, -, from the _en dash_ which
is used to separate spans or pages, like 1--20, and the 
_em dash_ which is even longer and sometimes used for 
quotation attribution. --- Oscar Wilde.  
Three dots ... should be close together.
~

## Links  { #sec-links }

Madoko has three kinds of links, reference links, inline links, and direct
links. The inline links have the linked text between square brackets and the
URL follows between parenthesis, while direct links are simply enclosed
between angled brackets:

~ Sample
Here is a link to [Google](http://www.google.com). 
Or as a direct link: <http://www.google.com>.
~

Generally, reference links are preferred. Here, the link is defined separately
after the body of text such that it looks less cluttered:

~ Sample
Here is a link to [Google] again. 
We can also [Change the text][Google].

[Google]: http://www.google.com "Google"
~

Note how `[Google]` is simply a shorthand for `[Google][Google]`. The title in
double quotes in the link definition is optional.  See also Section 
[#sec-attr] on how to include attributes in link  definitions.

## Images	   { #sec-image }

Images are included using a regular link prefixed with an exclamation mark (`!`).

~ Sample
A butterfly: ![bfly].

[bfly]: butterfly.png "A Monarch" { width=100px }
~

This example also shows the use of attributes (Section [#sec-attr]) where
we can specifiy the `width`, `height`, or `vertical-align` of the image.

## Footnotes  { #sec-footnotes }

Footnotes are written as regular link definitions prefixed with a hat (`^`)
character. This is the syntax [originally proposed][fnsyntax] by John Gruber.

~ Sample
Here is a footnote[^fn].

[^fn]: This is the content of the example footnote. 
	You can continue a footnote by indenting content.
	And notice the backlink.
~

[fnsyntax]: http://daringfireball.net/2005/07/footnotes

## Escape sequences		{ #sec-escapes }

If you want to use a special character directly without a special Markdown
meaning, precede it with a backslash (`\`). For example, to use a star (`*`)
without causing emphasis, you can write `\*`.  

Madoko will never escape a letter or digit and always keep the backslash, so
`\a` becomes "\\a" while `\&` becomes just "&". Thus, you can safely write
windows style file names without needing an escape:

~ Sample
Would you like c:\foo\bar to be deleted? Yes\No. 
Here are some other escapes: \\, \#, \*, \|, and \0.
~

This approach is different than that of Markdown which only escapes a specific
set of characters, while Madoko escapes everything that is not a letter or digit.
The advantage of the approach of Madoko is that this is easy to remember, while
trying to remember a specific set of special escape characters is near impossible.
This is similar to the [PanDoc] approach to escape sequences.

### Special escapes

Some characters are translated specially when escaped.
If you escape a space (`\ `), it is translated as a non-breakable space, while
a backslash at the end of a line causes a hard line break to be inserted. The 
latter is recommended over using the standard Markdown way of using two spaces
at the end of a line because it leaves visual clue that a line break occurs.

~ Sample
Here is non\ breakable space and a hard\
line break with a \* star.
~

Finally, the escape sequence `\/` translates to nothing; this can be very 
useful to separate certain constructs. For example, emphasis is suppressed
if the underscores appear inside a word, as in my_example_here. Using the
empty escape sequence we can emphasize inside words too: to get
my\/_example_\/here, we can simply write `my\/_example_\/here`.

# Syntax: Block elements

## Headings and rules { #sec-heading }

Headings are written by prefixing with one or more hash characters (`#`):

	# A level one heading
	## A level two heading
	### A level three heading
	...
	###### Up to level six

It is also possible to write level one and level two headers using
a line of three or more equal (`=`) or dash (`-`) characters:

	A level one heading
	===================

	A level two heading
	-------------------

But hash-headings are generally preferred since a three or more  dashes (or
underscores or asteriks) are also used for horizontal rules:

~ Sample
Above...

------------

and below the line.
~ 


## Identities and labels {#sec-ids-labels}

Madoko has extensive support for numbering and referencing elements in a document.
Elements are given an identity using attributes (see Section [#sec-attr]).
For example, here we give an identifier `myheader` to a header:

~ Sample 
### A named header { #myheader }

And we can refer to it

* Using an explicit [link](#myheader) 
	(or [reference][#myheader]).
* Or using an implicit link to Section [#myheader].
* Or we can just see its label, namely #myheader.
~

Using an implicit link is generally recommended. 
When type setting a reference such as Section [#myheader], Madoko automatically
inserts a non-breakable space between "Section" and the reference[^refsp]. 
Unlike LaTeX there is no need to insert such non-breakable space yourself. 

[^refsp]: Madoko will still use a regular space if you use an explicit line 
	break between "Section" and the reference in the source.

Of course, we can refer to _any_ element that has an identity,
like equations, figures, tables, etc. Here is an example with an equation
(see Section [#sec-math]):

~~ Sample
In Equation [#euler] we define [Euler]'s number $e$: 

~ Equation { #euler }
e = \lim_{n\to\infty} \left( 1 + \frac{1}{n} \right)^n
~

[Euler]: http://en.wikipedia.org/wiki/Euler's_number
~~


An implicit link such as `[#myheader]` is a shorthand for an explicit link of
the form `[#myheader](#myheader)`, i.e. it links to the local reference
`#myheader` and it displays the text `#myheader`. In Madoko, a _hash name_
(see Section  [#sec-hashname]) like `#myheader` is replaced by the _label_
value of the referred block. For headers, this is by default the header number
(as we will see in Section [#sec-numbering])  but you can set any label you'd
like. Using a minus\ (`-`) in the attributes clears all attributes, which is
used in the following example to suppress the default numbering:

~ Sample
### An unnumbered header { - }
### A labeled header     { - #myheader1 label="my label" }
Let's refer to Section [#myheader1].
~

## Figures and images { #sec-figure }

Figures can be included using the `Figure` custom block (see Section [#sec-custom]):
~~ SampleBlock
``` 
Figure [#fig-monarch] shows how to put an image in a figure.

~ Figure { #fig-monarch caption="A Monarch butterfly." }
The ![monarch] image.
~

[monarch]: butterfly.png {width=100px vertical-align=middle}
```
* * * { width=50% text-align=left }
~~~ SampleOutput
Figure [#fig-monarch] shows how to put an image in a figure.
~~~
~~

~ Figure { #fig-monarch caption="A Monarch butterfly." }
The ![monarch] image.
~
[monarch]: butterfly.png { width=100px vertical-align=middle }

A figure can be given an identity and referred to just like headings.
The `caption` attribute gives the caption of the figure which is also
used in the table-of-figures. A `Figure` can have a `page-align`
attribute that can be set to `top`, `bottom`, or `here`. This is ignored
in the HTML output but used in LaTeX to influence where a figure is
placed on a page. The `.wide` attribute is used in LaTeX to have figures
span both columns in a two-column document class.

## Lists  { #sec-lists }

Unordered lists are created simply by using an asteriks (`*`), plus (`+`),
or dash (`-`) as item markers preceded by an empty line (or otherwise
it is considered part of a paragraph):

~ Sample
Groceries:

* Banana
* Bread
	- white
	- whole grain
* Basil
~

Each item marker must be followed by a space.
You can created ordered lists using numbers followed by a dot and space. Also
long list items can be wrapped by indenting the text for each item:

~ Sample
1. An ordered list example. 
	With some longer items.
2. An another item
	with more text.
~

Normally, the content of each list item is just treated as text and not as a
paragraph. If there are any blank lines in the entire list, each item is 
typeset with a surrounding paragraph which makes the list a bit looser for
HTML output:

~ Sample
3. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
	Aliquam hendrerit mi posuere lectus. 

3. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.

3. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
~

Note how the specific numbers used in the list do not matter, except that
the first item determines the start number of the enumeration.

## Block quotes { #sec-blockquote }

Block quotes are written just as in email using `>` angle brackets:

~ Sample
Let's start a block quote:
> Of life's two chief prizes, beauty and truth,
> I found the first in a loving heart and the 
> second in a laborer's hand.\
> &emsp;&emsp; --- Khalil Gibran
~

Just like lists, block quotes can be nested and contain other block elements.

## Code blocks  { #sec-code }

You can write preformatted code simply by indenting the code with a tab
character or at least four spaces. For example:

~ Sample
	<b>some html code</b>
~

Another way to write code is to used _fenced_ code blocks. These start with at
least three backticks (`` ` ``) and goes on to the first line containing the
same number of backticks. Moreover, you can include the language name after
the backticks:

~ Sample
``` javascript 
function hi() { return "hi"; }
```
~

### Advanced: Syntax highlighting

For the previous example, Madoko will automatically add the `lang-javascript`
class for HTML output, and the option `language=javascript` to the LaTeX
[listings] package. This can be used to  enable syntax highlighting. For
example, to highlight the above example using  [Google Prettify][GPretty] we
should include the Google script in the metadata (see Section [#sec-metadata]):
``` 
Script: https://google-code-prettify.googlecode.com\
		/svn/loader/run_prettify.js
```

and add the `.prettyprint` class using attributes:

~ Sample
``` javascript	{ .prettyprint .linenums }
function hi() { 
  return "hi"; 
}
```
~

Note how the sample shows line numbers using the `.linenums` class. You can
start numbering at a specific line using a colon followed by the line number,
for example: `.linenums:10`. Of course, you can use a [metadata rule][#sec-rules] 
to enable pretty printed code for all code blocks:

	~Pre: .prettyprint .linenums

In LaTeX the code is typeset using the [listings] package. Unfortunately,
this package does not predefine the JavaScript language so we  need to define
it ourselves. This can be done at the start of the document using a `TexRaw`
custom block (see Section [#sec-custom]). For example, in this document we
used:

``` tex	{ .prettyprint language=TeX }
~ TexRaw
\definecolor{dark-blue}{rgb}{0,0.08,0.45}
\definecolor{string-purple}{rgb}{0.49,0,0.47}

\lstdefinelanguage{javascript}[]{Java}{
	morekeywords={function,let},
	keywordstyle=\color{dark-blue},
	stringstyle=\color{string-purple}
}
~
```

Madoko will automatically pass the `language` key to the listings package, and
also include line numbers if the `.linenums` class is present. Use the
`.showspaces` class to show spaces and tabs in the code. 

In some cases, the listings package does not work correctly in certain
contexts, like tables or command arguments, due to the fragility of LaTeX
parsing[^listings].  In such cases, you can switch to a robust verbatim mode
using the `.plain` class.

~ Sample
+-----------------------+
|`function foo`{.plain} |
+-----------------------+
~

[GPretty]: http://code.google.com/p/google-code-prettify
[listings]: http://www.ctan.org/pkg/listings

[^listings]: The way the [listings] package and other verbatim environments
 	work in LaTeX makes them inherently fragile. It is not possible to fix this
 	robustly. You can read more about this on 
 	[stack exchange](http://tex.stackexchange.com/questions/29971/why-can-lstlisting-not-be-saved-in-a-command).

## Table of contents  { #sec-toc }

Generating a table of contents is easy, just include the special element
`[TOC]` anywhere in your document and it will expand to a table of contents.
You an use the metadata value `Toc Depth` to set how many levels deep the
table of contents goes (by default 3).

You can also a create a list of figures, by using `[TOC=tof]`. This will list
all the `~Figure` block elements.

### Advanced: Custom tables of contents

Custom tables of contents can be generated using the `toc` attribute.  The
`toc-depth` attribute specifies the depth of the element (by default 1), while
the `toc-line` specifies the contents of the line displayed in the table of
contents. For example, using [metadata rules][#sec-rules] we can generate a
table of contents for equations:

	~Equation: toc=equations toc-line="#caption"

Here we assume that the user adds a `caption` attribute when denoting
equations (which will get expanded inside the `toc-line`). We can then render
the table of equations anywhere in the document as:

	[TOC=equations]

## Bibliography and Citations		{ #sec-bib }

One of Madoko's main design goals is to enable the creation of high-quality
scholarly articles. As such, Madoko integrates closely with the standard 
[BibTeX] tool to generate bibliographies and references inside a document.
Usually, BibTeX comes standard with any LaTeX installation.

You can simply use any existing BibTeX bibliography file (`.bib`). You can
specify which bibliography files are to be used using  `Bib` 
[metadata](#sec-metadata) entries:

	Bib:  ../mybib1
	Bib:  mybib2
 
As an example, you can view the bibliography for this document [here](reference.bib).
Entries in the bibliography files can now be referenced using semi-colon separated 
references (as in [Pandoc]), for example 

~ Sample
Read about LaTeX and TeX [@Knuth:Tex; @Lamport:Latex].
~

Note that unlike LaTeX there is no need to explicitly insert an unbreakable
space between the text and the citation, Madoko automatically takes care of this
(as described in Section [#sec-ids-labels]).
If necessary, you can also include extra text for each entry:

~ Sample
Read more [The book @Knuth:Tex;\ @Lamport:Latex (chapter 4)]. 
~

When Madoko finds such references, it writes them to a `.bib.aux` file
(together with the needed bibliography files) that are read by BibTeX to
generate the bibliography entries. BibTeX is called automatically by Madoko
whenever the citations change. The generated bibliography entries are included
in your document using the special `[BIB]` element, for example:

	## References	{-}
	[BIB]

which you can see at the [end of this document][#sec-references].

### Bibliography styles  { #sec-bibstyle }

The style of the bibliography entries is determined using the `Bib Style` key
and can be any [BibTeX style](http://web.reed.edu/cis/help/latex/bibtexstyles.html)
(by default `plainnat`):

	Bib Style: abbrvnat

Madoko uses a very simple LaTeX parser to format the bibliography entries in
Markdown. It can handle things like special characters and accents quite well
and recognizes many formatting commands. Even though it is sufficient for
bibliography entries in general, the Madoko LaTeX parser may not work for more
fancy LaTeX commands in bibliography entries. However, we strive to make it
work for any bibliograpy style and entries, so please [file a bug report][issues] 
if you encounter situations where it does not work correctly.

Bibliography styles tested with Madoko include the following author-year
styles: `apa`, `apalike`, `plainnat`, `abbrvnat`, `unsrtnat`, `newapa`,
`chicago`, `named`,  `agsm`, `dcu`, `kluwer`, `astron`, `bbs`, `cbe`,
`humannat`, `humanbio`, `jtb`, `apsrev4-1`, `aipauth4-1` and others. 
Also, the following numeric styles
have been tested: `eptcs`,  `abbrv`, `plain`, `ieeetr`, `acm`, `unsrt`,
`alpha`, `siam`, `apsrmp4-1`, `aipnum4-1` and others.
Since tools like BibTeX and Madoko make numbering and linking automatic,  it
is generally preferred for modern documents to use a numeric citations style.

[bibtex]: http://en.wikipedia.org/wiki/BibTeX
[issues]: http://madoko.codeplex.com/workitem/list/basic


### Citation styles   { #sec-cite }

The citation style defaults to a _numeric_ style. However, it can be set
explicitly using the `Cite Style` metadata key:

	Cite Style: natural

Valid citation styles are _natural_, _textual_, _super_,
and _numeric_ (default). The natural and textual style use author-year style
citations, while the super and numeric styles use numbers.

| ~~~~~~~~~~~ | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| _natural_   | [@Lamport:Latex;@Knuth:Tex]{cite-style=natural}  | (default for author-year citations) |
| _textual_   | [@Lamport:Latex;@Knuth:Tex]{cite-style=textual}  |                                     |
| _numeric_   | [@Lamport:Latex;@Knuth:Tex]{cite-style=numeric}  | (default for numeric citations)     |
| _super_     | [@Lamport:Latex;@Knuth:Tex]{cite-style=super}    |                                     |

Note that numeric citations are sorted (and compressed) by default.
Also full author-year style citations only work with BibTeX styles that
support this, i.e. generally any style that works with the `natbib` package
like `plainnat`. With author-year citations we can use modifiers to change how 
the citation is shown. For example, assuming a _natural_ style:

| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| `[@Goo93]`                    | [@Goo93]{cite-style=natural}          | Natural                         |
| `[+@Goo93]`                   | [+@Goo93]{cite-style=natural}         | Long -- all authors             |
| `[-@Goo93]`                   | [-@Goo93]{cite-style=natural}         | Short -- just year              |

Moreover, if you leave out the brackets, you force a _textual_ style:

| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| `@Goo93`                      | [@Goo93]{cite-style=natural .textual}  | Textual style                   |
| `+@Goo93`                     | [+@Goo93]{cite-style=natural .textual} | Long -- all authors             |
| `-@Goo93`                     | [-@Goo93]{cite-style=natural .textual} | Short -- just year              |
| `!@Goo93`                     | [!@Goo93]{cite-style=natural .textual} | Just authors                    |

In a numeric style, most of these attibutes have no effect and all the 
bracketed cases are displayed as "[@Goo93]". 
For the four cases in textual style, we get  "@Goo93", "+@Goo93", "-@Goo93", and "!@Goo93".

See Appendix [#sec-custom-cite] on how to customize citations styles further,
and Appendix [#sec-custom-bib] on how to write your bibliography entries
by hand without using BibTeX.

## Tables { #sec-table }

Madoko significantly extends the table syntax of basic Markdown. In particular,
it is easy to add horizontal or vertical lines, and to control cell alignment,
multiple column spans, and the width of the columns.
Here is an example of a plain table from "[Just a
Theory](http://www.justatheory.com/computers/markup/markdown-table-rfc.html)".
~ Sample
|  id  |    name    |      description           |  price  |
|:-----|:----------:|----------------------------|--------:|
| 1    |   gizmo    | Takes care of doohickies   |   1.99  |
| 2    |   doodad   |     Collects *gizmos*      |  23.80  |
| 10   |  dojigger  |            Foo             |  102.98 |
| 1024 | Self-explanatory, no?                  ||    0.99 |
~
The basic rules for formatting a table are:

* Every line of the table should start and end with a `|` (or `+`) and columns are 
	separated by `|` (or `+`) too. If you need a `|` character in cell content, use 
	an escaped bar instead (`\|`).
* Every row can be on one line only, and there can be no blank lines.
* The table can optionally start with one or more _header_ rows.
* A cell can span multiple columns by using multiple bars to end the cell, like 
	`||` in the previous example.
* The table should always have an initial *column specifier* row that separates
	the header from the body of the table (or marks the start of the body in case
	there is no header). The content of each column specifier cell is just
	dashes (`-`) or tildes (`~`)

The column specifier row determines alignment and vertical lines in a table:

* Columns can be aligned by using a `:` in the column specifier: one on the
	right or left aligns to the right or left, while a colon on both sides will
	center the column.
* If a column specifier uses a plus (`+`) instead of a bar (`|`) to separate
	the column, a vertical line is used to separate the columns. To distinguish
	the use of a `+` for a table instead of as a list item, there should be
    *no whitespace* following a `+` when used this way!
* If a column specifier cell uses dashes `-`, a horizontal line is drawn. By using
	tildes (`~`) instead, no line is drawn for that column specifier cell.  

In the next example, we suppress the horizontal line after the header, but add 
vertical lines on the outsides. Also, we use two header rows.
~ Sample
|    grouped       ||                            |         |
|  id  |    name    |      description           |  price  |
+:~~~~:|:~~~~~~~~~~:|~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~:+
| 1    |   gizmo    | Takes care of doohickies   |   1.99  |
| 2    |   doodad   |     Collects *gizmos*      |  23.80  |
| 10   |  dojigger  |           Foo              |  102.98 |
| 1024 | Self-explanatory, no?                  ||    0.99 |
~

### Horizontal lines

We can draw horizontal lines in a table by using a row where
every cell just contains dashes (`-`). By using more then one 
row of dashes, we get double horizontal lines. Here is a
a table with no header and an outer border:
~ Sample
+:----:|-------------+:--------------------------:|-------:+
| centered gizmos   || Takes care of doohickies   |  1.99  |
|   2  |    doodad   |    Collects *gizmos*       | 23.80  |
|  10  |   dojigger  |    Escaped \| and \+       | 102.98 |
| 1024 | thingamabob |  Self-explanatory, no?     |  0.99  |
|------|-------------|----------------------------|--------|
~
And finally a complex table with all kinds of alignment, 
multiple column spans and horizontal lines[^funfn].

[^funfn]: For fun, try to draw this example table in LaTeX
	without consulting the manual :-).

~ Sample
| ------ | ----------------- | ------------------- | ------ |
|   id   |        name       |    description      |  price |
+--------+-------------------+:-------------------:+~~~~~~~:+
| 1      | gizmo                                          |||
|        | ----------------------------------------       |||
| 2      | doodad            | Collect *gizmos*    | 23.80  |
| ------ | ----------------- | ------------------- |        |
| ------ |                   | ------------------- | ------ |
| 1024   | thingamabob       | Self-explanatory    | 0.99   |
| ------ | ----------------- |                     | ------ |
~
Note how we started the previous table with a horizontal line, 
where the column specifier row is on the third line. 

### The width of columns

We can specify the width (and other attributes) of a column by
adding an [attribute][#sec-attr] specification in the column
specification row. In the following example, we use a column
of fixed width, and one of a relative with with respect to 
the overall width of the table.

~ Sample
+:----:|---{width=2cm}--+:-----{width=33%}--------:|-------:+
| centered gizmos      || Take care of doo hickies |  1.99  |
|   2  |    doodad      |     Collects *gizmos*    | 23.80  |
|  10  |   dojigger     |            Foo           | 102.98 |
| 1024 | thingabob      |  Self-explanatory, no?   |  0.99  |
|------|----------------|--------------------------|--------|
~

### Long tables

If a table is expected to be long and cross multiple pages, the table should
be followed by an attribute declaration that sets the `.long` class. This is
used in LaTeX output to switch to a `longtable` environment which supports
tables that can be broken over multiple pages.

## Mathematics   { #sec-math }

Madoko documents can include mathematics in standard LaTeX syntax.
Generally, inline math should
be typeset between `$`\ characters, while block equations should use the 
`Equation` block syntax.

~~ Sample
A famous equation is $E = mc^2$, but another famous one is:
~ Equation 	{#eq-gaussian}
  \int_{-\infty}^\infty e^{-a x^2} d x = \sqrt{\frac{\pi}{a}}
~
and we can refer to Equation [#eq-gaussian] like any heading.
~~
Block equations can also be included
using the standard LaTeX `$$` characters on separate lines. However, the
`Equation` block is preferred as it takes care of numbering, alignment, etc.
See also Section [#sec-custom] on custom blocks that support mathematics,
like `Theorem`, `Lemma`, `Proof`, etc. Madoko does not support the `\(` and
`\[` commands to enclose mathematics since those are escape sequences.


### Advanced: using packages

By default, Madoko supports most of the AMS mathematics commands,  i.e.
`amsmath`, `amsfonts`, and `amssymb`.  However, sometimes you need specific
packages. You can import more packages using the `Package` metadata key. For
example, we can include the [amscd]  package,

	Package: amscd

to draw commutative diagrams:

~~ Sample
~ Equation
\begin{CD}
S^{{\mathcal{W}}_\Lambda}\otimes T @>j>> T\\
@VVV @VV{P}V\\
(S\otimes T)/I @= (Z\otimes T)/J
\end{CD}
~
~~
As a hint to understand the previous example, note that `@VVV` denotes a downward arrow,
`@>j>>` a right pointing arrow with a label `j` on top, and `@=` a long equality.

Here is an example of the more modern [xypic] package which we included in this
document with the `curve` option:

	Package: [curve]xypic

With this package, we can draw very complex diagrams:

~~ Sample
~ Equation
\xyoption{tips}
\entrymodifiers={++[o][F-]}
\SelectTips{cm}{}
\xymatrix @-0.25em {
*\txt{start} \ar[r]
& 0 \ar@(r,u)[]^b \ar[r]_a
& 1 \ar[r]^b \ar@(r,d)[]_a
& 2 \ar[r]^b
\ar `dr_l[l] `_ur[l] _(.2)a [l]
&*++[o][F=]{3}
\ar `ur^l[lll]`^dr[lll]^b [lll]
\ar `dr_l[ll] `_ur[ll] [ll] }
~
~~

or:

~~ Sample
~ Equation
\xymatrix @-0.5em{
U \ar@/_/[ddr]_y \ar@/^/[drr]^x
\ar@{.>}[dr]|-{(x,y)} \\
& X \times_Z Y \ar[d]^q \ar[r]_p
& X \ar[d]_f \\
& Y \ar[r]^g & Z }
~
~~

As a hint to understand the above code, note that `\ar@/_/[ddr]_y` denotes an arrow,
left curved (`@/_/`), going down, down, right (`[ddr]`), with a label `y`
underneath. See the package [user guide][xypic] for more examples.

<!--
~~ Sample
~ Equation
\xymatrix @W=3pc @H=1pc @R=0pc @*[F-] {%
: \save+<-4pc,1pc>*\hbox{\textit{root}}
\ar[]\restore\\
{\bullet}
\save*{}
\ar`r[dd]+/r4pc/`[dd][dd]
\restore\\
{\bullet}
\save*{}
\ar`r[d]+/r3pc/`[d]+/d2pc/
`[uu]+/l3pc/`[uu][uu]
\restore\\
1 }\mathit{Answer}
~
~~
-->

### Math commands   { #sec-mathdefs }

For math-heavy documents, it is convenient to define LaTeX commands for 
common operations. Such command definitions can be directly understood by LaTeX
but need to be handled specially if the math is rendered dynamically in a HTML page. 
Madoko defines the custom block `MathDefs` to support mathematics definitions 
transparently across modes:

~~ Sample
~ MathDefs
\newcommand{\infer}[3]{#1 \vdash #2\,:#3}
~ 
We infer $\infer{\Gamma}{e}{\tau}$ for such expression $e$.
~~

Often it is convenient to put all such definitions in a separate `.tex` file and
include it in the document as:

	~ MathDefs
	[INCLUDE="mathdefs.tex"]
	~

### Mathematics in HTML

To typeset mathematics in HTML, Madoko can either typeset the math
statically or dynamically:

* `static`: In the default static mode, Madoko uses LaTeX to generate static images 
	for each formula. This is generally preferred because pages load fast, 
	and it requires no javascript. The drawback is that you
	need to have LaTeX installed on your system. See the 
	[metadata section][#item-math]
	for more information on fine-tuning static mathematics.

* `dynamic`:  Madoko uses the [MathJax] JavaScript
	library to render the math on the client-side. This means you do not
	need LaTeX but it is generally quite slow for math-heavy documents and
	not all of the LaTeX commands and packages are available. This mode can be
	enabled in the metadata as:

		Math Mode: dynamic

	The [metadata section][#item-math] contains more information on customizing MathJax.

<!--
As an example, here are some complex drawing examples using the
[`xypic`][xyjax] package. This is MathJax version is beta software, and we
need to include those extensions from a different server. Moreover, on the
LaTeX side the package `mathrsfs` is required since the `\mathscr` command is
available by default on MathJaX but not in LaTeX:

	MathJax Ext : http://sonoisa.github.io/xyjax/extensions/fp.js
	MathJax Ext : http://sonoisa.github.io/xyjax/extensions/TeX/xypic.js
	Package     : xypic
	Package     : mathrsfs

We can now program fancy mathematical diagrams like co-variant functors:

~~ Sample
~ Equation
\begin{xy}
\xymatrix {
{\mathscr{C}} & 
  a \ar[r]^f \ar[dr]_{g \circ f} & 
  b \ar[d]^g & 
  \ar@{~>}[r]^F & &
  Fa \ar[r]^{Ff} \ar[dr]_*[l]{
  	\hspace{-4em}\scriptstyle F(g\circ f) = Fg\circ Ff} & 
  Fb \ar[d]^{Fg} & {\mathscr{D}} \\
&& c & \ar@{~>}[r]^F &&& Fc
}
\end{xy}
~
~~

or some other complex commutative diagram:

~~ Sample
~ Equation
\begin{xy}
\xymatrix {
U \ar@/_/[ddr]_y \ar@{.>}[dr]|
	{\langle x,y \rangle} \ar@/^/[drr]^x \\
 & X \times_Z Y \ar[d]^q \ar[r]_p & X \ar[d]_f \\
 & Y \ar[r]^g & Z
}
\end{xy}
~ 
~~
-->

[mhchem]: http://www.ctan.org/pkg/mhchem
[amscd]: http://www.ctan.org/pkg/amscd
[xyjax]: http://sonoisa.github.io/xyjax/xyjax.html
[xypic]: http://mirror.utexas.edu/ctan/macros/generic/diagrams/xypic/doc/xyguide.pdf

### Advanced: Preformatted math   { #sec-mathpre }

LaTeX math mode is great for regular mathematics but not so good if one tries
to preserve whitespace or uses longer identifiers. This is actually quite common
for computer science documents where mathematics is mixed with program code.
Madoko supports a `MathPre` custom block that makes _preformatted_ math much
easier to typeset. In particular:

* Whitespace is preserved and spaces are replaced with a medium space (`\mathsp`) command
	(except when the spaces directly follow a LaTeX command).

* A name (consisting of letters and digits) is typeset in a `\mathid` command so 
	it will look like $\mathit{function}$ instead of $function$ (note the spacing
	between the $f$ and $u$ for example).

* If a name ends with digits, they are typeset as subscripts, where `x1` becomes $\mathit{x}_1$.

* A name starting with an `@` character is typeset using a `\mathkw` command, where
	`@return` becomes $\mathkw{return}$.

* Any text that is an argument of a `\begin`, `\end`, `\text`_xx_ or
	`\math`_xx_ command,      where _xx_ is one of `tt`, `sf`, `sl`, `rm`, `it`,
	`kw`, `id`, `bb`, or `bf`, is kept unchanged. Also any name starting with
	a `#` character is kept unchanged.

* Ampersands can be used to align text.

Using this convention, we can easily typeset program code using nice symbols.

~~ Sample
~ MathPre
@function sqr_\pi( num :int ) \{ 
   @return (num {\times} num \times{} \pi)
\}	
~
~~ 

Here is an example of aligned text which also demonstrates the use of `replace` (see 
Section [#sec-replace]):

~~ Sample
~ MathPre   { replace="/->/\rightarrow/g" }
random &: () -> ndet double
print  &: string -> io ()
error  &: \forall\alpha. string -> exn a
~
~~

### Setting all code to preformatted math

If you want to typeset all code using preformatted math, you can actually 'take over'
the standard code blocks in Madoko and set the input of those to `mathpre`. For example,
in the earlier scientific article, the document starts with the following 
[metadata rules][#sec-rules]:

	~Pre,~Code  : input=mathpre 
					replace="/\|->>/{\dlongmapsto}/g"
					replace="/->/{\rightarrow}/g"
					replace="/</{\langle}/g"
					replace="/>/{\rangle}/g"

These set both block- and inline-code to the `mathpre` input mode and define a set of
useful replacements.

## Custom blocks    { #sec-custom }

Madoko custom blocks are similar to the `div` element in HTML and allow the
use of custom block elements that can be styled and processed in a particlar
way. A custom block starts on new line starting with one or more tildes (`~`)
optionally followed by the block name and attributes. It ends at _the first
line containing the same number of tildes_ that started this block.

~~~ Sample
~ Note			 
Here is a note.
~
~~  { font-style=italic }
And some italic text in an unnamed block.
~~
~~~ 

Note that blocks with the same number of tildes do not nest, e.g. the following 
is wrong:

	~ Note
	~ Equation
	e = mc^2
	~
	~

since the `Note` will end at the first lonely tilde, not the second one.
As an aside, [git flavored markdown][gitmd] uses three or more tildes for fenced
code blocks. Since Madoko uses tildes for custom code blocks this cannot be
used and Madoko only supports the more popular back-ticks (```` ``` ````)
for fenced code blocks.

[gitmd]: https://help.github.com/articles/github-flavored-markdown

Custom blocks work especially well with metadata rules (see Section [#sec-rules])
where we can define attributes that get applied to every occurrence of a 
custom block. For example, we could define the metadata rule:

	~Slanted:  font-style=oblique 

and then every occurrence of a `Slanted` custom block would be typeset in a
slanted font.
~~ Sample
~ Slanted
Here is my slanted custom block
~
~~

The "number-of-tildes" rule to delimit custom blocks is convenient and works
fine  when nesting a small number of custom blocks, but for long  blocks or
deep nesting, this can easily lead to confusion. To alleviate this, a custom
block can also start with one or more tildes, followed by `Begin` _blockname_.
Such block continues until a corresponding number of tildes is found followed
by `End` _blockname_.  It is recommended to use this form of blocks for
example in  [metadata rules][#sec-rules]

~~ Sample
~ Begin Slanted
~ Begin Note
Here is a slanted note.
~ End Note
~ End Slanted
~~

### Predefined custom blocks  { #sec-predef-custom }

Madoko defines quite a few common custom blocks.

* `Figure`: This is used to define figures (see Section [#sec-figure]. 
	Recognizes the following attributes:
	- `caption=`_caption_: specify the caption of a figure.
	- `.wide`: if the class `wide` is set, the figure will span the width of a page 
		in a two-column format (used in LaTeX).
	- `page-align=`(`top`|`bottom`|`here`): specify the alignment of the figure in a page 
		(used for LaTeX output).

* `Equation`: Specify mathematical equations. See Section [#sec-math] for its usage.

* `Bibitem`, `Bibliography`: Used for writing bibliography entries by hand. See Section [#sec-bib] 
	for more information.
* `Note`, `Remark`, `Proof`: Used for notes, remarks, and proofs.
* `Abstract`: Defines the abstract of an article.
* `Framed`: A block with a solid border. Use the `tight` attribute to suppress a paragraph
	block around its content.
* `Center`: A block that centers its contents horizontally on the page. 
* `TexRaw`: A block for raw TeX content that is passed directly to LaTeX.
* `HtmlRaw`: A block with raw HTML content that is pasted directly into the HTML output.
* `TexOnly`: A markdown block that is only processed for LaTeX output (and not shown in HTML output).
* `HtmlOnly`: A markdown block that is only processed for Html output (and no shown in LaTeX output).
* `MathPre`: A block with preformatted math (Section [#sec-mathpre]).
* `MathDefs`: A block with LaTeX math definitions (Section [#sec-mathdefs]).
*   `Theorem`, `Lemma`, `Proposition`, `Corollary`, `Example`, `Definition`: Each of these blocks
	is individually numbered and starts with the block name in bold. For example:
	~~ Sample
	~ Lemma 	{#LeftCosetsDisjoint}
	Let $H$ be a subgroup of a group $G$, and let $x$ and 
	$y$ be elements of $G$.  Suppose that $xH \cap yH$ is 
	non-empty. Then $xH = yH$.
	~
	~ Proof
	Let $z$ be some element of $xH \cap yH$.  Then $z = xa$
	for some $a \in H$, and $z = yb$ for some $b \in H$.
	If $h$ is any element of $H$ then $ah \in H$ and
	$a^{-1}h \in H$, since $H$ is a subgroup of $G$.
	But $zh = x(ah)$ and $xh = z(a^{-1}h)$ for all 
	$h \in H$.
	Therefore $zH \subset xH$ and $xH \subset zH$, and thus
	$xH = zH$.  Similarly $yH = zH$, and thus $xH = yH$,
	as required. This concludes the proof of 
	Lemma [#LeftCosetsDisjoint]. [&#9633;]{float=right}
	~
	~~ 
Of course, each of the predefined blocks can be customized further using attributes and rules.
For example, by including the following metadata rule, we can typeset proofs with _Proof_ in
an italic style instead of bold:
```
~Proof: before="[_Proof_. ]{.proof-before}"
```

# Syntax: Metadata and Styling

## Metadata  		{ #sec-metadata }

Similar to [multimarkdown], a document can begin with a special metadata
section that contains meta information like the document title, the author,
etc. Moreover, this section can contain attribute rules to globally apply
attributes to certain elements, much like CSS rules.

Metadata must come immediately as the first thing in a document, and consists
of keys followed by a colon and then the key value. A key value can span 
multiple lines by indenting, and you can leave blank lines between different keys.

	Title       : An overview of Madoko
	Author      : Daan Leijen
	Affiliation : Microsoft Research
	Email       : daan@microsoft.com
	Heading Base: 2
	MathJax     : True

### Special metadata keys

Any metadata key and value can be given (and referred to using 
[hash names][#sec-hashname]),  but certain keys have special meaning to Madoko.

* `Title`: The title of the document. For example, in HTML output it
	determines the `<title>` element. It is also used by the special `[TITLE]`
	element (Section [#sec-special]).

* `Subtitle`: An optional subtitle.

* `Author`, `Affiliation`, `Email`: the author name, affiliation, and
	email. There can be  multiple authors. The author info is also used by the
	`[TITLE]` element to generate a proper document title header.

* `Toc depth` (=3): The maximum depth of headings that are included in the
	table of contents (Section [#sec-toc]).	

* `Heading depth` (=3): The maximum depth of headings that are numbered (Section [#sec-numbering]).
	Set it to zero to suppress numbering of headings completely.

* `Heading base` (=1): Usually, a top heading (`# heading`) maps to a `<h1>` or
	`\chapter` element in HTML and LaTeX respectively. By increasing the `Heading Base` you
	can change this mapping. For example, by using:
	```
	Heading Base: 2
	```
	the top headings will map to `<h2>` or `\section` elements instead.

* `Bib` or `Bibliography`: Specify a bibliography (`.bib`) file to be used by
	the BibTeX tool to generate a list of references (see Section [#sec-bib]).
	```
	Bib: ../mybibliography.bib
	``` 
* `Bib Style` or `Biblio Style` (=plain): Specify a BibTeX style that is used to format the list of 
	references. See Section [#sec-bibstyle] for more information.
	```
	Bib Style: plainnat
	```
* `Cite Style` (=numeric): Specify the citation style used for citations,
	_natural_, _textual, _super_, or _numeric_. See Section [#sec-cite] for more 
	information.

* `Cite All` (=false): Set to `True` to cite everything in the included bibliography files.

* `BibTex` (=bibtex): The command to run the BibTeX tool. Set it to `false` to suppress
	running BibTeX (for example, where writing bibliography entries by hand 
	(see Section [#sec-custom-bib]))

* `PdfLatex` (=pdflatex): The command used to run the pdfLaTeX program when the `--pdf`
	command line flag is present. Can be used to set a different LaTeX engine for
	example when using direct [unicode characters][#sec-unicode-latex].

The following keys are not used as this moment but have a standard meaning:

* `Copyright`: Copyright information.
* `License`: License for this document.
* `Keywords`: A list of document keywords.
* `Comment`: General comments.
* `Date`: Date the document was written.
* `Revision`: Revision of the document.
* `Address`: Address of an author.
* `Phone`: Phone number of an author.

### HTML keys

Some keys are only interpreted for HTML output:

* `Css`: Specify a CSS file that needs to be included in HTML output. There can
	be many CSS keys present.
	```
	Css: lib/main.css
	Css: http://foo.com/bar.css
	Css: http://fonts.googleapis.com/css?family=Open+Sans
	```
	Use `Css: clear` to clear the list of CSS files. This can be used for example
	to not include the default `madoko.css` style file.

* `Script`: Specify a Javascript file that needs to be included in the HTML output
	via a `<script>` tag. There can be many script keys present.
	```
	Script: lib/main.js
	```

* `HTML Header`: The value is included literally in the 
	`<head>` section of the HTML document.

* {#item-math} `Math Mode` (=`static`): The mathematics rendering mode: `static` or `dynamic`.
  In static mode, you can use the following keys to fine-tune the rendering:
	* `Math Dir:` _dir_ (=`math`): The relative directory where Madoko
		stores the images for the math formulas. All images can also be embedded
		in the web page if you set `Math Embed` high enough.
	* `Math Dpi:` _dpi_ (=`300`): The resolution at which the images are rendered.
		The default is a fairly high resolution. Decrease it to make the
		generated images smaller. Use the `-vv` flag to see the sizes of
		all the images generated for formulas.
	* `Math Scale:` _scale_ (=`108`): Scaling in percentage used for all math. The default looks 
		quite good for most fonts, but you may want to change it depending
		on the main font used.
	* `Math Embed:`_size_ (=`1`): Limit in kilobytes at which images are embedded
		in the HTML page instead of separate `.png` images. Set it to `0`
		to never embed an image, and high enough to always embed.
	* `Latex:` _cmd_ (=`latex`): The command used to invoke LaTeX when rendering
		math.
	* `Dvipng:` _cmd_ (=`dvipng`): The command used to generate `.png` images
		from the `.dvi` file generated by LaTeX.

  The following keys are used when math mode is dynamic:

	* `MathJax` (=false): Set this key to the path of your MathJaX script.
		Set this key to `True` to include the standard secure script
		to the latest MathJaX installation on the [CDN network][mathjax-cdn].
		```
		MathJax: True	
		```	
	* `MathJax Ext`: requires that the `MathJax` is key is set. Adds a MathJaX
	 	extension to the loaded scripts. See Section [#sec-mathext] for more 
	 	information.


[mathjax-cdn]: http://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn

### LaTeX keys

For LaTeX output, the following keys are relevant:

* `Document Class` or `Doc Class` (=book): Specify the LaTeX document class. Can be 
   prefixed with its options using square brackets:

		Document Class: [9pt]article

* `Package`: Specify a LaTeX package that is included via `\usepackage`.
	The package name can be prefixed with its options using square brackets.

		Package: fancyhdr
		Package: [colorlinks=true,linkcolor=DarkBlue]hyperref

	If the package name ends with `.tex` and has no options, it will be
	included using the `\input` command instead.
	You can clear the package list using `Package: clear`. This can be
	used to not include the default `madoko.sty` package.

	Sometimes, a package does not work when typesetting mathematics
	in plain LaTeX. This can happen for example if the rest of the document
	needs a package that only loads in some other latex engine, like XeLaTeX.
	In that case, you can exclude the package when typesetting math by 
	ending the name with a star:

		Package: fontspec*

* `Tex Header`: The value is included literally before
	the `\begin{document}` command of the LaTeX output.	

### Hash names		{ #sec-hashname }

An extension of Madoko is the use of _hash names_. If Madoko finds a name
prefixed by a hash (#) character, it looks up the name. If there is a block
element with that _id_, the hash name is replaced by the _label_ value of that block
(see Section [#sec-ids-labels]). If there is no block with that identity, 
Madoko looks if there is a metadata value with that name, and replaces the
hash name with its value: 
~ Sample
The title of this document is "#title".
And this section has label #sec-hashname.
~
A hash-name can consist of letters, underscores, minus signs, and digits.
If you want to follow the name directly with one of such symbols, the
hash name can be terminated with a semi-colon (or empty escape sequence `\/`).
Note that if values contain themselves hash names, these are expanded
recursively (up to a certain limit) which can provide a powerful abstraction
mechanism. For example, if we define a metadata value `Title2`:

	Title2: (#Title,#Title)

then the hashname `#Title2` expands to "#Title2".

Hash names are mostly used to reference other elements in a document.
For example:

~ Sample
See Section [#sec-hashname] for more information.
~

Section [#sec-ids-labels] explains the use of hash names for identities and
referencing in more detail.

If hash names are used inside [attributes][#sec-attr], Madoko first
looks for the name as one of the attribute key values. For example, you can
use names like `#id`, `#class`, and `#label`. Two special available keys are `#nl` 
which always expands to a newline character, and `#source` that expands to the
literal source of a block element. For some examples of their usage, see 
Sections [#sec-replace] and [#sec-reset].

### Metadata rules			{ #sec-rules }

Often, we need to apply specific attributes and formatting to certain elements
or custom blocks. This can be done using _metadata rules_. These rules
function much like regular CSS rules except that they are quite a bit more
limited. A rule starts with a tilde (`~`), dot (`.`), or hash character (`#`)
for matching a custom block, class name, or id respectively. The value of
a rule are attributes that get applied to any matching block.
Here are some examples:
	
	~Blockquote : font-style=oblique
	.bold       : font-weight=bold
	#myblock    : border-width=1px border-style=solid

This would typeset a block quotes in an oblique font, any block with 
a `bold` class in bold, and the block with the `myblock` id with a solid border.
You can also use a comma separated list of matches that apply to all.
For example, we can give all code, inline or as a block, the class `mycode` as:

	~Pre,~Code: .mycode


## Special elements { #sec-special }

Madoko supports some special block elements that get expanded automatically.

* `[TITLE]`: Expands to a title element generated from the metadata keys _title_,
	_subtitle_, and author info (_author_, _affiliation_, and _email_).

* `[TOC]`, `[TOC=`_name_`]`: Expands to a table of contents. See also Section [#sec-toc].

* `[FOOTNOTES]`: Expands to the defined footnotes. If there are footnotes and this element
	is not present, the footnotes are automatically included at the end of the document.

* `[INCLUDE=`_file_`]`: Expands to the contents of _file_. Include elements are
	processed before any other processing happens and can for example be used to
	include meta data elements.

* `[BIB]`: Includes the bibliography entry file (`.bbl`) generated by BibTex. Internally
	expands to:
		~ TeX 
		[INCLUDE="myfile.bbl"]		
		~		
	See also Section [#sec-bib].

## Attributes and Formatting		{ #sec-attr }

An essential addition of Madoko is good support for attributes. The syntax is
similar to attribute definitions in [Kramdown], [Pandoc], and [MultiMarkdown],
and denoted between curly braces:

	{ .class #id key=value }

For most block elements, like lists, paragraphs, block quotes, etc, you can 
write attributes on the line directly following the block. 

~ Sample
This is a paragraph in small-caps.
{ font-variant=small-caps} 

* This is a 'mylist' 
* in italics
{ .mylist font-style="italic" }
~

For fenced code blocks, custom blocks, and headers, the attributes are specified on the first 
line.

~ Sample
### This header is not bold    { font-weight=normal }
```javascript   { .prettyprint .linenums  }
function one { 
	return "a one"; 
}
``` 
~ 

For inline elements, you can follow links, images, code, and bracketed text (between
`[` and `]`) with attributes. Bracketed text with attributes become a `<span>` in 
the HTML backend.
It is of course recommended to put attributes when possible in 
link or image definitions themselves:

~ Sample
Here is an ![butterfly] image. 
With [bold]{font-weight=bold} text, and even the
T[E]{vertical-align=-0.5ex margin-left=-0.25ex \
	 margin-right=-0.25ex}X
logo.

[butterfly]: butterfly.png { width=100px vertical-align=top }
~

Note that inside attributes, and also metadata values,
a backslash followed by a newline acts as a line joiner and removes the newline
and the following whitespace before processing the attributes. This is convenient
when defining long strings inside attributes. For example, if a figure has a long
caption, we could write it as:

	~ Figure { #myfigure \
			   caption="Here is a really \
	       		        long caption." }
	...
	~

To get a literal line break inside an attribute string, use the hashname `#nl` instead.

### Recognized formatting attributes  { #sec-css }

Attributes that are not special to Madoko (as described in Section [#sec-specialattr]),
are passed as CSS style attributes in the HTML backend. For the LaTeX backend,
Madoko includes special style files (`css.sty` and `madoko.sty`) that process
many CSS formatting commands (and ignores all others). Currently formatting
commands that are recognized are:

* `display=`(`block`|`inline`|`block-inline`|`hidden`)
* `margin=`(`auto`|_length_)
* `margin-left`,`margin-right`,`margin-bottom`,`margin-top`
* `padding=`(`auto`|_length_)
* `padding-left`,`padding-right`,`padding-bottom`,`padding-top`
* `width=`_length_
* `height=`_length_
* `vertical-align=`(`top`|`middle`|`bottom`|_length_)
* `border-style=`(`none`|`solid`|`dotted`)
* `border-style-left`, `border-style-right`.
* `border-style-top`, `border-style-bottom`.
* `border-width=`_length_
* `border-color=`_color_
* `text-align=`(`center`|`right`|`left`|`justify`)
* `text-indent=`_length_
* `line-height=`_length_
* `font-style=`(`italic`|`oblique`|`normal`)
* `font-variant=`(`small-caps`|`normal`)
* `font-weight=`(`bold`|`normal`)
* `font-size=`(`xx-small`|`x-small`|`small`|`medium`|`large`|`x-large`|`xx-large`)
* `font-family=`(`monospace`|`serif`|`sans-serif`|`normal`)
* `color=`_color_
* `penalty=`_number_
* `page-align=`(`top`|`bottom`|`here`). Used for `Figure` custom blocks 
	(see Section [#sec-predef-custom]).

Note that the syntax is quite a bit more restrictive than in in plain CSS.
For example, we cannot just say:

	{ border="solid 1px" }

as in CSS, but need to state each property separately as:

	{ border-style=solid border-width=1px }

Also, _length_\/s must use common units, such as `10ex`, `5em`, `4px`, `2cm`,
or `-6pt` for example. Percentages only work for widths.

A _color_ must be a named color at this point and known to LaTeX. 
A list of recognized colors can be found [here](http://www.latextemplates.com/svgnames-colors).
However, you can always use a `TeXRaw` block to define a color name explicitly:

	~ TeXRaw
	\definecolor{ivory}{rgb}{1,1,0.941}
	~

Moreover, it is sometimes hard to emulate a complex CSS layout in LaTeX so some
particular combinations may not work as expected in LaTeX. We strive to make
it work seamlessly though so please [report any issues][issues].
Nevertheless, the above formatting commands should suffice in most situations
and we can program already many fancy examples:

~ Sample
[**Aaaa[a]{vertical-align=-0.3ex}
[aa]{vertical-align=-0.7ex}
[r]{vertical-align=-1.4ex}
[g]{vertical-align=-2.5ex}
[h]{vertical-align=-5ex}**]{font-size=large height=0pt }
he shouted but not even the next
one in line noticed that something
terrible had happened to him.
{width=18em border-style=solid border-width=1px padding=1ex }
~


## Numbering	{ #sec-numbering }

For larger documents, numbering sections, figures, tables, images, etc. is
quite important and Madoko supports this well. By default, Madoko will number
headers, figures, and equations. Numbering for headers is by default up to 3
levels, but it can be set for the document using the `Heading depth` meta
variable. If it is set to zero, it suppresses numbering for headings completely:

	Heading Depth: 0 


### Advanced: Custom numbering

The numbering can be completely customized though. Numbers are introduced
using `@`_name_ syntax in attributes. When such counter name occurs, it is
automatically incremented. If the value of a _label_ contains a counter name,
it is replaced by its current value. For example, the default attributes for
equations contain[^fn-autocounter]:

	{ @equation label="(@equation)" }

This automatically will increment the `@equation` counter at each occurrence of
an equation block element, and set its label to the current value surrounded by
parenthesis. Similarly, the default label for main sections is defined as:

	{ @h1 label="@h1" }

Of course, for headers we like to display the label by default in front of the
header text. This can be done using the [before][#sec-replace] attribute where
we use the [`#label`][#sec-hashname] key to insert the value of the label. So,
the full definition for the main sections is:

	{ @h1 label="@h1" before="#label.\ \ \ " }


### Advanced: Reset counters { #sec-reset }

If a counter has a dash in its name, of the form `@`_prefix_`-name`, then the
counter will be reset on every increment of the counter _prefix_. For example,
the counter for subsections is reset on every new section (using [metadata
rules][#sec-rules]):

	~h2: @h1-h2 label="@h1.@h1-h2" before="#label.\ \ \ "

Similarly, a counter like `@h1-h2-h3` would reset on every increment of
counter `@h1` or `@h1-h2`.

### Advanced: Display format 

The counters above are displayed as numbers but sometimes we would like to
number using other formats. When you assign a single letter to a counter, it
will continue counting using letters. This is nice for example when starting
the appendix where each section is generally numbered using letters:

	# Appendix (not numbered at all)   {-}
	
	# Section one of the appendix { @h1="A" }
	This section will be numbered as 'A'

	# Another appendix section
	This section will be numbered as 'B'

The display format of a counter can also be set independently of setting its
value. Currently, Madoko supports `arabic`, `upper-case`, and `lower-case`
display. Assigning a single letter, like `@h1="A"` in the previous example is
just a shorthand for:

	{ @h1=upper-case @h1=1 }

As a final example, suppose we would like to count figures using  lower-case
letters and per section. We can do this by defining the default attributes for
figures as a metadata rule:

	~Figure: @h1-figure=lower-case label="@h1\/-@h1-figure" 

The label definition here displays figure labels of the form `2-b` for example
(where we used the empty [escape sequence][#sec-escapes] `\/` to prevent the
counter name `@h1`  being read as `@h1-`). Note that because this is a
metadata rule, we could not  use the assignment `@h1-figure="a"` here, or
otherwise every figure would get numbered as `a`. In this case we just want to
set the display mode here and not a specific value.

[^fn-autocounter]: 
	Actually, Madoko automatically creates and increments counters for any block
	element using the same name as that block element. Therefore, in a [metadata
	rule][#sec-rules] we should not add the `@equation` counter explicitly since
	it  is already done automatically by Madoko for any `Equation` block. If it is
	added, it will effectively increment the `@equation` counter twice.



## Styling the document { #sec-styling }

Writing Madoko documents is clearly about content: the main advantage of using
a markdown format is that it allows the writer to concentrate on prose and
content instead of formatting. However, in the final stages it is desirable to
_style_ a document to make it look good. This section describes some tricks
and tips that can help doing this well. 

The main tool for styling in Madoko are class attributes and metadata rules.
For example, through a metadata rule, we can style all code blocks in a 
smaller font, and all content that has a `.slanted` class in a slanted font:

	~Pre    : font-size=small
	.Slanted: font-style=oblique

Such rules are nice since, just like CSS, they allow us to separate styling from
the content, where the main document contains as few style elements as
possible. We already saw the `Sample` custom block example (Section 
[#sec-replace]) used in this document: the main document just contains sample
fragments in `Sample` blocks while the styling is done completely through
metadata rules.

For a full list of CSS formatting attributes that are supported in both 
HTML and LaTex, see Section [#sec-css].

### Styling in CSS 

Sometimes though, we only want to apply certain styling to just HTML.
For HTML, styling through classes works best: we can simply write some CSS
(and include it through the `Css` metadata or directly within `<style>`
tags.). For example,
	
	<style>
	.slanted { font-style: oblique; font-family: Cambria }
	</style>

For styling in LaTeX, or when certain CSS keys are not yet processed in
LaTeX, see Appendix [#sec-latex-style].


## Advanced: Replacement { #sec-replace }

Madoko has three attributes that can transform the content of block or inline
element, namely `before`, `after`, and `replace`. The `before` and `after`
elements just add content before and after:

~~ Sample
~ Myblock { before="*Myblock*: " after="." }
the content
~
~~

The `replace` attribute replaces the entire content with its value. You can
have multiple replacers and they are all applied in order. The replacers can
be cleared using the special `clear` value. Finally, all replacers can contain
hash names (Section [#sec-hashname]) which are expanded. Useful hash names are
`#source` which expands to the current content of the block (possibly having
already some replacers applied), and `#nl` which expands to a newline
character. In particular, `before` and `after` are defined in terms of
`replace`, where `before=`_value_  is just syntactic sugar for
`replace=`_value_`\/#source` and similarly for `after`.

As an advanced example, for this document I defined a metadata rule for  the
`Sample` custom block that replaces its content by both a code block and a
regular markdown block. In a simplified form, it is defined as:

	~Sample: 
	  replace="~ Begin SampleBlock#nl;\
                 ````#nl#source#nl````nl;\
                 ---- #nl#source#nl;\
               ~ End SampleBlock"



### Regular expression replacement	{ #sec-regex }

A `replace` attribute can also define a general [regular expression][regex] replacement
of the form `/`_regex_`/`_replacer_`/`(`g`|`i`|`m`|`c`)?. The regular expression _regex_
is matched against the content, and a match is replaced by _replacer_. The options are:

* `g`: instead of just the first match, it will globally replace all matches found in the content.
* `i`: use case-insensitive matching.
* `m`: do a multi-line match where `^` and `$` match the beginning and end of each line respectively
	instead of just the start and end of the content.
* `c`: do case conversion; enlarges valid escape characters with one of `luLUE` which can be
	used to do case conversion, see the next section for more information.

[regex]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

Inside the _replacer_ we can use the following escape sequences:

* `\`_digit_: gets replaced by the _digit_ capture group in _regex_.
* `\/`: becomes a forward slash.
* `\\`: becomes a single backward slash.

For example, here is an example where we replace `<`quoted`>` text by 
single guillemet quotes:

~~ Sample
~ { replace="/<(.*?)>/&lsaquo;\1&rsaquo;/g" }
Here is <quoted> text.
~
~~

#### Case conversion {#sec-case}

When we pass the `c` flag, we can also use special case conversion escape sequences
in the _replacer_ expression:

* `\U` or `\L` transform the following text up to the next `\E` (or the end of the
	replacement) to upper- or lower-case respectively.
* `\u` and `\l` replace the following character to upper- or lower-case.

~~ Sample
~ { replace="/(\w+)/\u\1/gc" }
all words to title-case.
~
~~

#### Mapping strings { #sec-map }

The `replace` attribute can also perform a _mapping_ when it
has the form: 

> `//` _regex~1~_ `/` _repl~1~_ `//` ... `//` _regex~n~_ `/` _repl~n~_ `//(`g`|`i`|`m`|`c`)`.

A mapping matches against the regular expression `(`_regex~1~_`)|`...`|(`_regex~n~_`)`,
and when it finds a match on some group _i_, it applies the replacer _repl~i~_. 
The replacement expression can use capture groups as usual.

For example, we could device a _greek_ or _hiragana_ mode replacement. Here is a simplified
example:

~~ Sample
~ Greek { replace="//a/&alpha;//d/&delta;//n/&nu;//g" }
greek daan.
~
~ Hiragana {replace="//ko/&#12371;//ni/&#12395;//\
	        \\(.)/\1//chi/&#12385;//ha/&#12399;//\
	        n/&#12435;//g"}
konnichiha is Japa\nese.
~
~~

Note that the previous example generally needs some extra work
in LaTeX to display correctly since Japanese characters are not
in the standard font. See Appendix [#sec-unicode] for more information. 

### Advanced recursion and replacement

As more advanced example of recursion and replacement, we can actually
calculate  [fibonacci numbers][fib]. In the following sample, _n_ number of
`x` characters are replaced by _fib(n)_ `y` characters: 

~~ Sample 
~ Fib 
xxxxx
~  
~~

This is done through the following metadata rule:

	~Fib: replace='/^x?$/y/' 
		  replace='/xx(x*)/~Fib#nl\/x\1#nl~#nl~Fib#nl\1\/#nl~/' 
		  notag tight 

The first replacer will replace a single optional `x` with a `y`.  The second
one matches 2 or more `x`'s, and replaces these recursively by two  new `Fib`
blocks: one with _n-1_ and one with _n-2_ `x` characters. These blocks will
get processed now recursively. Finally, by using the `notag` attribute we
suppress the inclusion of many `div` elements in the HTML, while the `tight`
attribute suppresses the addition of paragraph elements.

This example shows the replacement facility of Madoko is quite powerful.
It is even possible to define a generic [SKI combinator expander][ski] which
makes Madoko's replacement mechanism (almost) Turing complete[^turing].

[fib]: http://en.wikipedia.org/wiki/Fibonacci_number
[ski]: http://madoko.codeplex.com/SourceControl/latest#test/new/extra_ski.text
[^turing]: Almost, since Madoko expands only up to a certain limit and since
	regular expressions cannot express arbitrary nesting levels.

# References 	{ #sec-references } 
[BIB]

# Appendix	{ @H1="A" }

## Command line options { #sec-commandline	}

Generally Madoko is invoked on the command line as:

* `madoko` \[_options_] _files_

where the options can consist of:

| short |         long         |                  description                   |
|-------|----------------------|------------------------------------------------|
|       | `--version`          | Display version information.                   |
| `-v`  | `--verbose`          | Be more verbose.                               |
|       | `--odir=`_dir_       | Write output files to the specified directory. |
|       | `--xmp`              | Only process markdown between `<xmp>` tags.    |
|       | `--tex`              | Output a LaTeX file too.                       |
|       | `--pdf`              | Generate a PDF file (implies `--tex`).         |
| `-f`  | `--full`             | Generate a full html/latex document.           |
|       | `--sanitize`         | Always escape or suppress user defined html.   |
|       | `--pedantic`         | Pedantic mode.                                 |
|       | `--bench`            | For benchmarking: turn off numbering,  etc.    |
|       | `--installdir=`_dir_ | Set installation directory explicitly.         |
|       | `--bibtex=`_cmd_     | command to run bibtex.                         |
|       | `--pdflatex=`_cmd_   | command to run pdflatex.                       |
|       | `--latex=`_cmd_      | command to run latex (for static math).        |
|       | `--dvipng=`_cmd_     | command to run dvipng (for static math).       |
|       |                      |                                                |

All the boolean flags can be negated by prefixing them with `no`, for example
to suppress LaTeX output, use `--notex`.

The verbose flag (`-v`) can be repeated to become more verbose. For example, 
by using `-vv` LaTeX warnings and the size of math images are displayed.

Normally, Madoko writes the output files to the same directory as where the
input file resides but you can override this with the `--odir` option.  The
HTML output for a file _file_`.mdk` consists of _file_`.html` and
`madoko.css`. The latter contains standard styling for Madoko and is necessary
for example to display lines in tables correctly. For LaTeX output (`--tex`),
Madoko also emits _file_`.tex` and two style files, `css.sty` and
`madoko.sty`, which contain necessary commands to  process the Madoko output
in LaTeX.

The `--xmp` option instructs Madoko to only process content between
`<xmp>` and `</xmp>` tags. This can be useful if the main body of your document is
in HTML and only some parts are written in Madoko. 

Finally, the `--full` flag forces Madoko to generate a _full_ document. A full
document is self sufficient and contains for example for HTML proper `<head>`
and `<body>` elements instead of just the markup for the content. Similarly,
for LaTeX, a full document contains an `\documentclass`,  `\begin{document}`
and necessary `\usepackage` commands. The `--full` flag is usually not
necessary since Madoko will generate a full document whenever one of the
following [metadata][#sec-metadata] keys is present in the document: `Title`,
`Css`, `Script`, `Package`, `HTML Header` or `Tex Header`. In most stand-alone
documents this is the case.


## Advanced: Customizing citations { #sec-custom-cite }

For each citation, you can actually change how it is displayed by setting
the `cite-style` attribute on the citations:

~ Sample
First a natural citation [@Goo93]{cite-style=natural},
then a super one[@Goo93]{cite-style=super}.
~

Moreover, we can customize the formatting of citations by specifying 
braces etc. The general format of a citation style is: 

> _base_ \[`:`(`sort`|`nosort`)\] \[`:`_open_`,`_close_`,`_sep_ \[`,`_aysep_] \[`,` _yysep_]]

where _base_ is one of `natural`, `numeric`, `textual`, or `super`,
and the values _open_ to _yysep_ are double quoted strings:

* _open_: the opening brace.
* _close_: the closing brace.
* _sep_: separator between citations.
* _aysep_: Optional separator between authors and years. Equal to _sep_ by default.
* _yysep_: Optional separator between years with a common author. Equal to _aysep_ by default.

For example:

~ Sample
Switch to a compact bold numeric style
[@Goo93;@FBerg04]{cite-style='numeric:"[**","**]","**;**"'}
or an unsorted super style 
[@Lamport:Latex;@Knuth:Tex]{cite-style=super:nosort}
~

Clearly, one should usually only do this for the `Cite Style` metadata key,
and not sprinkle this kind of formatting through your prose.


## Advanced: Not using BibTeX {#sec-custom-bib}

If necessary, it is possible to completely circumvent using BibTeX and write
your bibliograpy entries by hand. First, we need to ensure Madoko will not 
run the BibTeX tool for us:

	BibTeX: False

Next, we write our bibliography entries inside a `Bibliography` block: 

	~ Bibliography { caption="00" }
	...
	~

where the `caption` is only used in LaTeX output and should be a string that
is the widest label necessary for the numeric style. Inside the bibliography
block, you can put `Bibitem` blocks for each bibliography entry. For example:

	~~ Bibitem { #WadlerThiemann03  }
	Philip Wadler and Peter Thiemann.
	_The marriage of effects and monads._
	ACM Trans. Comput. Logic, 4(1):1--32, 2003.
	~~

The above example is for numeric style citations.
For author-year citations, the entry should have an explicit `cite-label`:

	~~ Bibitem { #remy cite-label='R&eacute;my(1993)' }
	Didier R&eacute;my. 
	_Type inference for records in a natural extension of ML._
	In Carl\ A. Gunter and John\ C. Mitchell, editors, 
	Theoretical Aspects Of Object-Oriented Programming. 
	Types, Semantics and Language Design. MIT Press, 1993.
	~~

	~~ Bibitem { id='nielson:polyeffect' \
	cite-label='Nielson et\ al.(1997)Nielson, Nielson, and Amtoft'}
	Hanne\ Riis Nielson, Flemming Nielson, and Torben Amtoft.
	_Polymorphic subtyping for effect analysis: 
	The static semantics._
	In Selected papers from the 5th LOMAPS Workshop on 
	Analysis and Verification of Multiple-Agent Languages, 
	pages 141--171, 1997. ISBN 3-540-62503-8.
	~~

A `cite-label` should have the form _authors_`(`_year_`)`_longauthors_,
where the _longauthors_ are optional. Madoko parses these labels to
correctly format citations. 


## Advanced: packages in dynamic math mode { #sec-mathext }

In dynamic math mode packages are not loaded since MathJax cannot handle arbitrary
LaTeX packages. We need a special MathJax 'extension'. For example,
the [amscd][amscd] package is available as `AMScd` and we can use it in MathJax as:

	MathJax Ext: AMScd

Another package that is available in both Latex and MathJax is 
the [`mhchem`][mhchem] package:

	MathJax Ext: mhchem
	Package    : mhchem

which can be used to easily draw chemical formulas:

~~ Sample
~ Equation
\ce{C6H5-CHO}\quad
\ce{$A$ ->[\ce{+H2O}] $B$}\quad
\ce{SO4^2- + Ba^2+ -> BaSO4 v}
~
~~

In the previous examples, it may seem superfluous to specify both a MathJaX extension
and LaTeX package but not in all cases the names or package functionality happens to
be exactly the same.


## Advanced styling in LaTeX  { #sec-latex-style }

Sometimes we need to style LaTeX code specially, or handle cases where
the CSS elements are not yet supported by Madoko (as described in 
Section [#sec-css]).

For the LaTeX backend, all attributes are passed to the LaTeX commands,
and there are generic hooks to apply LaTeX formatting. For example, we
can include the following LaTeX commands in a `TexRaw` section to make
all `Slanted` custom blocks use a slanted font:

	~ TexRaw
	\cssClassRule{slanted}{font-style=oblique}
	~

The following commands are quite useful for this:

* `\cssClassRule{`_class_`}{`_attributes_`}`: adds _attributes_ to any command
	that contains _class_.
* `\cssClassRuleEnv{`_class_`}{`_env_`}`: encloses any block with class _class_ 
	in the LaTeX environment _env_ (after margins and padding). 
* `\cssClassRuleCmd{`_class_`}{\`_cmd_`}`: applies any content with class _class_ 
	to the single argument LaTeX command `\`_cmd_ (after margins and padding).
* `\cssClassRuleDoBefore{`_class_`}{`_cmds_`}`: execute commands _cmds_ before 
	formatting the content for any block that contains the class _class_ (but
	after margins and padding).
* `\cssClassRuleDoAfter{`_class_`}{`_cmds_`}`: execute commands _cmds_ after
	formatting the content for any block that contains the class _class_.
* `\cssClassRuleDo{`_class_`}{`_cmds_`}`: execute commands _cmds_ when processing
	the attributes. These _cmds_ can contain:
	* `\cssDoBefore{`_cmds_`}`: executes _cmds_ before formatting the contents.
	* `\cssDoAfter{`_cmds_`}`: execute _cmds_ after formatting the contents.
	* `\cssDoEnv{`_env_`}`: enclose the formatting in _env_.
* `\cssIfHasClass{`_class_`}{`_then_`}{`_else_`}`: This command is can be used
	inside _cmds_ of
	the `\cssClassDo`(`Before`|`After`|) commands. If this element has _class_
	then execute the _then_ part, else the _else_ part.
* `\cssNewKey{css}{`_attrname_`}{\css`_cmdname_`}{`_default_`}`: Define a new
	attribute _attrname_. When present its value gets bound to `\css`_cmdname_.
	The _default_ value is optional.
* `\cssNewLengthKey{css}{`_attrname_`}{\css`_cmdname_`}`: Define a new
	attribute _attrname_ that contains a length. When present its value gets
	bound to `\css`_cmdname_. The _default_ value is `0pt`.
* `\cssElemRule{`_elem_`}{`_attributes_`}`: adds _attributes_ to any custom block 
	_elem_. 
* `\cssElemRule`(`Env`|`Cmd`|`Do`|`DoBefore`|`DoAfter`). As the `Class` variants
	but for elements. In contrast to the `Class` rules, these variants will apply
	commands before margins and padding is applied. If this is not wanted, use the
	`Class` variant instead since those also match on element names.

Inside rules, you can also access most CSS attributes that defined through
`\cssNewKey` or `\cssNewLengthKey`. The attributes are named using camel casing 
with a `css` prefix, i.e. `\cssCamelCasing`,
where `text-indent` is stored in `\cssTextIndent`, or `border-style-left` as
`\cssBorderStyleLeft`.

As an advanced example, here is how `madoko.sty` defines the rules for the 
`Figure` custom block:

```latex  { language=TeX }
\cssNewKey{css}{page-align}{\cssPageAlign}{}
\cssElemRuleDo{figure}{%
  \eifstrequal{\cssPageAlign}{top}%
    {\def\@pagealign{t}}%
  {\eifstrequal{\cssPageAlign}{bottom}%
    {\def\@pagealign{b}}%
  {\eifstrequal{\cssPageAlign}{here}%
    {\def\@pagealign{h}}%
    {\def\@pagealign{tbp}}}}% default
  \cssIfHasClass{wide}%
    {\cssDoBefore{\@expandafter{\begin{figure*}[}{\@pagealign}]}%
     \cssDoAfter{\end{figure*}}}%
    {\cssDoBefore{\@expandafter{\begin{figure}[}{\@pagealign}]}%
     \cssDoAfter{\end{figure}}}%
}

\newlength{\mdCaptionlen}
\newcommand{\mdCaption}[1]{%
  % center a caption if it is smaller than the line width
  \settowidth{\mdCaptionlen}{#1}%
  \ifnum\mdCaptionlen<\linewidth%
    \parbox{\linewidth}{\noindent\centering #1}%
  \else%
    \parbox{\linewidth}{\noindent #1}%
  \fi%
}
\cssClassRuleCmd{figure-caption}{\mdCaption}
\cssClassRule{figure-caption}{text-align=justify}
```
Where we recall that the standard metadata rules for a `Figure` are:

	~Figure: label='[@figure]{.figure-label}' .align-center 
			 after='#nl********* {.figureline}#nl\
					[[**Figure\ #label.** ]\
					{.caption-before}#caption]\
					{.figure-caption}#nl{notag}#nl'
			 toc=tof toc-line='#label. #caption'

as shown in Appendix [#app-custom]. The sample uses two extra functions from
`css.sty`:

* `\eifstrequal{`_str1_`}{`_str2_`}{`_then_`}{`_else_`}`: expands the
 	content of _str1_ and then compares for equality with _str2_, and
 	executes either the _then_ or _else_ branch. Use `\eeifstrequal` if
 	both string arguments must be expanded.
* `\@expandafter{`_arg1_`}{`_arg2_`}`: first expands _arg2_ and then 
	continues executing _arg1_ (followed by the expansion of _arg2_).
	Used in the previous example to expand the optional argument to 
	the `figure` environment to one of `b`, `h`, or `t`.


## Special attribute keys  { #sec-specialattr}

Some attributes have a special meaning to Madoko. In particular:

* `tight`: Supresses enclosing the first text content in this block as a paragraph.
	This is used for example for a `BibItem` block. 
* `notag`: Supresses the output of a `div` tag (or LaTeX environment) for a custom block.
* `toc`, `toc-line`, `toc-depth`: Used for generating custom table of contents. Used
	for example by headings. See Section [#sec-toc] for more information.
* `before`, `replace`, and `after`: Used to transform the content of the block. See 
	Section [#sec-replace].
* `start=`_num_: Gives the start number for an ordered list (Section [#sec-lists]).
* `target=`_frame_: Gives the HTML frame target for a link. 
* `texelem=`_elem_: Uses _elem_ as the TeX environment instead of the name of the custom
	block.
* `id=`_id_: Sets the _id_ of an element. Usually this is done using a hash name directly
	as `#`_id_.
* `class=`_classes_: Adds to the classes of this element. Usually set using a dot name 
 	as in `.`_class_. If you use `class=clear`, the classes are cleared. Similarly, you
 	can use `.`_class_`=clear` to remove one particular class.
* `label=`_label_: Sets the label of an element. This is used when referencing this block
	as explained in Section [#sec-ids-labels]
* `cite-label=`_label_: Sets the citation label of an `BibItem` block. This is used when 
	referencing a bibliography item as explained in Section [#sec-bib]
* `cite-style=`_style_: Sets the citation style for a citation (Section [#sec-cite]).
* `sticky`: The attributes for this element will stick to apply to all of the same
	elements that follow in the document.
* `-`: clear any attributes that have been set before (usually through metadata rules).
* `input=`_input_. Sets the input mode of this block which determines how the content
	of this block is processed. One of:
	- `pre`: Preformatted code (Section [#sec-code]).
	- `raw`: Raw unprocessed input that is passed directly to the output.
	- `texraw`: Raw TeX code that is passed directly to LaTeX (See [`TeXRaw`][#sec-custom])
	- `htmlraw`: Raw HTML code that is passed directly to the HTML output (See [`HtmlRaw`][#sec-custom])
	- `math`: LaTeX mathematics mode input. This input is usually invoked through an `Equation` 
		block as described in Section [#sec-math].
	- `mathpre`: Preformatted LaTeX mathematics. This input is usually invoked through a `MathPre` block (Section [#sec-mathpre]).
	- `mathdefs`: LaTeX math definitions. This input is usually invoked through a `MathDefs` block (Section [#sec-mathdefs]).
	- `normal`, `markdown`: Regular Madoko markdown input (default).
	- `texonly`: Regular Madoko markdown that is only processed when generating LaTeX output.
		Usually used through the `TexOnly` block (Section [#sec-custom]).
	- `htmlonly`: Regular Madoko markdown that is only processed when generating HTML output.
		Usually used through the `HtmlOnly` block (Section [#sec-custom]).

## Special attribute classes

Some class attributes are treated specially by Madoko. In particular:

* `.para-block`. If a block element has the `.para-block` class, it will
	considered part of the preceding paragraph (and not end that paragraph).
	This is for example done for the `Equation` block since equations are part
	of a paragraph. This improves typography significantly, especially for
	the LaTeX backend. Madoko will also assign the `para-continue` class to the
	paragraph preceding a `.para-block` element.
* `.indent`. This class is automatically added by Madoko to any paragraph that
	follows other paragraphs or `.para-block`s (and is not inside a list). 
	This can be used to switch
	from _block_ mode paragraphs to _indented_ paragraphs using some CSS:
		p.indent { text-indent: 1em }
* `.align-center`, `.align-right`, `.align-left`. These classes align the _content_
	of a block (instead of the block itself) to the center, right, or left.
* `.hidden`. Hides the content of the block.
* `.block`. Treat this as a block element instead of inline content. For example,
	in HTML output this will add a top and bottom margin to the element.
* `.wide`. Used for `Figure` blocks: in a two-column output, this figure will span
	both columns horizontally (see also Section [#sec-predef-custom]).
*  `.free`, `.textual`. These classes are used for typesetting citations (see Section [#sec-cite]).
*  `.long`. Used to signify that a table might span multiple pages so that
	the LaTeX backend can use the `longtable` environment instead of the 
	regular `tabular` environment (which cannot break across pages).
* `.plain`: used for code blocks to use a plain verbatim mode in LaTeX (see Section [#sec-code]).


## Unicode characters { #sec-unicode }

Madoko already recognizes all named html entities and translates them to the
appropiate LaTeX commands (Appendix [#app-entities]). 
If you often need a specific unnamed unicode character, it can be
convenient to define a shorthand for it in the metadata:

	llbracket: &#10214;
	rrbracket: &#10215;

and then use the hash-names instead. For example:

~ Sample 
\/#llbracket;hi#rrbracket;.
~

### Unicode in LaTeX

Unfortunately, in LaTeX these unicode characters are still unknown.
You can define your own definition for it using the
LaTeX `\mdDefineUnicode` command in a `TexRaw` block at the start of the
document. For example:

```latex	{ .prettyprint language=TeX }
~ TeXRaw
\mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\mdDefineUnicode{10215}{\ensuremath{\rrbracket}}
~
```

If no definition is given, LaTeX will work but output the entity as is,
i.e. `&#10214;` for `#llbracket`. Under a unicode aware LaTeX, like [XeLaTeX]
or [LuaLaTeX], it will call `\mdUnicodeChar` which will use the `\char` command
to directly select the glyph from the current font.

### Unicode font selection in LaTeX { #sec-unicode-latex }

The previous examples works fine if only some unicode characters are used, 
but becomes cumbersome if you need many unicode characters, for example,
when writing Japanese or Chinese characters as shown in our previous example
in Section [#sec-map]:
~ Sample
&#12371;&#12435;&#12395;&#12385;&#12399; is Japanese.
~

In this case, declaring all unicode characters by hand for each character
would be too cumbersome. Instead, we are going to redefine `\mdUnicodeChar`
command which is called when a unicode character not declared.

First, we need a unicode aware LaTex, like [XeLaTeX] or [LuaLaTeX] instead of
the usual [pdfLaTeX]. Both of these variants usually come standard in your
LaTeX distribution. You can enable this using:

	Pdf Latex: xelatex

With these LaTeX variants, we can use  the `fontspec`
package, which we included in this document using `Package` metadata:

	Package: fontspec*

Note that we appended a star to the name to exclude it when typesetting
mathematics since `fontspec` fails to load under regular LaTeX.
Next, we redefine the `\mdUnicodeChar` command to select a specific
character (using the `\char` command) from a font that contains Hiragana,
namely `MS Gothic` in  our case. There exist many other fonts too, like
`SimSun`. Consult the XeLaTeX documentation for more information:

	~ TexRaw
	\renewcommand{\mdUnicodeChar}[1]{{\fontspec{MS Gothic}\char#1}}
	~

Using the above magic, we translated this document using XeLaTeX into a PDF file:

* `madoko --pdf -v reference.mdk`

or more explicitly as:

* `madoko --tex -v reference.mdk`
* `xelatex reference.tex`

which shows the Japanese characters as intended.

Instead of using explicit unicode characters, you can also directly
use UTF8 text files with the characters shown directly. For example:

~ Sample
Directly in unicode: [こんにちは]{.hiragana} 
(probably not visible in LaTeX monospace fonts)
~

Again, these characters only show up in LaTeX if we select the correct
font that contains these characters. In this case, we attributed the
Japanese text the `.hiragana` class. We can now write some LaTeX 
class rule that selects the right font for Japanese text:

	~ TexRaw
	\newcommand{\hiragana}[1]{{\fontspec{MS Gothic}#1}}
	\cssClassRuleCmd{hiragana}{\hiragana}
	~	

If most of your document is using such characters, the `\setmainfont` command
 of the `fontspec` package can set
the default for the entire document instead of using attributes.

[XeLaTeX]: http://en.wikipedia.org/wiki/XeTeX
[pdflatex]: http://en.wikipedia.org/wiki/PdfTeX
[LuaLaTeX]: http://en.wikipedia.org/wiki/LuaTeX


## Recognized character entities   { #app-entities }

Madoko recognizes all HTML5 named character entities and translates them
correctly in LaTeX. Besides the standard named entities, Madoko also
recognizes some extra named entities, like _bar_, _bslash_, _emsp_,
_pagebreak_, _strut_, etc. These are denoted in the table with a star. The
full list of predefined entities is:

|--------|-------------|----------|
| number |     name    |  glyph   |
|--------|-------------|----------|
|     34 | quot        | &#34;    |
|     35 | hash*       | &#35;    |
|     36 | dollar*     | &#36;    |
|     37 | perc*       | &#37;    |
|     38 | amp         | &#38;    |
|     39 | apos        | &#39;    |
|     40 | lpar*       | &#40;    |
|     41 | rpar*       | &#41;    |
|     42 | ast*        | &#42;    |
|     43 | plus*       | &#43;    |
|     47 | fslash*     | &#47;    |
|     60 | lt          | &#60;    |
|     62 | gt          | &#62;    |
|     92 | bslash*     | &#92;    |
|     94 | caret*      | &#94;    |
|     95 | underscore* | &#95;    |
|     96 | grave*      | &#96;    |
|    123 | lcurly*     | &#123;   |
|    124 | bar*        | &#124;   |
|    125 | rcurly*     | &#125;   |
|    126 | tilde*      | &#126;   |
|    160 | nbsp        | &#160;   |
|    161 | iexcl       | &#161;   |
|    162 | cent        | &#162;   |
|    163 | pound       | &#163;   |
|    164 | curren      | &#164;   |
|    165 | yen         | &#165;   |
|    166 | brvbar      | &#166;   |
|    167 | sect        | &#167;   |
|    168 | uml         | &#168;   |
|    169 | copy        | &#169;   |
|    170 | ordf        | &#170;   |
|    171 | laquo       | &#171;   |
|    172 | not         | &#172;   |
|    173 | shy         | &#173;   |
|    174 | reg         | &#174;   |
|    175 | macr        | &#175;   |
|    176 | deg         | &#176;   |
|    177 | plusmn      | &#177;   |
|    178 | sup2        | &#178;   |
|    179 | sup3        | &#179;   |
|    180 | acute       | &#180;   |
|    181 | micro       | &#181;   |
|    182 | para        | &#182;   |
|    183 | middot      | &#183;   |
|    184 | cedil       | &#184;   |
|    185 | sup1        | &#185;   |
|    186 | ordm        | &#186;   |
|    187 | raquo       | &#187;   |
|    188 | frac14      | &#188;   |
|    189 | frac12      | &#189;   |
|    190 | frac34      | &#190;   |
|    191 | iquest      | &#191;   |
|    192 | Agrave      | &#192;   |
|    193 | Aacute      | &#193;   |
|    194 | Acirc       | &#194;   |
|    195 | Atilde      | &#195;   |
|    196 | Auml        | &#196;   |
|    197 | Aring       | &#197;   |
|    198 | AElig       | &#198;   |
|    199 | Ccedil      | &#199;   |
|    200 | Egrave      | &#200;   |
|    201 | Eacute      | &#201;   |
|    202 | Ecirc       | &#202;   |
|    203 | Euml        | &#203;   |
|    204 | Igrave      | &#204;   |
|    205 | Iacute      | &#205;   |
|    206 | Icirc       | &#206;   |
|    207 | Iuml        | &#207;   |
|    208 | ETH         | &#208;   |
|    209 | Ntilde      | &#209;   |
|    210 | Ograve      | &#210;   |
|    211 | Oacute      | &#211;   |
|    212 | Ocirc       | &#212;   |
|    213 | Otilde      | &#213;   |
|    214 | Ouml        | &#214;   |
|    215 | times       | &#215;   |
|    216 | Oslash      | &#216;   |
|    217 | Ugrave      | &#217;   |
|    218 | Uacute      | &#218;   |
|    219 | Ucirc       | &#219;   |
|    220 | Uuml        | &#220;   |
|    221 | Yacute      | &#221;   |
|    222 | THORN       | &#222;   |
|    223 | szlig       | &#223;   |
|    224 | agrave      | &#224;   |
|    225 | aacute      | &#225;   |
|    226 | acirc       | &#226;   |
|    227 | atilde      | &#227;   |
|    228 | auml        | &#228;   |
|    229 | aring       | &#229;   |
|    230 | aelig       | &#230;   |
|    231 | ccedil      | &#231;   |
|    232 | egrave      | &#232;   |
|    233 | eacute      | &#233;   |
|    234 | ecirc       | &#234;   |
|    235 | euml        | &#235;   |
|    236 | igrave      | &#236;   |
|    237 | iacute      | &#237;   |
|    238 | icirc       | &#238;   |
|    239 | iuml        | &#239;   |
|    240 | eth         | &#240;   |
|    241 | ntilde      | &#241;   |
|    242 | ograve      | &#242;   |
|    243 | oacute      | &#243;   |
|    244 | ocirc       | &#244;   |
|    245 | otilde      | &#245;   |
|    246 | ouml        | &#246;   |
|    247 | divide      | &#247;   |
|    248 | oslash      | &#248;   |
|    249 | ugrave      | &#249;   |
|    250 | uacute      | &#250;   |
|    251 | ucirc       | &#251;   |
|    252 | uuml        | &#252;   |
|    253 | yacute      | &#253;   |
|    254 | thorn       | &#254;   |
|    255 | yuml        | &#255;   |
|    321 | lstroke     | &#321;   |
|    322 | Lstroke     | &#322;   |
|    338 | OElig       | &#338;   |
|    339 | oelig       | &#339;   |
|    352 | Scaron      | &#352;   |
|    353 | scaron      | &#353;   |
|    376 | Yuml        | &#376;   |
|    402 | fnof        | &#402;   |
|    710 | circ        | &#710;   |
|    732 | tilde       | &#732;   |
|    913 | Alpha       | &#913;   |
|    914 | Beta        | &#914;   |
|    915 | Gamma       | &#915;   |
|    916 | Delta       | &#916;   |
|    917 | Epsilon     | &#917;   |
|    918 | Zeta        | &#918;   |
|    919 | Eta         | &#919;   |
|    920 | Theta       | &#920;   |
|    921 | Iota        | &#921;   |
|    922 | Kappa       | &#922;   |
|    923 | Lambda      | &#923;   |
|    924 | Mu          | &#924;   |
|    925 | Nu          | &#925;   |
|    926 | Xi          | &#926;   |
|    927 | Omicron     | &#927;   |
|    928 | Pi          | &#928;   |
|    929 | Rho         | &#929;   |
|    931 | Sigma       | &#931;   |
|    932 | Tau         | &#932;   |
|    933 | Upsilon     | &#933;   |
|    934 | Phi         | &#934;   |
|    935 | Chi         | &#935;   |
|    936 | Psi         | &#936;   |
|    937 | Omega       | &#937;   |
|    945 | alpha       | &#945;   |
|    946 | beta        | &#946;   |
|    947 | gamma       | &#947;   |
|    948 | delta       | &#948;   |
|    949 | epsilon     | &#949;   |
|    950 | zeta        | &#950;   |
|    951 | eta         | &#951;   |
|    952 | theta       | &#952;   |
|    953 | iota        | &#953;   |
|    954 | kappa       | &#954;   |
|    955 | lambda      | &#955;   |
|    956 | mu          | &#956;   |
|    957 | nu          | &#957;   |
|    958 | xi          | &#958;   |
|    959 | omicron     | &#959;   |
|    960 | pi          | &#960;   |
|    961 | rho         | &#961;   |
|    962 | sigmaf      | &#962;   |
|    963 | sigma       | &#963;   |
|    964 | tau         | &#964;   |
|    965 | upsilon     | &#965;   |
|    966 | phi         | &#966;   |
|    967 | chi         | &#967;   |
|    968 | psi         | &#968;   |
|    969 | omega       | &#969;   |
|    977 | thetasym    | &#977;   |
|    978 | upsih       | &#978;   |
|    982 | piv         | &#982;   |
|   8194 | ensp*       | &#8194;  |
|   8195 | emsp*       | &#8195;  |
|   8195 | quad*       | &#8195;  |
|   8196 | thicksp*    | &#8196;  |
|   8197 | medsp*      | &#8197;  |
|   8201 | thinsp*     | &#8201;  |
|   8203 | strut*      | &#8203;  |
|   8203 | pagebreak*  | &#8203;  |
|   8204 | zwnj*       | &#8204;  |
|   8205 | zwj*        | &#8205;  |
|   8206 | lrm*        | &#8206;  |
|   8207 | rlm*        | &#8207;  |
|   8211 | ndash       | &#8211;  |
|   8212 | mdash       | &#8212;  |
|   8216 | lsquo       | &#8216;  |
|   8217 | rsquo       | &#8217;  |
|   8218 | sbquo       | &#8218;  |
|   8220 | ldquo       | &#8220;  |
|   8221 | rdquo       | &#8221;  |
|   8222 | bdquo       | &#8222;  |
|   8224 | dagger      | &#8224;  |
|   8225 | Dagger      | &#8225;  |
|   8226 | bull        | &#8226;  |
|   8230 | hellip      | &#8230;  |
|   8240 | permil      | &#8240;  |
|   8242 | prime       | &#8242;  |
|   8243 | Prime       | &#8243;  |
|   8249 | lsaquo      | &#8249;  |
|   8250 | rsaquo      | &#8250;  |
|   8254 | oline       | &#8254;  |
|   8260 | frasl       | &#8260;  |
|   8364 | euro        | &#8364;  |
|   8465 | image       | &#8465;  |
|   8472 | weierp      | &#8472;  |
|   8476 | real        | &#8476;  |
|   8482 | trade       | &#8482;  |
|   8501 | alefsym     | &#8501;  |
|   8592 | larr        | &#8592;  |
|   8593 | uarr        | &#8593;  |
|   8594 | rarr        | &#8594;  |
|   8595 | darr        | &#8595;  |
|   8596 | harr        | &#8596;  |
|   8629 | crarr       | &#8629;  |
|   8656 | lArr        | &#8656;  |
|   8657 | uArr        | &#8657;  |
|   8658 | rArr        | &#8658;  |
|   8659 | dArr        | &#8659;  |
|   8660 | hArr        | &#8660;  |
|   8704 | forall      | &#8704;  |
|   8706 | part        | &#8706;  |
|   8707 | exist       | &#8707;  |
|   8709 | empty       | &#8709;  |
|   8711 | nabla       | &#8711;  |
|   8712 | isin        | &#8712;  |
|   8713 | notin       | &#8713;  |
|   8715 | ni          | &#8715;  |
|   8719 | prod        | &#8719;  |
|   8721 | sum         | &#8721;  |
|   8722 | minus       | &#8722;  |
|   8727 | lowast      | &#8727;  |
|   8730 | radic       | &#8730;  |
|   8733 | prop        | &#8733;  |
|   8734 | infin       | &#8734;  |
|   8736 | ang         | &#8736;  |
|   8743 | and         | &#8743;  |
|   8744 | or          | &#8744;  |
|   8745 | cap         | &#8745;  |
|   8746 | cup         | &#8746;  |
|   8747 | int         | &#8747;  |
|   8756 | there4      | &#8756;  |
|   8764 | sim         | &#8764;  |
|   8773 | cong        | &#8773;  |
|   8776 | asymp       | &#8776;  |
|   8800 | ne          | &#8800;  |
|   8801 | equiv       | &#8801;  |
|   8804 | le          | &#8804;  |
|   8805 | ge          | &#8805;  |
|   8834 | sub         | &#8834;  |
|   8835 | sup         | &#8835;  |
|   8836 | nsub        | &#8836;  |
|   8838 | sube        | &#8838;  |
|   8839 | supe        | &#8839;  |
|   8853 | oplus       | &#8853;  |
|   8855 | otimes      | &#8855;  |
|   8869 | perp        | &#8869;  |
|   8901 | sdot        | &#8901;  |
|   8942 | vellip      | &#8942;  |
|   8968 | lceil       | &#8968;  |
|   8969 | rceil       | &#8969;  |
|   8970 | lfloor      | &#8970;  |
|   8971 | rfloor      | &#8971;  |
|   9001 | lang        | &#9001;  |
|   9002 | rang        | &#9002;  |
|   9674 | loz         | &#9674;  |
|   9824 | spades      | &#9824;  |
|   9827 | clubs       | &#9827;  |
|   9829 | hearts      | &#9829;  |
|   9830 | diams       | &#9830;  |
|   8617 | hooklarr*   | &#8617;  |
|   8718 | bbox*       | &#8718;  |
|   9633 | box*        | &#9633;  |
|   9744 | ballotbox*  | &#9744;  |
|   9745 | ballotc*    | &#9745;  |
|   9746 | ballotx*    | &#9746;  |
|  10003 | checkmark*  | &#10003; |
|  10004 | bcheckmark* | &#10004; |
|  10007 | xmark*      | &#10007; |
|  10008 | bxmark*     | &#10008; |
|--------|-------------|----------|
{ .long }


## Definitions of predefined custom blocks { #app-custom }

These are the definitions of the predefined custom blocks, where we assume that 
`Heading Depth` and `Toc Depth` are set to 3 (and adding some spurious line breaks for
formatting).

```
~Equation: label='[(@equation)]{.equation-label}' 
  		   replace='[#label]{.equation-before}#nl\
  		            ~ Begin Math#nl#source#nl~ End Math#nl' 
           .align-center tight .para-block
~Figure  : label='[@figure]{.figure-label}' .align-center 
		   after='#nl********* {.figureline}#nl\
			      [[**Figure\ #label.** ]\
			      {.caption-before}#caption]\
			      {.figure-caption}#nl{notag}#nl'
		   toc=tof toc-line='#label. #caption'
      
~Bibitem : label='[@bibitem]{.bibitem-label}' 
		   cite-label='#label'
		   before='[\[#label\]\ \ ]{.bibitem-before}' 
		   tight texelem=mdBibitem
~Bibliography: bib-style=... 
			   bib-data='...' 
			   texelem=mdBibliography
      
~Note  : .block before='[**Note**. ]{.note-before}'
~Remark: .block before='[**Remark**. ]{.remark-before}'
~Proof : .block before='[**Proof**. ]{.proof-before}'

~Framed: border-style=solid border-color=black border-width=1px
~Center: .align-center

~Pre   : input=pre .para-block
~Code  : input=pre
      
~Tex      : input=tex
~TexRaw   : input=texraw
~HtmlRaw  : input=htmlraw
~Math     : input=math .para-block
~MathPre  : input=mathpre .para-block
~MathDefs : input=mathdefs .hidden
~HtmlOnly : input=htmlonly
~TexOnly  : input=texonly

~Theorem  : .block label='[@Theorem]{.Theorem-label}'
    before='[**Theorem\ #label.** ]{.Theorem-before}'
~Lemma	  : .block label='[@Lemma]{.Lemma-label}'
    before='[**Lemma\ #label.** ]{.Lemma-before}'
~Proposition: .block label='[@Proposition]{.Proposition-label}'
    before='[**Proposition\ #label.** ]{.Proposition-before}'
~Corollary: .block label='[@Corollary]{.Corollary-label}'
    before='[**Corollary\ #label.** ]{.Corollary-before}'
~Example: .block label='[@Example]{.Example-label}'
    before='[**Example\ #label.** ]{.Example-before}'
~Definition: .block label='[@Definition]{.Definition-label}'
    before='[**Definition\ #label.** ]{.Definition-before}'

~H1: label='[@h1]{.heading-label}' toc
     before='[#label.\ \ \ ]{.heading-before}'     
~H2: @h1-h2 label='[@h1.@h1-h2]{.heading-label}' toc
     before='[#label.\ \ \ ]{.heading-before}'     
~H3: @h1-h2-h3 label='[@h1.@h1-h2.@h1-h2-h3]{.heading-label}' 
     before='[#label.\ \ \ ]{.heading-before}' toc
~H4: @h1-h2-h3-h4 
  label='[@h1.@h1-h2.@h1-h2-h3.@h1-h2-h3-h4]{.heading-label}'
...
```

