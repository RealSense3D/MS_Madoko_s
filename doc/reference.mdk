Title		: Madoko Reference
Subtitle	: A Fast Scholarly Markdown Processor
Author		: Daan Leijen
Affiliation	: Microsoft Research
Email		: daan@microsoft.com
Heading Base: 2
MathJax		: True

Script		: https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=scm&lang=latex
.SampleBlock : padding-left=1em padding-right=1em border-style=solid border-width=1px padding-top=-1ex
.SampleOutput: margin-bottom=1.7ex
~Sample		 : margin-bottom=2ex 
				replace="~~~~SampleBlock#nl````` {.SampleSource}#nl#source#nl`````#nl* * *{ width=50% text-align=left }#nl~~~~~SampleOutput#nl#source#nl~~~~~#nl~~~~#nl"
~Slanted	: font-style=oblique
~Fib    	: replace='/^x?$/y/' replace='/xx(x*)/~Fib#nl\/x\1#nl~#nl~Fib#nl\1\/#nl~/' notag tight 
Title2		: (#Title,#Title)
llbracket	: &#10214;
rrbracket	: &#10215;
Cite All	: True

~ TexRaw
\mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\mdDefineUnicode{10215}{\ensuremath{\rrbracket}}
~

<!-- apa, apalike, plainnat, newapa, chicago, named, 
	agsm, dcu, kluwer, 
	astron, bbs, cbe, humannat, humanbio, jtb,
	eptcs -->

[TITLE]

[TOC]

~TexRaw
% The LaTeX lstlisting package does not know the 'javascript' language
% so we define some limited one here based on Java.
\definecolor{dark-blue}{rgb}{0,0.08,0.45}
\definecolor{string-purple}{rgb}{0.49,0,0.47}

\lstdefinelanguage{javascript}[]{Java}{
	morekeywords={function},
	keywordstyle=\color{dark-blue},
	stringstyle=\color{string-purple}
}
~

# Overview of Madoko

Madoko is a fast javascript [Markdown] processor written in [Koka]
It started out as a demo program for the new [Koka] language and
the name comes from "_Ma_\/rk\/_do_\/wn in _Ko_\/ka".

Madoko is a javascript program that runs on [Node.js]. It is about 30% faster
then [Marked] \(one of the fastest Javascript markdown implementations), and
about 8 times faster than [Showdown] and [Markdown.js]. Madoko is also
available as a .NET executable on windows.

[Koka]: 		http://koka.codeplex.com
[Markdown]: 	http://daringfireball.net/projects/markdown/syntax
[Markdown.js]: 	https://github.com/evilstreak/markdown-js
[Showdown]: 	https://github.com/coreyti/showdown
[Marked]: 		https://github.com/chjj/marked
[MathJax]:		http://www.mathjax.org
[MathJaxCmds]:  http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands
[Node.js]:		http://nodejs.org	
[NodeJs]: 		http://nodejs.org	

[PanDoc]:			http://johnmacfarlane.net/pandoc
[MultiMarkdown]:	http://fletcherpenney.net/multimarkdown
[Kramdown]:			http://kramdown.gettalong.org

## Madoko philosophy

Even though Madoko is fast, the main design goal is not efficiency: I wanted
to extend Markdown to make it suitable to create high-quality scholarly and
industrial documents for the web and print, while maintaining John Gruber's
Markdown philosophy of simplicity and focus on plain text readability.

The popularity of Markdown is not accidental, and it is great for writing
prose: it is super simple and straightforward to create good looking HTML
documents. But for more serious use Markdown falls short in several areas and
many extended implementations have arisen in the recent years. Madoko
addresses many of the weaknesses of Markdown. In particular, it helps you
with those things that a computer can well do for you: like numbering, document
references, generating table of contents, footnotes, bibliographies, and
document styling.

Besides HTML output, Madoko can also generate high-quality PDF files through
LaTeX. Even though more Markdown implementations support this, there has been
a lot of effort in Madoko to make the LaTeX generation very good and
customizable. This makes it possible to write high-quality scholarly articles
using just Madoko and get both a high-quality print format (PDF) and a good
looking HTML page.  Look at this scientific article for an example[^fn-slow-load]:

~ Center
| :~~~~~~~~~~~~~~~~~~~~~~~~:     | :~~~~~~~~~~~~~~~:                | :~~~~~~~~~~~~~:              |
| LaTeX/PDF                      | HTML                             | Madoko source                |
| [![doc-pdf]][koka-article-pdf] | [![doc-html]][koka-article-html] | [![doc-md]][koka-article-md] |
|                                |                                  |                              |
~

[^fn-slow-load]:   
	Note that the example article loads somewhat slowly in the browser. This is
	because it is a long article that uses _a lot_ of math which takes a while to
	render in [MathJax].

[doc-pdf]: 		koka-doc-pdf.png 	{width=300px vertical-align=top } 
[doc-html]: 	koka-doc-html.png 	{width=300px vertical-align=top }
[doc-md]: 		koka-doc-md.png 	{width=300px vertical-align=top }

[koka-article-pdf]: 	http://research.microsoft.com/pubs/200436/koka-effects-2013.pdf
[koka-article-html]: 	http://research.microsoft.com/en-us/um/people/daan/madoko/doc/koka-effects-2013.html
[koka-article-md]: 		http://research.microsoft.com/en-us/um/people/daan/madoko/doc/koka-effects-2013.md.txt

# Usage

The easiest way to use Madoko is as a command line tool using Node.js (which
works on many platforms, like Windows, MacOSX, Linux etc). Madoko can also run
inside a web browser or as a .NET executable. To install under Node.js is very
easy:

* Ensure you have [Node.js] installed on your system.
* Open a command line window and run: `npm install madoko -g`

and you are done. Translating a markdown document is done simply as:

* `madoko -v mydoc.mdk`

which generates `mydoc.html`. The `-v` flag gives more verbose output.
To also generate a `.tex` file that can be processed by LaTeX into a
pdf file, use:

* `madoko --tex -v mydoc.mdk`
* `pdflatex mydoc.tex`

This assumes that you have LaTeX installed on your system. For Window users,
a good LaTeX system is [MikTeX] for example.

[MikTeX]: http://miktex.org/


# Syntax

Madoko is fully compatible with basic [Markdown syntax][Markdown] and passes
the entire test suite. It also implements most extensions, like Github
flavored markdown and multi-markdown, and it adds quite a few features itself
to make it really useful for writing professional documents.

We assume that the reader is familiar with basic markdown syntax. 

[Markdown Extra]: 	http://michelf.ca/projects/php-markdown/extra
[MultiMarkdown]:    http://fletcherpenney.net/multimarkdown
[GitHubFM]:			https://help.github.com/articles/github-flavored-markdown

## Inline elements

### Sub- and super-script

Using tilde (`~`) and hat (`^`), you can format inline text as sub- and super-script respectively.
Inside script, no white space is allowed to prevent mistakes. If you need white space you
can still use an escaped space (`\ `).

~ Sample
Here is how you write H~2~O or E=MC^2^.
Please use escapes for~longer\ script~.
~

### Strike-out

Enclose anything in two tildes and it will strike out the content:

~ Sample
There is a ~~strike out~~ here.
~

### Escape sequences		{ #sec-escapes }

Madoko adds some extra escape sequences to the standard ones in Markdown. If
you want to use a special character directly without a special Markdown
meaning,  precede it with a backslash (`\`). For example, to use a star (`*`)
without causing emphasis, you can write `\*`. The full list of special 
escape characters are:

	\`*{}[]()#+-.!_<>~|$'"?/

Madoko will never escape a letter or digit, and you can safely write windows
style file names without needing an escape:

~ Sample
Would you like c:\foo\bar to be deleted? Yes\No.
~

If you escape a space (` `), it is translated as a non-breakable space, while
a backslash at the end of a line causes a hard line break to be inserted. The 
latter is recommended over using the standard Markdown way of using two spaces
at the end of a line because it leaves visual clue that a line break occurs.

~ Sample
Here is non\ breakable space and a hard\
line break with a \* star.
~

Finally, the escape sequence `\/` translates to nothing; this can be very 
useful to separate certain constructs. For example, emphasis is suppressed
if the underscores appear inside a word, as in my_example_here. Using the
empty escape sequence we can emphasize inside words too: to get
my\/_example_\/here, we can simply write `my\/_example_\/here`.

### Smart quotes and symbols

Madoko will quote smartly using proper open and closing quotes for anything
enclosed in single quotes (`'`), double quotes (`"`), or french quotes (`<<`
and `>>`).

~ Sample
"double quoted"  
'single quoted'  
<<guillemet quoted>>  
<http://www.google.com>
~

Note that text enclosed in `<` and `>` brackets gets interpreted as direct 
link. Similarly, Madoko will also replace some character sequences to a 
proper symbol:

~ Sample
Please distinguish a minus sign, -, from the _en dash_ which
is used to separate spans or pages, like 1--20, and the 
_em dash_ which is even longer and sometimes used for 
quotation attribution. --- Oscar Wilde.  
Three dots ... should be close together.
~

## Footnotes  { #sec-footnotes }

Footnotes are written as regular link definitions prefixed with a hat (`^`)
character. This is the syntax [originally proposed][fnsyntax] by John Gruber.

~ Sample
Here is a footnote[^fn].

[^fn]: This is the content of the example footnote. 
	You can continue a footnote by indenting content.
	And notice the backlink.
~

[fnsyntax]: http://daringfireball.net/2005/07/footnotes


## Code blocks  { #sec-code }

You can write preformatted code simply by indenting the code with a tab
character or at least four spaces. For example:

~ Sample
	<b>some html code</b>
~

Another way to write code is to used _fenced_ code blocks. These start with at
least three backticks (`` ` ``) and goes on to the first line containing the
same number of backticks. Moreover, you can include the language name after
the backticks:

~ Sample
``` javascript
function hi() { return "hi"; }
```
~

For the previous example, Madoko will automatically add the `lang-javascript`
class for HTML output, and the option `language=javascript` to the LaTeX
[listings] package. This can be used to  enable syntax highlighting. For
example, to highlight the above example using  [Google Prettify][GPretty] we
should include the Google script in the [metadata][#sec-metadata]:

	Script: https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js

and add the `.prettyprint` class using attributes:

~ Sample
``` javascript	{ .prettyprint .linenums }
function hi() { 
  return "hi"; 
}
```
~

Note how the sample shows line numbers using the `.linenums` class. You can
start numbering at a specific line using a colon followed by the line number,
for example: `.linenums:10`. Of course, you can use a [metadata rule][#sec-rules] 
to enable pretty printed code for all code blocks:

	~Pre: .prettyprint .linenums

In LaTeX the code is typeset using the [listings] package. Unfortunately,
this package does not predefine the JavaScript language so we  need to define
it ourselves. This can be done at the start of the document using a `TexRaw`
custom block (see Section [#sec-custom]). For example, in this document we
used:

```latex	{ .prettyprint language=TeX }
~ TexRaw
\definecolor{dark-blue}{rgb}{0,0.08,0.45}
\definecolor{string-purple}{rgb}{0.49,0,0.47}

\lstdefinelanguage{javascript}[]{Java}{
	morekeywords={function,let},
	keywordstyle=\color{dark-blue},
	stringstyle=\color{string-purple}
}
~
```

Madoko will automatically pass the `language` key to the listings package, and
also include line numbers if the `.linenums` class is present. Use the
`.showspaces` class to show spaces and tabs in the code.


[GPretty]: http://code.google.com/p/google-code-prettify
[listings]: http://www.ctan.org/pkg/listings

## Table of contents  { #sec-toc }

Generating a table of contents is easy, just include the special element
`[TOC]` anywhere in your document and it will expand to a table of contents.
You an use the metadata value `Toc Depth` to set how many levels deep the
table of contents goes (by default 3).

You can also a create a list of figures, by using `[TOC=tof]`. This will list
all the `~Figure` block elements.

### Custom tables of contents

Custom tables of contents can be generated using the `toc` attribute.  The
`toc-depth` attribute specifies the depth of the element (by default 1), while
the `toc-line` specifies the contents of the line displayed in the table of
contents. For example, using [metadata rules][#sec-rules] we can generate a
table of contents for equations:

	~Equation: toc=equations toc-line="#caption"

Here we assume that the user adds a `caption` attribute when denoting
equations (which will get expanded inside the `toc-line`). We can then render
the table of equations anywhere in the document as:

	[TOC=equations]

## Bibliography		{ #sec-bib }

One of Madoko's main design goals is to enable the creation of high-quality
scholarly articles. As such, Madoko integrates closely with the standard 
[BibTeX] tool to generate bibliographies and references inside a document.
In particular, you can simply use any existing BibTeX bibliography file
(`.bib`). You can specify which bibliography files are to be used using 
`Bib` [metadata](#sec-metadata) entries:

	Bib:  ../mybib1
	Bib:  mybib2
 
Entries in the biblopgraphy files can now be referenced using semi-colon separated 
local links, for example 

~ Sample
Read about LaTeX and TeX [#Knuth:Tex; #Lamport:Latex]. 
~

Note that unlike LaTeX there is no need to explicitly insert an unbreakable
space between the text and the citation, Madoko automatically takes care of this
(as described in Section [#sec-ids-labels]).
If necessary, you can also include extra text for each entry:

~ Sample
Read about TeX [#Knuth:Tex; #Lamport:Latex (chapter 4)]. 
~

When running Madoko the first time, we get a warning that these references
are not yet defined:

	warning: missing anchor or citation: #Lamport:Latex
	warning: missing anchor or citation: #Knuth:Tex

When Madoko finds such references, it writes them to a `.aux` file (together
with the needed bibliography files) that can be read by BibTeX, and we can
just run it directly on this file:
	
	> bibtex myfile.aux

to generate the bibliography entries. The bibliography entries are
included in your document using the special `[BIB]` element, for example:

	## References	{-}
	[BIB]

When running Madoko again, the bibliography entries are now known and no
warnings will be issued.


### Bibliography styles  { #sec-bibstyle }

The style of the bibliography entries is determined using the `Bib Style` key
and can be any [BibTeX style](http://web.reed.edu/cis/help/latex/bibtexstyles.html)
(by default `plain`):

	Bib Style: plainnat

Madoko uses a very simple LaTeX parser to format the bibliography entries in
Markdown. It can handle things like special characters and accents quite well
and recognizes many formatting commands. Even though it is sufficient for
bibliography entries in general, the Madoko LaTeX parser may not work for more
fancy LaTeX commands in bibliography entries. However, we strive to make it
work for any bibliograpy style and entries, so please [file a bug report][issues] 
if you encounter situations where it does not work correctly.

Bibliography styles known to work with Madoko include the following author-
year styles: apa, apalike, plainnat, newapa, chicago, named,  agsm, dcu,
kluwer, astron, bbs, cbe, humannat, humanbio, jtb, and others. Also, the
following numeric styles have been tested: eptcs,  abbrv, plain, ieeetr, acm,
unsrt, alpha, siam, and others.

[bibtex]: http://en.wikipedia.org/wiki/BibTeX
[issues]: http://madoko.codeplex.com/workitem/list/basic



### Citation styles   { #sec-cite }

The citation style is usually automatically determined from the 
bibliography style. However, it can be set explicitly using the `Cite Style`
key:

	Cite Style: natural

Valid citation styles are _natural_, _square_, _numeric_, _plain_, _super_,
and _auto_ (default). The natural and square styles use author-year style
citations, while the numeric, plain, and super styles use numbers.

|~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
| _natural_ | ([Lamport, 1994][#Lamport:latex]; [Knuth, 1984][#Knuth:Tex])	| (default for author-year citations) |
| _square_  | [[Lamport, 1994][#Lamport:latex]; [Knuth, 1984][#Knuth:Tex]] ||
| _numeric_ | [[2][#Lamport:latex]; [1][#Knuth:Tex]] ||
| _plain_   | [[2][#Lamport:latex], [1][#Knuth:Tex]] |	(default for numeric citations) |
| _super_   | ^[2][#Lamport:latex],\ [1][#Knuth:Tex]^ ||

Note that full author-year style citations only work with BibTeX styles that
support this, i.e. generally any style that works with the `natbib` package like `plainnat`.
Finally, with author-year citations we can use the `.short` class attribute to 
only cite the year which is used when the author is already mentioned in the text:

	As described by Lamport [#Lamport:Latex]{.short}

This attribute has no effect if the _numeric_ style is used.

### Not using BibTeX

If necessary, it is possible to completely circumvent using BibTeX and write
your bibliograpy entries by hand. The bibliography entries need to be put inside
a `Bibliography` block:

	~ Bibliography { caption="00" }
	...
	~

where the `caption` is only used in LaTeX output and should be a string that
is the widest label necessary for the numeric style. Inside the bibliography
block, you can put `Bibitem` blocks for each bibliography entry. For example:

	~~ Bibitem { id='wadler:marriage' .has-before }
	Philip Wadler and Peter Thiemann.
	[]{.newblock} _The marriage of effects and monads._
	[]{.newblock} ACM Trans. Comput. Logic, 4(1):1--32, 2003.
	~~

The above example is for numeric style citations. The `.has-before` class
ensures that the html output is styled correctly with the right hanging
indentation. The `[]{.newblock}` spans are used in LaTeX output to create
flexible whitespace that justifies the entry nicely. If author-year citations
are used, the entry should have an explicit label and clear the default
`before` key (which would otherwise put numbers in front):

	~~ Bibitem { id='remy' label='R&eacute;my(1993)' before=clear }
	Didier R&eacute;my. []{.newblock} 
	_Type inference for records in a natural extension of ML._
	[]{.newblock} In Carl\ A. Gunter and John\ C. Mitchell, editors, 
	  Theoretical Aspects Of Object-Oriented Programming. 
	  Types, Semantics and Language Design. MIT Press, 1993.
	~~

	~~ Bibitem { id='nielson:polyeffect' before=clear
	label='Nielson _et\ al_.(1997)Nielson, Nielson, and Amtoft'}
	Hanne\ Riis Nielson, Flemming Nielson, and Torben Amtoft.
	[]{.newblock} _Polymorphic subtyping for effect analysis: 
	  The static semantics._
	[]{.newblock} In Selected papers from the 5th LOMAPS Workshop on 
	  Analysis and Verification of Multiple-Agent Languages, 
	  pages 141--171, 1997. []{.newblock} ISBN 3-540-62503-8.
	~~

Note how it is allowed to have long citation label after the year. This is
used when a citation is given the `.long` class (versus `.short`). 

## Tables

Madoko significantly extends the table syntax of basic Markdown. In particular,
it is easy to add horizontal or vertical lines, and to control cell alignment,
multiple column spans, and the width of the columns.
Here is an example of a plain table from "[Just a
Theory](http://www.justatheory.com/computers/markup/markdown-table-rfc.html)".
~ Sample
|  id  |    name    |      description           |  price  |
|:-----|:----------:|----------------------------|--------:|
| 1    |   gizmo    | Takes care of doohickies   |   1.99  |
| 2    |   doodad   |     Collects *gizmos*      |  23.80  |
| 10   |  dojigger  |            Foo             |  102.98 |
| 1024 | Self-explanatory, no?                  ||    0.99 |
~
The basic rules for formatting a table are:

* Every line of the table should start and end with a `|` (or `+`) and columns are 
	separated by `|` (or `+`) too. If you need a `|` character in cell content, use 
	an escaped bar instead (`\|`).
* Every row can be on one line only, and there can be no blank lines.
* The table can optionally start with one or more _header_ rows.
* A cell can span multiple columns by using multiple bars to end the cell, like 
	`||` in the previous example.
* The table should always have an initial *column specifier* row that separates
	the header from the body of the table (or marks the start of the body in case
	there is no header). The content of each column specifier cell is just
	dashes (`-`) or tildes (`~`)

The column specifier row determines alignment and vertical lines in a table:

* Columns can be aligned by using a `:` in the column specifier: one on the
	right or left aligns to the right or left, while a colon on both sides will
	center the column.
* If a column specifier uses a plus (`+`) instead of a bar (`|`) to separate
	the column, a vertical line is used to separate the columns. To distinguish
	the use of a `+` for a table instead of as a list item, there should be
    *no whitespace* following a `+` when used this way!
* If a column specifier cell uses dashes `-`, a horizontal line is drawn. By using
	tildes (`~`) instead, no line is drawn for that column specifier cell.  

In the next example, we suppress the horizontal line after the header, but add 
vertical lines on the outsides. Also, we use two header rows.
~ Sample
|    grouped       ||                            |         |
|  id  |    name    |      description           |  price  |
+:~~~~:|:~~~~~~~~~~:|~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~:+
| 1    |   gizmo    | Takes care of doohickies   |   1.99  |
| 2    |   doodad   |     Collects *gizmos*      |  23.80  |
| 10   |  dojigger  |           Foo              |  102.98 |
| 1024 | Self-explanatory, no?                  ||    0.99 |
~

### Horizontal lines

We can draw horizontal lines in a table by using a row where
every cell just contains dashes (`-`). By using more then one 
row of dashes, we get double horizontal lines. Here is a
a table with no header and an outer border:
~ Sample
+:----:|-------------+:--------------------------:|-------:+
| centered gizmos   || Takes care of doohickies   |  1.99  |
|   2  |    doodad   |    Collects *gizmos*       | 23.80  |
|  10  |   dojigger  |    Escaped \| and \+       | 102.98 |
| 1024 | thingamabob |  Self-explanatory, no?     |  0.99  |
|------|-------------|----------------------------|--------|
~
And finally a complex table with all kinds of alignment, 
multiple column spans and horizontal lines[^funfn].

[^funfn]: For fun, try to draw this example table in LaTeX
	without consulting the manual :-).

~ Sample
| ------ | ----------------- | ------------------- | ------ |
|   id   |        name       |    description      |  price |
+--------+-------------------+:-------------------:+~~~~~~~:+
| 1      | gizmo                                          |||
|        | ----------------------------------------       |||
| 2      | doodad            | Collect *gizmos*    | 23.80  |
| ------ | ----------------- | ------------------- |        |
| ------ |                   | ------------------- | ------ |
| 1024   | thingamabob       | Self-explanatory    | 0.99   |
| ------ | ----------------- |                     | ------ |
~
Note how we started the previous table with a horizontal line, 
where the column specifier row is on the third line. 

### The width of columns

We can specify the width (and other attributes) of a column by
adding an [attribute][#sec-attr] specification in the column
specification row. In the following example, we use a column
of fixed width, and one of a relative with with respect to 
the overall width of the table.

~ Sample
+:----:|---{width=2cm}--+:-----{width=33%}--------:|-------:+
| centered gizmos      || Take care of doo hickies |  1.99  |
|   2  |    doodad      |     Collects *gizmos*    | 23.80  |
|  10  |   dojigger     |            Foo           | 102.98 |
| 1024 | thingabob      |  Self-explanatory, no?   |  0.99  |
|------|----------------|--------------------------|--------|
~

## Mathematics   { #sec-math }

Madoko documents can include mathematics in standard LaTeX syntax.
This is supported in HTML pages through the [MathJax] library. 
MathJax is a very rich library and supports almost every LaTeX command
required for complex mathematics.
A full list of supported commands is available [online][MathJaxCmds].
By default,
the MathJax library is not included in the generated HTML (as documents without
mathematics do not need it). An easy way to enable MathJax is to set the
`MathJax` [metadata][#sec-metadata] key at the start of the document:

	MathJax: True

Mathematics can be included in various ways. Generally, inline math should
be typeset between `$`\ characters, while block equations should use the 
`Equation` block syntax.

~~ Sample
A famous equation is $E = mc^2$, but another famous one is:
~ Equation 	{#eq-gaussian}
  \int_{-\infty}^\infty e^{-a x^2} d x = \sqrt{\frac{\pi}{a}}
~
and we can refer to Equation [#eq-gaussian] like any heading.
~~
Block equations can also be included
using the standard LaTeX `$$` characters on separate lines. However, the
`Equation` block is preferred as it takes care of numbering, alignment, etc.
See also Section [#sec-custom] on custom blocks that support mathematics,
like `Theorem`, `Lemma`, `Proof`, etc. 

### Math commands   { #sec-mathdefs }

For math-heavy documents, it is convenient to define LaTeX commands for 
common operations. Such command definitions can be directly understood by LaTeX
but need to be handled specially for MathJaX in an HTML page. Madoko defines
the custom block `MathDefs` to support this.
~~ Sample
~ MathDefs
\newcommand{\infer}[3]{#1 \vdash #2\,:#3}
~ 
We infer $\infer{\Gamma}{e}{\tau}$ for such expression $e$.
~~
Often it is convenient to put all such definitions in a separate `.tex` file and
include it in the document as:

	~ MathDefs
	[INCLUDE="mathdefs.tex"]
	~

### Preformatted math   { #sec-mathpre }

LaTeX math mode is great for regular mathematics but not so good if one tries
to preserve whitespace or uses longer identifiers. This is actually quite common
for computer science documents where mathematics is mixed with program code.
Madoko supports a `MathPre` custom block that makes _preformatted_ math much
easier to typeset. In particular:

* Whitespace is preserved where spaces are replaced by medium space (`\:`) commands
	(except when the spaces directly follow a LaTeX command).

* A name (consisting of letters and digits) is typeset in a `\mathid` command so 
	it will look like $\mathit{sinus}$ instead of $sinus$.

* If a name ends with digits, they are typeset as subscripts, where `x1` becomes $\mathit{x}_1$.

* A name starting with an `@` character is typeset using a `\mathkw` command, where
	`@return` becomes $\mathkw{return}$.

* Any text that is an argument of a `\begin`, `\end`, `\text`_xx_ or `\math`_xx_ command, 
	where _xx_ is one of `tt`, `sf`, `rm`, `it`, `bb`, or `bf`, is kept unchanged.
    Also any name starting with a `#` character is kept unchanged.

* Ampersands can be used to align text.

Using this convention, we can easily typeset program code using nice symbols.

~~ Sample
~ MathPre
@function sqr_\pi( num :int ) \{ 
   @return (num {\times} num \times{} \pi)
\}	
~
~~ Sample

Here is an example of aligned text which also demonstrates the use of `replace` (see 
Section [#sec-replace]):

~~ Sample
~ MathPre   { replace="/->/\rightarrow/g" }
random &: () -> ndet double
print  &: string -> io ()
error  &: \forall\alpha. string -> exn a
~
~~

### Setting all code to preformatted math

If you want to typeset all code using preformatted math, you can actually 'take over'
the standard code blocks in Madoko and set the input of those to `mathpre`. For example,
in the earlier scientific article, the document starts with the following 
[metadata rules][#sec-rules]:

	~Pre,~Code  : input=mathpre 
					replace="/\|->>/{\dlongmapsto}/g"
					replace="/->/{\rightarrow}/g"
					replace="/</{\langle}/g"
					replace="/>/{\rangle}/g"

These set both block- and inline-code to the `mathpre` input mode and define a set of
useful replacements.

## Custom blocks    { #sec-custom }

Madoko custom blocks are similar to the `div` element in HTML and allow the
use of custom block elements that can be styled and processed in a particlar
way. A custom block starts on new line starting with one or more tildes (`~`)
optionally followed by the block name and attributes. It ends at the first
line containing the same number of tildes that started this block. 

~~~ Sample
~ Note			 
Here is a note.
~
~~  { font-style=italic }
And some italic text in an unnamed block.
~~
~~~ 

Note that [git flavored markdown][gitmd] uses three or more tildes for fenced
code blocks. Since Madoko uses tildes for custom code blocks this cannot be
used and Madoko only supports the more popular back-ticks (```` ``` ````)
for fenced code blocks.

[gitmd]: https://help.github.com/articles/github-flavored-markdown

Custom blocks work especially well with metadata rules (see Section [#sec-rules])
where we can define attributes that get applied to every occurrence of a 
custom block. For example, we could define the metadata rule:

	~Slanted:  font-style=oblique 

and then every occurrence of a `Slanted` custom block would be typeset in a
slanted font.
~~ Sample
~ Slanted
Here is my slanted custom block
~
~~

### Predefined custom blocks

Madoko defines quite a few common custom blocks.

* `Figure`: This is used to define figures. Recognizes the following attributes:
	- `caption=`_caption_: specify the caption of a figure.
	- `.wide`: if the class `wide` is set, the figure will span the width of a page 
		in a two-column format (used in LaTeX).
	- `page-align=`(`top`|`bottom`|`here`): specify the alignment of the figure in a page 
		(used for LaTeX output).

* `Equation`: Specify mathematical equations. See Section [#sec-math] for its usage.

* `Bibitem`, `Bibliography`: Used for writing bibliography entries by hand. See Section [#sec-bib] 
	for more information.
* `Note`, `Remark`, `Proof`: Used for notes, remarks, and proofs.
* `Abstract`: Defines the abstract of an article.
* `Framed`: A block with a solid border. Use the `tight` attribute to suppress a paragraph
	block around its content.
* `Center`: A block that centers its contents horizontally on the page. 
* `TexRaw`: A block for raw TeX content that is passed directly to LaTeX.
* `HtmlRaw`: A block with raw HTML content that is pasted directly into the HTML output.
* `TexOnly`: A markdown block that is only processed for LaTeX output (and not shown in HTML output).
* `HtmlOnly`: A markdown block that is only processed for Html output (and no shown in LaTeX output).
* `MathPre`: A block with preformatted math (Section [#sec-mathpre]).
* `MathDefs`: A block with LaTeX math definitions (Section [#sec-mathdefs]).
* `Theorem`, `Lemma`, `Proposition`, `Corollary`, `Example`, `Definition`: Each of these blocks
	is individually numbered and starts with the block name in bold. For example:
	~ Sample
	~~ Lemma 	{#LeftCosetsDisjoint}
	Let $H$ be a subgroup of a group $G$, and let $x$ and 
	$y$ be elements of $G$.  Suppose that $xH \cap yH$ is 
	non-empty. Then $xH = yH$.
	~~
	~~ Proof
	Let $z$ be some element of $xH \cap yH$.  Then $z = xa$
	for some $a \in H$, and $z = yb$ for some $b \in H$.
	If $h$ is any element of $H$ then $ah \in H$ and
	$a^{-1}h \in H$, since $H$ is a subgroup of $G$.
	But $zh = x(ah)$ and $xh = z(a^{-1}h)$ for all 
	$h \in H$.
	Therefore $zH \subset xH$ and $xH \subset zH$, and thus
	$xH = zH$.  Similarly $yH = zH$, and thus $xH = yH$,
	as required. This concludes the proof of 
	Lemma [#LeftCosetsDisjoint]. [&#9633;]{float=right}
	~~
	~ 
Of course, each of the predefined blocks can be customized further using attributes and rules.
For example, by including the following metadata rule, we can typeset proofs with _Proof_ in
an italic style instead of bold:
```
~Proof: before="[_Proof_. ]{.proof-before}"
```

## Metadata  		{ #sec-metadata }

Similar to [multimarkdown], a document can begin with a special metadata
section that contains meta information like the document title, the author,
etc. Moreover, this section can contain attribute rules to globally apply
attributes to certain elements, much like CSS rules.

Metadata must come immediately as the first thing in a document, and consists
of keys followed by a colon and then the key value. A key value can span 
multiple lines by indenting, and you can leave blank lines between different keys.

	Title       : An overview of Madoko
	Author      : Daan Leijen
	Affiliation : Microsoft Research
	Email       : daan@microsoft.com
	Heading Base: 2
	MathJax     : True

### Special metadata keys

Any metadata key and value can be given (and referred to using 
[hash names][#sec-hashname]),  but certain keys have special meaning to Madoko.

* `Title`: The title of the document. For example, in HTML output it
	determines the `<title>` element. It is also used by the special `[TITLE]`
	element (Section [#sec-special]).

* `Subtitle`: An optional subtitle.

* `Author`, `Affiliation`, `Email`: the author name, affiliation, and
	email. There can be  multiple authors. The author info is also used by the
	`[TITLE]` element to generate a proper document title header.

* `Toc depth` (=3): The maximum depth of headings that are included in the
	table of contents (Section [#sec-toc]).	

* `Heading depth` (=3): The maximum depth of headings that are numbered (Section [#numbering]).
	Set it to zero to suppress numbering of headings completely.

* `Heading base` (=1): Usually, a top heading (`# heading`) maps to a `<h1>` or
	`\chapter` element in HTML and LaTeX respectively. By increasing the `Heading Base` you
	can change this mapping. For example, by using:
	```
	Heading Base: 2
	```
	the top headings will map to `<h2>` or `\section` elements instead.

* `Bib` or `Bibliography`: Specify a bibliography (`.bib`) file to be used by
	the BibTeX tool to generate a list of references (see Section [#sec-bib]).
	```
	Bib: ../mybibliography.bib
	```
* `Bib Style` or `Biblio Style` (=plain): Specify a BibTeX style that is used to format the list of 
	references. See Section [#sec-bibstyle] for more information.
	```
	Bib Style: plainnat
	```
* `Cite Style` (=auto): Specify the citation style used for citations,
	_natural_, _numeric_, _square_, or _auto_. See Section [#sec-cite] for more 
	information.

* `Cite All` (=false): Set to `True` to cite everything in the included bibliography files.

### HTML keys

Some keys are only interpreted for HTML output:

* `Css`: Specify a CSS file that needs to be included in HTML output. There can
	be many CSS keys present.
	```
	Css: lib/main.css
	Css: http://foo.com/bar.css
	Css: http://fonts.googleapis.com/css?family=Open+Sans
	```
* `Script`: Specify a Javascript file that needs to be included in the HTML output
	via a `<script>` tag. There can be many script keys present.
	```
	Script: lib/main.js
	```
* `MathJax` (=false): Set this key to true to include the right script
	tags to enable rendering of LaTeX mathematics in the browser. 
	```
	MathJax: True	
	```
* `HTML Header`: The value of this key is included literally in the 
	`<head>` section of the HTML document.


### LaTeX keys

For LaTeX output, the following keys are relevant:

* `Document Class` (=book): Specify the LaTeX document class. Can be 
   prefixed with its options using square brackets:

		Document Class: [9pt]article

* `Package`: Specify a LaTeX package that is included via `\usepackage`.
	The package name can be prefixed with its options using square brackets.

		Package: amsmath
		Package: [colorlinks=true,linkcolor=DarkBlue]hyperref



### Hash names		{ #sec-hashname }

An extension of Madoko is the use of _hash names_. If Madoko finds a name
prefixed by a hash (#) character, it looks up the name. If there is a block
element with that _id_, the hash name is replaced by the _label_ value of that block
(see Section [#sec-ids-labels]). If there is no block with that identity, 
Madoko looks if there is a metadata value with that name, and replaces the
hash name with its value: 
~ Sample
The title of this document is "#title".
And this section has label #sec-hashname.
~
A hash-name can consist of letters, underscores, minus signs, and digits.
If you want to follow the name directly with one of such symbols, the
hash name can be terminated with a semi-colon (or empty escape sequence `\/`).
Note that if values contain themselves hash names, these are expanded
recursively (up to a certain limit) which can provide a powerful abstraction
mechanism. For example, if we define a metadata value `Title2`:

	Title2: (#Title,#Title)

then the hashname `#Title2` expands to "#Title2".

If hash names are used inside [attributes][#sec-attr], Madoko first
looks for the name as one of the attribute key values. For example, you can
use names like `#id`, `#class`, and `#label`. Two special available keys are `#nl` 
which always expands to a newline character, and `#source` that expands to the
literal source of a block element. For some examples of their usage, see 
Sections [#sec-replace] and [#sec-reset].

### Metadata rules			{ #sec-rules }

Often, we need to apply specific attributes and formatting to certain elements
or custom blocks. This can be done using _metadata rules_. These rules
function much like regular CSS rules except that they are quite a bit more
limited. A rule starts with a tilde (`~`), dot (`.`), or hash character (`#`)
for matching a custom block, class name, or id respectively. The value of
a rule are attributes that get applied to any matching block.
Here are some examples:
	
	~Slanted    : font-style=oblique
	.bold       : font-weight=bold
	#myblock    : border-width=1px border-style=solid

This would typeset a `Slanted` custom block in an oblique font, any block with 
a `bold` class in bold, and the block with the `myblock` id with a solid border.
You can also use a comma separated list of matches that apply to all.
For example, we can give all code, inline or as a block, the class `mycode` as:

	~Pre,~Code: .mycode


## Special elements { #sec-special }

Madoko supports some special block elements that get expanded automatically.

* `[TITLE]`: Expands to a title element generated from the metadata keys _title_,
	_subtitle_, and author info (_author_, _affiliation_, and _email_).

* `[TOC]`, `[TOC=`_name_`]`: Expands to a table of contents. See also Section [#sec-toc].

* `[FOOTNOTES]`: Expands to the defined footnotes. If there are footnotes and this element
	is not present, the footnotes are automatically included at the end of the document.

* `[INCLUDE=`_file_`]`: Expands to the contents of _file_. Include elements are
	processed before any other processing happens and can for example be used to
	include meta data elements.

* `[BIB]`: Includes the bibliography entry file (`.bbl`) generated by BibTex. Internally
	expands to:
		~ TeX 
		[INCLUDE="myfile.bbl"]		
		~		
	See also Section [#sec-bib].

## Attributes 		{ #sec-attr }

An essential addition of Madoko is good support for attributes. The syntax is
similar to attribute definitions in [Kramdown], [Pandoc], and [MultiMarkdown],
and denoted between curly braces:

	{ .class #id key=value }

For most block elements, like lists, paragraphs, block quotes, etc, you can 
write attributes on the line directly following the block. 

~ Sample
This is a paragraph in small-caps.
{ font-variant=small-caps} 

* This is a 'mylist' 
* in italics
{ .mylist font-style="italic" }
~

For fenced code blocks, custom blocks, and headers, the attributes are specified on the first 
line.

~ Sample
### This header is not bold    { font-weight=normal }
```javascript   { .prettyprint .linenums  }
function one { 
	return "a one"; 
}
``` 
~ 

For inline elements, you can follow links, images, and bracketed text (between
`[` and `]`) with attributes although it is recommended to put attributes in 
link or image definitions themselves.

~ Sample
Here is an ![butterfly] image. 
With [bold]{font-weight=bold} text, and even the
T[E]{vertical-align=-0.5ex margin-left=-0.25ex margin-right=-0.25ex}X
logo.

[butterfly]: butterfly.png { width=100px vertical-align=top }
~

### Special attribute keys

Some attributes have a special meaning to Madoko. In particular:

* `tight`: Supresses enclosing the first text content in this block as a paragraph.
	This is used for example for a `BibItem` block. 
* `notag`: Supresses the output of a `div` tag (or LaTeX environment) for a custom block.
* `toc`, `toc-line`, `toc-depth`: Used for generating custom table of contents. Used
	for example by headings. See Section [#sec-toc] for more information.
* `before`, `replace`, and `after`: Used to transform the content of the block. See 
	Section [#sec-replace].
* `texelem=`_elem_: Uses _elem_ as the TeX environment instead of the name of the custom
	block.
* `label=`_label_: Sets the label of an element. This is used when referencing this block
	as explained in Section [#sec-ids-labels]
* `id=`_id_: Sets the _id_ of an element. Usually this is done using a hash name directly
	as `#`_id_.
* `class=`_classes_: Adds to the classes of this element. Usually set using a dot name 
 	as in `.`_class_. If you use `class=clear`, the classes are cleared. Similarly, you
 	can use `.`_class_`=clear` to remove one particular class.
* `sticky`: The attributes for this element will stick to apply to all of the same
	elements that follow in the document.
* `-`: clear any attributes that have been set before (usually through metadata rules).
* `input=`_input_. Sets the input mode of this block which determines how the content
	of this block is processed. One of:
	- `pre`: Preformatted code (Section [#sec-code]).
	- `raw`: Raw unprocessed input that is passed directly to the output.
	- `texraw`: Raw TeX code that is passed directly to LaTeX (See [`TeXRaw`][#sec-custom])
	- `htmlraw`: Raw HTML code that is passed directly to the HTML output (See [`HtmlRaw`][#sec-custom])
	- `math`: LaTeX mathematics mode input. Usually used through an `Equation` 
		block as described in Section [#sec-math].
	- `mathpre`: Preformatted LaTeX mathematics. Usually used through a `MathPre` block (Section [#sec-mathpre]).
	- `mathdefs`: LaTeX math definitions. Usually used through a `MathDefs` block (Section [#sec-mathdefs]).
	- `normal`, `markdown`: Regular Madoko markdown input (default).
	- `texonly`: Regular Madoko markdown that is only processed when generating LaTeX output.
		Usually used through the `TexOnly` block (Section [#sec-custom]).
	- `htmlonly`: Regular Madoko markdown that is only processed when generating HTML output.
		Usually used through the `HtmlOnly` block (Section [#sec-custom]).

### Special attribute classes

* `.para-block`.
* `.align-center`, `.align-right`, `.align-left`.
* `.hidden`.
* `.block`.
* `.wide`.

### Recognized formatting attributes

* `display=`(`block`|`inline`|`block-inline`|`hidden`)
* `margin=`(`auto`|_length_)
* `margin-left`,`margin-right`,`margin-bottom`,`margin-top`
* `padding=`(`auto`|_length_)
* `padding-left`,`padding-right`,`padding-bottom`,`padding-top`
* `width`,`height`
* `vertical-align=`(`top`|`middle`|`bottom`|_length_)
* `border-style=`(`none`|`solid`|`dotted`)
* `border-style-left`,`border-style-right`,`border-style-top`,`border-style-bottom`
* `border-width`
* `border-color=`_color_
* `text-align=`(`center`|`right`|`left`|`justify`)
* `text-indent`
* `line-height`
* `font-style=`(`italic`|`oblique`|`normal`)
* `font-variant=`(`small-caps`|`normal`)
* `font-weight=`(`bold`|`normal`)
* `font-size=`(`xx-small`|`x-small`|`small`|`medium`|`large`|`x-large`|`xx-large`)
* `font-family=`(`monospace`|`serif`|`sans-serif`|`normal`)
* `color=`_color_
* `penalty=`_number_
* `page-align=`(`top`|`bottom`|`here`)


## Identities and labels {#sec-ids-labels}

Attributes are most often used to give a block element an identity and then
refer to that element later on. For example, here we give an identifier
to a header:

~ Sample 
### A named header { #myheader }

And we can refer to it

* Using an explicit [link](#myheader) 
	(or [reference][#myheader]).
* Or using an implicit link to Section [#myheader].
* Or we can just see its label, namely #myheader.
~

Using an implicit link is generally recommended. When rendering a reference such
as Section [#myheader], there should never be a line break in between _Section_
and the label _#myheader_. In LaTeX for example, it is customary to write a
non-breakable space (`~`) instead of a regular space. Madoko takes care of
this automatically and always renders a non-breakable space  between a link and
what comes before it (unless the user uses an explicit line break).

Of course, we can refer to _any_ element that has an identity,
like equations, figures, tables, etc. Here is an example with an equation:

~~ Sample
In Equation [#eq-clifford] we define generators 
$\mathcal{C}\ell_{j}^\pm$ for Clifford
algebras[^moreInfo] over $\mathbb{R}$ which satisfy
~ Equation { #eq-clifford }
  \gamma_i\gamma_j +\gamma_j \gamma_i =\pm 2\delta_{i j}
~
and $\mathcal{C}\ell_{n+8}^\pm = 
		\mathcal{C}\ell_n^\pm \otimes \mathbb{R}(16)$.

[^moreInfo]: For more information, see [Wikipedia][Clifford].
[Clifford]:  http://en.wikipedia.org/wiki/Clifford_algebra
~~

An implicit link such as `[#myheader]` is a shorthand for an explicit link
`[#myheader](#myheader)`, i.e. it links to the local reference `#myheader` and
it displays the text `#myheader`. In Madoko, a [hash name][#sec-hashname]
(`#`_name_) is replaced by the _label_ value of the referred block. For
headers, this is by default the header number (as we will see in Section [#numbering]) 
but you can set any label you'd like. Using a minus\ (`-`) in
the attributes clears all attributes, which is used in the following example
to suppress the default numbering:

~ Sample
### An unnumbered header { - }
### A labeled header     { - #myheader1 label="my label" }
Let's refer to Section [#myheader1].
~

## Numbering	{ #numbering }

For larger documents, numbering sections, figures, tables, images, etc. is
quite important and Madoko supports this well. By default, Madoko will number
headers, figures, and equations. Numbering for headers is by default up to 3
levels, but it can be set for the document using the `Heading depth` meta
variable. If it is set to zero, it suppresses numbering for headings completely:

	Heading Depth: 0 


### Custom numbering

The numbering can be completely customized though. Numbers are introduced
using `@`_name_ syntax in attributes. When such counter name occurs, it is
automatically incremented. If the value of a _label_ contains a counter name,
it is replaced by its current value. For example, the default attributes for
equations contain[^fn-autocounter]:

	{ @equation label="(@equation)" }

This automatically will increment the `@equation` counter at each occurrence of
an equation block element, and set its label to the current value surrounded by
parenthesis. Similarly, the default label for main sections is defined as:

	{ @h1 label="@h1" }

Of course, for headers we like to display the label by default in front of the
header text. This can be done using the [before][#sec-replace] attribute where
we use the [`#label`][#sec-hashname] key to insert the value of the label. So,
the full definition for the main sections is:

	{ @h1 label="@h1" before="#label.\ \ \ " }


### Reset counters { #sec-reset }

If a counter has a dash in its name, of the form `@`_prefix_`-name`, then the
counter will be reset on every increment of the counter _prefix_. For example,
the counter for subsections is reset on every new section (using [metadata
rules][#sec-rules]):

	~h2: @h1-h2 label="@h1.@h1-h2" before="#label.\ \ \ "


### Display format 

The counters above are displayed as numbers but sometimes we would like to
number using other formats. When you assign a single letter to a counter, it
will continue counting using letters. This is nice for example when starting
the appendix where each section is generally numbered using letters:

	# Appendix (not numbered at all)   {-}
	
	# Section one of the appendix { @h1="A" }
	This section will be numbered as 'A'

	# Another appendix section
	This section will be numbered as 'B'

The display format of a counter can also be set indepently of setting its
value. Currently, Madoko supports `arabic`, `upper-case`, and `lower-case`
display. Assigning a single letter, like `@h1="A"` in the previous example is
just a shorthand for:

	{ @h1=upper-case @h1=1 }

As a final example, suppose we would like to count figures using  lower-case
letters and per section. We can do this by defining the default attributes for
figures as a metadata rule:

	~Figure: @h1-figure=lower-case label="@h1\/-@h1-figure" 

The label definition here displays figure labels of the form `2-b` for example
(where we used the empty [escape sequence][#sec-escapes] `\/` to prevent the
counter name `@h1`  being read as `@h1-`). Note that because this is a
metadata rule, we could not  use the assignment `@h1-figure="a"` here, or
otherwise every figure would get numbered as `a`. In this case we just want to
set the display mode here and not a specific value.

[^fn-autocounter]: 
	Actually, Madoko automatically creates and increments counters for any block
	element using the same name as that block element. Therefore, in a [metadata
	rule][#sec-rules] we should not add the `@equation` counter explicitly since
	it  is already done automatically by Madoko for any `Equation` block. If it is
	added, it will effectively increment the `@equation` counter twice.

## Replacement { #sec-replace }

Madoko has three attributes that can transform the content of block or inline
element, namely `before`, `after`, and `replace`. The `before` and `after`
elements just add content before and after:

~~ Sample
~ Myblock { before="*Myblock*: " after="." }
the content
~
~~

The `replace` attribute replaces the entire content with its value. You can
have multiple replacers and they are all applied in order. The replacers can
be cleared using the special `clear` value. Finally, all replacers can contain
hash names (Section [sec-hashname]) which are expanded. Useful hash names are
`#source` which expands to the current content of the block (possibly having
already some replacers applied), and `#nl` which expands to a newline
character. In particular, `before` and `after` are defined in terms of
`replace`, where `before=`_value_  is just syntactic sugar for
`replace=`_value_`\/#source` and similarly for `after`.

As an advanced example, for this document I defined a metadata rule for  the
`Sample` custom block that replaces its content by both a code block and a
regular markdown block. In a simplified form, it is defined as:

	~Sample: 
	  replace="```#nl#source#nl```#nl----#nl~~#nl#source#nl~~#nl"



### Regular expression replacement	{ #sec-regex }

A `replace` attribute can also define a general [regular expression][regex] replacement
of the form `/`_regex_`/`_replacer_`/`(`g`|`i`|`m`)?. The regular expression _regex_
is matched against the content, and a match is replaced by _replacer_. The options are:

* `g`: instead of just the first match, it will globally replace all matches found in the content.
* `i`: use case-insensitive matching.
* `m`: do a multi-line match where `^` and `$` match the beginning and end of each line respectively
	instead of just the start and end of the content.

[regex]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

For example, here is an example where we replace `<`quoted`>` text by 
single guillemet quotes:

~~ Sample
~ { replace="/<(.*?)>/&lsaquo;\1&rsaquo;/g" }
Here is <quoted> text.
~
~~

In the _replacer_ expression, we can also use special case conversion escape sequences:

* `\U` or `\L` transform the following text up to the next `\E` to upper- or lower-case 
	respectively.
* `\u` and `\l` replace the following character to upper- or lower-case.

~~ Sample
~ { replace="/(\w+)/\u\1/g" }
all words to title-case.
~
~~


### Advanced recursion and replacement

As more advanced example of recursion and replacement, we can actually
calculate  [fibonacci numbers][fib]. In the following sample, _n_ number of
`x` characters are replaced by _fib(n)_ `y` characters: 

~~ Sample 
~ Fib 
xxxxx
~  
~~

This is done through the following metadata rule:

	~Fib: replace='/^x?$/y/' 
		  replace='/xx(x*)/~Fib#nl\/x\1#nl~#nl~Fib#nl\1\/#nl~/' 
		  notag tight 

The first replacer will replace a single optional `x` with a `y`.  The second
one matches 2 or more `x`'s, and replaces these recursively by two  new `Fib`
blocks: one with _n-1_ and one with _n-2_ `x` characters. These blocks will
get processed now recursively. Finally, by using the `notag` attribute we
suppress the inclusion of many `div` elements in the HTML, while the `tight`
attribute suppresses the addition of paragraph elements.

This example shows the replacement facility of Madoko is quite powerful.
It is even possible to define a generic [SKI combinator expander][ski] which
makes Madoko's replacement mechanism (almost) Turing complete[^turing].

[fib]: http://en.wikipedia.org/wiki/Fibonacci_number
[ski]: http://madoko.codeplex.com/SourceControl/latest#test/new/extra_ski.text
[^turing]: Almost, since Madoko expands only up to a certain limit and since
	regular expressions cannot express arbitrary nesting levels.

## References { - }
[BIB]

# Appendix	{ - }

## Recognized entities   { @h1="A" }

Madoko recognizes all named html entities and translates them to the
appropiate LaTeX commands. If you often need a numbered entity, it can be
convenient to define a shorthand for it in the metadata:

	llbracket: &#10214;
	rrbracket: &#10215;

and then use the hash-names instead. For example:

~ Sample 
\/#llbracket;hi#rrbracket;.
~

However, the LaTeX backend will still give a warning that these enitities are
not defined in LaTeX. You can define your own definition for it using the
LaTeX `\mdDefineUnicode` command in a `TexRaw` block at the start of the
document. For example:

```latex	{ .prettyprint language=TeX }
~ TeXRaw
\mdDefineUnicode{10214}{\ensuremath{\llbracket}}
\mdDefineUnicode{10215}{\ensuremath{\rrbracket}}
~
```

If no definition is given, LaTeX will work but output the entity as is,
i.e. `&#10214;` for `#llbracket`.

The full list of predefined named entities is:

+--------|---------|--------+
| number | name    | glyph  |
+--------|---------|--------+
| 34   | quot  | &#34; |
| 35   | hash  | &#35; |
| 36   | dollar  | &#36; |
| 37   | perc  | &#37; |
| 38   | amp  | &#38; |
| 39   | apos  | &#39; |
| 40   | lpar  | &#40; |
| 41   | rpar  | &#41; |
| 42   | ast  | &#42; |
| 43   | plus  | &#43; |
| 47   | fslash  | &#47; |
| 60   | lt  | &#60; |
| 62   | gt  | &#62; |
| 92   | backslash  | &#92; |
| 94   | caret  | &#94; |
| 95   | underscore  | &#95; |
| 96   | grave  | &#96; |
| 123   | lcurly  | &#123; |
| 124   | bar  | &#124; |
| 125   | rcurly  | &#125; |
| 126   | tilde  | &#126; |
| 160   | nbsp  | &#160; |
| 161   | iexcl  | &#161; |
| 162   | cent  | &#162; |
| 163   | pound  | &#163; |
| 164   | curren  | &#164; |
| 165   | yen  | &#165; |
| 166   | brvbar  | &#166; |
| 167   | sect  | &#167; |
| 168   | uml  | &#168; |
| 169   | copy  | &#169; |
| 170   | ordf  | &#170; |
| 171   | laquo  | &#171; |
| 172   | not  | &#172; |
| 173   | shy  | &#173; |
| 174   | reg  | &#174; |
| 175   | macr  | &#175; |
| 176   | deg  | &#176; |
| 177   | plusmn  | &#177; |
| 178   | sup2  | &#178; |
| 179   | sup3  | &#179; |
| 180   | acute  | &#180; |
| 181   | micro  | &#181; |
| 182   | para  | &#182; |
| 183   | middot  | &#183; |
| 184   | cedil  | &#184; |
| 185   | sup1  | &#185; |
| 186   | ordm  | &#186; |
| 187   | raquo  | &#187; |
| 188   | frac14  | &#188; |
| 189   | frac12  | &#189; |
| 190   | frac34  | &#190; |
| 191   | iquest  | &#191; |
| 192   | Agrave  | &#192; |
| 193   | Aacute  | &#193; |
| 194   | Acirc  | &#194; |
| 195   | Atilde  | &#195; |
| 196   | Auml  | &#196; |
| 197   | Aring  | &#197; |
| 198   | AElig  | &#198; |
| 199   | Ccedil  | &#199; |
| 200   | Egrave  | &#200; |
| 201   | Eacute  | &#201; |
| 202   | Ecirc  | &#202; |
| 203   | Euml  | &#203; |
| 204   | Igrave  | &#204; |
| 205   | Iacute  | &#205; |
| 206   | Icirc  | &#206; |
| 207   | Iuml  | &#207; |
| 208   | ETH  | &#208; |
| 209   | Ntilde  | &#209; |
| 210   | Ograve  | &#210; |
| 211   | Oacute  | &#211; |
| 212   | Ocirc  | &#212; |
| 213   | Otilde  | &#213; |
| 214   | Ouml  | &#214; |
| 215   | times  | &#215; |
| 216   | Oslash  | &#216; |
| 217   | Ugrave  | &#217; |
| 218   | Uacute  | &#218; |
| 219   | Ucirc  | &#219; |
| 220   | Uuml  | &#220; |
| 221   | Yacute  | &#221; |
| 222   | THORN  | &#222; |
| 223   | szlig  | &#223; |
| 224   | agrave  | &#224; |
| 225   | aacute  | &#225; |
| 226   | acirc  | &#226; |
| 227   | atilde  | &#227; |
| 228   | auml  | &#228; |
| 229   | aring  | &#229; |
| 230   | aelig  | &#230; |
| 231   | ccedil  | &#231; |
| 232   | egrave  | &#232; |
| 233   | eacute  | &#233; |
| 234   | ecirc  | &#234; |
| 235   | euml  | &#235; |
| 236   | igrave  | &#236; |
| 237   | iacute  | &#237; |
| 238   | icirc  | &#238; |
| 239   | iuml  | &#239; |
| 240   | eth  | &#240; |
| 241   | ntilde  | &#241; |
| 242   | ograve  | &#242; |
| 243   | oacute  | &#243; |
| 244   | ocirc  | &#244; |
| 245   | otilde  | &#245; |
| 246   | ouml  | &#246; |
| 247   | divide  | &#247; |
| 248   | oslash  | &#248; |
| 249   | ugrave  | &#249; |
| 250   | uacute  | &#250; |
| 251   | ucirc  | &#251; |
| 252   | uuml  | &#252; |
| 253   | yacute  | &#253; |
| 254   | thorn  | &#254; |
| 255   | yuml  | &#255; |
| 321   | lstroke  | &#321; |
| 322   | Lstroke  | &#322; |
| 338   | OElig  | &#338; |
| 339   | oelig  | &#339; |
| 352   | Scaron  | &#352; |
| 353   | scaron  | &#353; |
| 376   | Yuml  | &#376; |
| 402   | fnof  | &#402; |
| 710   | circ  | &#710; |
| 732   | tilde  | &#732; |
| 913   | Alpha  | &#913; |
| 914   | Beta  | &#914; |
| 915   | Gamma  | &#915; |
| 916   | Delta  | &#916; |
| 917   | Epsilon  | &#917; |
| 918   | Zeta  | &#918; |
| 919   | Eta  | &#919; |
| 920   | Theta  | &#920; |
| 921   | Iota  | &#921; |
| 922   | Kappa  | &#922; |
| 923   | Lambda  | &#923; |
| 924   | Mu  | &#924; |
| 925   | Nu  | &#925; |
| 926   | Xi  | &#926; |
| 927   | Omicron  | &#927; |
| 928   | Pi  | &#928; |
| 929   | Rho  | &#929; |
| 931   | Sigma  | &#931; |
| 932   | Tau  | &#932; |
| 933   | Upsilon  | &#933; |
| 934   | Phi  | &#934; |
| 935   | Chi  | &#935; |
| 936   | Psi  | &#936; |
| 937   | Omega  | &#937; |
| 945   | alpha  | &#945; |
| 946   | beta  | &#946; |
| 947   | gamma  | &#947; |
| 948   | delta  | &#948; |
| 949   | epsilon  | &#949; |
| 950   | zeta  | &#950; |
| 951   | eta  | &#951; |
| 952   | theta  | &#952; |
| 953   | iota  | &#953; |
| 954   | kappa  | &#954; |
| 955   | lambda  | &#955; |
| 956   | mu  | &#956; |
| 957   | nu  | &#957; |
| 958   | xi  | &#958; |
| 959   | omicron  | &#959; |
| 960   | pi  | &#960; |
| 961   | rho  | &#961; |
| 962   | sigmaf  | &#962; |
| 963   | sigma  | &#963; |
| 964   | tau  | &#964; |
| 965   | upsilon  | &#965; |
| 966   | phi  | &#966; |
| 967   | chi  | &#967; |
| 968   | psi  | &#968; |
| 969   | omega  | &#969; |
| 977   | thetasym  | &#977; |
| 978   | upsih  | &#978; |
| 982   | piv  | &#982; |
| 8194   | ensp  | &#8194; |
| 8195   | emsp  | &#8195; |
| 8201   | thinsp  | &#8201; |
| 8203   | strut  | &#8203; |
| 8204   | zwnj  | &#8204; |
| 8205   | zwj  | &#8205; |
| 8206   | lrm  | &#8206; |
| 8207   | rlm  | &#8207; |
| 8211   | ndash  | &#8211; |
| 8212   | mdash  | &#8212; |
| 8216   | lsquo  | &#8216; |
| 8217   | rsquo  | &#8217; |
| 8218   | sbquo  | &#8218; |
| 8220   | ldquo  | &#8220; |
| 8221   | rdquo  | &#8221; |
| 8222   | bdquo  | &#8222; |
| 8224   | dagger  | &#8224; |
| 8225   | Dagger  | &#8225; |
| 8226   | bull  | &#8226; |
| 8230   | hellip  | &#8230; |
| 8240   | permil  | &#8240; |
| 8242   | prime  | &#8242; |
| 8243   | Prime  | &#8243; |
| 8249   | lsaquo  | &#8249; |
| 8250   | rsaquo  | &#8250; |
| 8254   | oline  | &#8254; |
| 8260   | frasl  | &#8260; |
| 8364   | euro  | &#8364; |
| 8465   | image  | &#8465; |
| 8472   | weierp  | &#8472; |
| 8476   | real  | &#8476; |
| 8482   | trade  | &#8482; |
| 8501   | alefsym  | &#8501; |
| 8592   | larr  | &#8592; |
| 8593   | uarr  | &#8593; |
| 8594   | rarr  | &#8594; |
| 8595   | darr  | &#8595; |
| 8596   | harr  | &#8596; |
| 8629   | crarr  | &#8629; |
| 8656   | lArr  | &#8656; |
| 8657   | uArr  | &#8657; |
| 8658   | rArr  | &#8658; |
| 8659   | dArr  | &#8659; |
| 8660   | hArr  | &#8660; |
| 8704   | forall  | &#8704; |
| 8706   | part  | &#8706; |
| 8707   | exist  | &#8707; |
| 8709   | empty  | &#8709; |
| 8711   | nabla  | &#8711; |
| 8712   | isin  | &#8712; |
| 8713   | notin  | &#8713; |
| 8715   | ni  | &#8715; |
| 8719   | prod  | &#8719; |
| 8721   | sum  | &#8721; |
| 8722   | minus  | &#8722; |
| 8727   | lowast  | &#8727; |
| 8730   | radic  | &#8730; |
| 8733   | prop  | &#8733; |
| 8734   | infin  | &#8734; |
| 8736   | ang  | &#8736; |
| 8743   | and  | &#8743; |
| 8744   | or  | &#8744; |
| 8745   | cap  | &#8745; |
| 8746   | cup  | &#8746; |
| 8747   | int  | &#8747; |
| 8756   | there4  | &#8756; |
| 8764   | sim  | &#8764; |
| 8773   | cong  | &#8773; |
| 8776   | asymp  | &#8776; |
| 8800   | ne  | &#8800; |
| 8801   | equiv  | &#8801; |
| 8804   | le  | &#8804; |
| 8805   | ge  | &#8805; |
| 8834   | sub  | &#8834; |
| 8835   | sup  | &#8835; |
| 8836   | nsub  | &#8836; |
| 8838   | sube  | &#8838; |
| 8839   | supe  | &#8839; |
| 8853   | oplus  | &#8853; |
| 8855   | otimes  | &#8855; |
| 8869   | perp  | &#8869; |
| 8901   | sdot  | &#8901; |
| 8942   | vellip  | &#8942; |
| 8968   | lceil  | &#8968; |
| 8969   | rceil  | &#8969; |
| 8970   | lfloor  | &#8970; |
| 8971   | rfloor  | &#8971; |
| 9001   | lang  | &#9001; |
| 9002   | rang  | &#9002; |
| 9674   | loz  | &#9674; |
| 9824   | spades  | &#9824; |
| 9827   | clubs  | &#9827; |
| 9829   | hearts  | &#9829; |
| 9830   | diams  | &#9830; |
| 8617   | hooklarr  | &#8617; |
| 8718   | bbox  | &#8718; |
| 9633   | box  | &#9633; |
| 9744   | ballotbox  | &#9744; |
| 9745   | ballotc  | &#9745; |
| 9746   | ballotx  | &#9746; |
| 10003   | checkmark  | &#10003; |
| 10004   | bcheckmark  | &#10004; |
| 10007   | xmark  | &#10007; |
| 10008   | bxmark  | &#10008; |
+---------+---+----------+
{ .long }

